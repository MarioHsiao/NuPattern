<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EnvDTE" #>
<#
	// This code detects the target version of Visual Studio by reading the 
	// MSBUILD variables of the "Versioning" project that are determined by the current build configuration (see BuildConfiguration.CSharp.props)
	// This template will only work correctly when transformed within Visual Studio
	var projectName = "Versioning";
	var buildConstantName = "DefineConstants";
	var buildConstantPrefix = "VSVER";

	var serviceProvider = (IServiceProvider)this.Host;
	var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;

	// Determine the VSVERXX build constant
	var projects = GetProjectsFromSolution(dte.Solution).Where(p => p != null);

	var versionProject = projects.First(p => p.Name == projectName);
	var buildConstants = versionProject.ConfigurationManager.ActiveConfiguration.Properties.Item(buildConstantName).Value.ToString();
	var vsVer = buildConstants.Substring(buildConstants.IndexOf(buildConstantPrefix), buildConstantPrefix.Length + 2);

	var targetVsVersion = vsVer;

	switch (vsVer)
	{
		case "VSVER10":
			targetVsVersion = "10.0";
			break;

		case "VSVER11":
			targetVsVersion = "11.0";
			break;

		default:
			targetVsVersion = vsVer;
			break;
	}
 #>
\<#
    // Framework Version
    var targetVsVersion = "<#=targetVsVersion#>";

    // Assembly Versions
    var assemblyMajor = 1;
    var assemblyMinor = 3;
    var assemblyBuild = 20;
    var assemblyRevision = 0;
    var assemblyVersion = new Version(assemblyMajor, assemblyMinor, assemblyBuild, assemblyRevision);

    //Note: To change Versions of DSL schemas, please change designer properties of DSLs (Schema, Store, Library)

    // VSIX Versions
    var runtimeVSIXVersion = assemblyVersion;
    var authoringVSIXVersion = runtimeVSIXVersion;
    
    // Ownership
    var vsixAuthor = "Outercurve";
	var assemblyAuthor = "The Outercurve Foundation";
	var assemblyCopyright = "Copyright 2012, The Outercurve Foundation under Apache 2.0 license.";
	
	// Assembly Identity
	var assemblyProductName = "Pattern Automation Toolkit";
\#><#+
 private static IEnumerable<EnvDTE.Project> GetProjectsFromSolution(EnvDTE.Solution solution)
 {
	var projects = new List<EnvDTE.Project>();

	foreach (var p in solution.Projects.OfType<EnvDTE.Project>())
	{
		if (p.Kind == Constants.vsProjectKindSolutionItems)
		{
			projects.AddRange(GetSubProjects(p.ProjectItems.OfType<EnvDTE.ProjectItem>()));
		}
		else
		{
			projects.Add(p);
		}
	}

	return projects;
 }

 private static IEnumerable<EnvDTE.Project> GetSubProjects(IEnumerable<EnvDTE.ProjectItem> projectItems)
 {
	var projects = new List<EnvDTE.Project>();
	foreach (var pi in projectItems)
	{
		if (pi.Kind == Constants.vsProjectItemKindSolutionItems)
		{
			projects.Add(pi.SubProject);
		}
		else if (pi.Kind == Constants.vsProjectKindSolutionItems)
		{
			projects.AddRange(GetSubProjects(pi.ProjectItems.OfType<EnvDTE.ProjectItem>()));
		}
	}
	return projects;
 }
#>