using System;
using System.Diagnostics.CodeAnalysis;
using Microsoft.VisualStudio.Patterning.Extensibility;
using Microsoft.VisualStudio.Patterning.Runtime;
using Microsoft.VisualStudio.Patterning.Runtime.Schema;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Microsoft.VisualStudio.Patterning.Common.UnitTests
{
    public class ModelElementExtensionsSpec
    {
        [TestClass]
        public class GivenANamedElement
        {
            internal static readonly IAssertion Assert = new Assertion();

            private PatternSchema product;

            [TestInitialize]
            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "type", Justification = "Test")]
            [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Test")]
            public void InitializeContext()
            {
                var store = new DslTestStore<PatternModelDomainModel>().Store;

                store.TransactionManager.DoWithinTransaction(
                    () => this.product = (PatternSchema)store.ElementFactory.CreateElement<PatternModelSchema>().CreatePatternSchema());
            }

            [TestMethod]
            public void WhenCreatingAViewWithEmptyName_ThenNameIsAutoGenerated()
            {
                using (var tx = this.product.Store.TransactionManager.BeginTransaction())
                {
                    var view = this.product.Create<ViewSchema>();
                    tx.Commit();

                    Assert.Equal("View1", view.Name);
                }
            }

            [TestMethod]
            public void WhenCreatingAViewWithEmptyName_ThenNameIsAutoGeneratedAndIncremented()
            {
                using (var tx = this.product.Store.TransactionManager.BeginTransaction())
                {
                    var view = this.product.Create<ViewSchema>();
                    var view1 = this.product.Create<ViewSchema>();
                    tx.Commit();

                    Assert.Equal("View1", view.Name);
                    Assert.Equal("View2", view1.Name);
                }
            }
        }

        [TestClass]
        public class GivenAProductViewOneView
        {
            internal static readonly IAssertion Assert = new Assertion();

            private PatternSchema product;

            [SuppressMessage("Microsoft.Performance", "CA1804:RemoveUnusedLocals", MessageId = "type", Justification = "Test"), TestInitialize]
            public void InitializeContext()
            {
                var type = typeof(ISolutionEvents);

                var store = new DslTestStore<PatternModelDomainModel>();

                store.TransactionManager.DoWithinTransaction(
                    () => this.product = store.ElementFactory.CreateElement<PatternModelSchema>().Create<PatternSchema>());
            }

            [TestMethod]
            public void WhenGettingUniqueNameWithUNExistentBaseName_ThenActualNameIsReturned()
            {
                var view = this.product.Create<ViewSchema>();

                Assert.True(view.GetUniqueName("Foo").Equals("Foo1"));
            }
        }

        [TestClass]
        public class GivenAProductViewTwoViews
        {
            internal static readonly IAssertion Assert = new Assertion();

            private PatternSchema product;

            [TestInitialize]
            public void InitializeContext()
            {
                var store = new DslTestStore<PatternModelDomainModel>();

                store.TransactionManager.DoWithinTransaction(
                    () => this.product = store.ElementFactory.CreateElement<PatternModelSchema>().Create<PatternSchema>());
            }

            [TestMethod]
            public void WhenGettingUniqueNameWithExistentBaseName_ThenActualNameIsReturned()
            {
                var view1 = this.product.Create<ViewSchema>();
                var view2 = this.product.Create<ViewSchema>();

                view1.Name = "Foo";
                view2.Name = "Foo1";

                Assert.True(view1.GetUniqueName("Foo").Equals("Foo2"));
            }
        }

        [SuppressMessage("Microsoft.Naming", "CA1711:IdentifiersShouldNotHaveIncorrectSuffix", Justification = "Test"), TestClass]
        public class GivenAElementWithoutDomainNameAttribute
        {
            internal static readonly IAssertion Assert = new Assertion();

            private PatternModelSchema patternModel;

            [TestInitialize]
            public void InitializeContext()
            {
                var store = new DslTestStore<PatternModelDomainModel>();

                store.TransactionManager.DoWithinTransaction(
                    () => this.patternModel = store.ElementFactory.CreateElement<PatternModelSchema>());
            }

            [TestMethod]
            public void WhenGettingName_ThenExceptionIsThrown()
            {
                Assert.Throws<InvalidOperationException>(() => this.patternModel.GetUniqueName("Foo"));
            }
        }

        [TestClass]
        public class GivenNoContext
        {
            internal static readonly IAssertion Assert = new Assertion();

            private PatternModelSchema patternModel;

            [TestInitialize]
            public void InitializeContext()
            {
                var store = new DslTestStore<PatternModelDomainModel>();

                store.TransactionManager.DoWithinTransaction(
                    () => this.patternModel = store.ElementFactory.CreateElement<PatternModelSchema>());
            }

            [TestMethod]
            public void WhenGettingNameWithNull_ThenExceptionIsThrown()
            {
                Assert.Throws<ArgumentNullException>(() => this.patternModel.GetUniqueName(null));
            }

            [TestMethod]
            public void WhenGettingNameWithEmpty_ThenExceptionIsThrown()
            {
                Assert.Throws<ArgumentOutOfRangeException>(() => this.patternModel.GetUniqueName(string.Empty));
            }
        }
    }
}