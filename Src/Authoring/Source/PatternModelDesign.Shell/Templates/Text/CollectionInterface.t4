<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Runtime.Interfaces.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Authoring.Toolkit.Shell.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Extensibility.dll" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.ComponentModel" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Runtime" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Extensibility" #>
<#@ Assembly Name="System.Data.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ Import Namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ Include File="Header.t4" #>
<#@ Include File="NamedElementParentInterface.t4" #>
<#@ Include File="ElementContainerInterface.t4" #>
<#@ Include File="ProductElementInterface.t4" #>
<# 
var store = this.ProductLine.Store;
    
// The pluralizer in .NET 4.0 only supports English.
var pluralizer = PluralizationService.CreateService(new System.Globalization.CultureInfo("en-US"));
    
foreach (var collection in store.DefaultPartition.ElementDirectory.AllElements.OfType<ICollectionInfo>())
{
    var codegen = new ProductCodeGeneration<ICollectionInfo, ICollection>(collection);
    codegen.AddType(typeof(Action));
    codegen.EndInit();
#>
namespace <#= RootNamespace #>
{
<# 
	foreach (var ns in codegen.SafeImports)
	{
#>
	using <#= ns #>;
<#
	}
#>

	<# GenerateFactoryInterfaceAttributes(collection); #>
	public partial interface I<#=collection.CodeIdentifier #> : IFactoryInterface
	{ <# 
GenerateProperties(codegen, collection);
GenerateParentProperty(collection);

PushIndent("\t");
PushIndent("\t");

GenerateContainedElements(pluralizer, collection);
GenerateDeleteInterfaceMethod();

PopIndent();
PopIndent();
#>

		/// <summary>
		/// Gets the generic <see cref="ICollection"/> underlying element.
		/// </summary>
		ICollection AsCollection();
	}
}

<#
}
#>