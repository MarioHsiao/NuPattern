<#+
private void GenerateContainedElements(PluralizationService pluralizer, IElementInfoContainer infoElement)
{
	foreach (var element in infoElement.Elements)
	{
		GenerateContainedElementProperty(pluralizer, element, "GetElement", "GetElements");		
	}

	foreach (var extension in infoElement.ExtensionPoints)
	{
		GenerateContainedElementProperty(pluralizer, extension, "GetExtension", "GetExtensions");		
	}

	foreach (var element in infoElement.Elements.Where(e => e.Multiplicity == NuPattern.Runtime.Multiplicity.Multiple))
	{
		GenerateContainedElementCreate(pluralizer, element);		
	}
}

private void GenerateContainedElementCreate(PluralizationService pluralizer, IContainedElementInfo element)
{
	var name = Pluralize(pluralizer, element);
#>

/// <summary>
///	Creates a new <see cref="I<#=element.CodeIdentifier#>"/> and adds it to the <see cref="<#=name#>"/> 
///	collection, executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
///	</summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
public I<#=element.CodeIdentifier#> Create<#=element.CodeIdentifier#>(string name, Action<I<#=element.CodeIdentifier#>> initializer = null)
{
<#+
	if (element is IElementInfo)
	{
#>
	return proxy.CreateElement<I<#=element.CodeIdentifier#>>(name, initializer);	
<#+
	}
	else if (element is ICollectionInfo)
	{
#>
	return proxy.CreateCollection<I<#=element.CodeIdentifier#>>(name, initializer);
<#+
	}
	else
	{
		throw new NotSupportedException("Unsupported element type");
	}
#>
}
<#+
}

private void GenerateContainedElementProperty(PluralizationService pluralizer, IContainedElementInfo element, string singularMethod, string pluralMethod)
{
	if (element.Multiplicity == NuPattern.Runtime.Multiplicity.Single)
	{
#>

/// <summary>
/// Gets the <see cref="I<#=element.CodeIdentifier#>"/> contained in this element.
/// </summary>
public I<#=element.CodeIdentifier#> <#=element.CodeIdentifier#> 
{ 
	get { return proxy.<#= singularMethod #>(() => this.<#=element.CodeIdentifier#>, element => new <#=element.CodeIdentifier#>(element)); }
}
<#+
	}
	else
	{
		var name = Pluralize(pluralizer, element);		
#>

/// <summary>
/// Gets all instances of <see cref="I<#=element.CodeIdentifier#>"/> contained in this element.
/// </summary>
public IEnumerable<I<#=element.CodeIdentifier#>> <#=name#> 
{ 
	get { return proxy.<#= pluralMethod #>(() => this.<#=name#>, element => new <#=element.CodeIdentifier#>(element)); }
}
<#+
	}
}

private string Pluralize(PluralizationService pluralizer, IContainedElementInfo element)
{
	var name = pluralizer.IsSingular(element.CodeIdentifier) ? pluralizer.Pluralize(element.CodeIdentifier) : element.CodeIdentifier;
	if (name == element.Parent.CodeIdentifier)
		// Do not change if the pluralized version ends up being the same as the containing class.
		name = element.CodeIdentifier;

	return name;
}
#>
