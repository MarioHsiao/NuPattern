<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Runtime.Interfaces.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Authoring.Toolkit.Shell.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Extensibility.dll" #>
<#@ Import Namespace="System.ComponentModel" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Runtime" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Extensibility" #>
<#@ Include File="Header.t4" #>
<#@ Include File="ProductElementInterface.t4" #>
<# 
var product = this.ProductLine.Product;   
    
var codegen = new ProductCodeGeneration<IProductInfo, IProduct>(product);
codegen.AddType(typeof(Action));
codegen.EndInit();

foreach (var ns in codegen.SafeImports)
{
#>
using <#= ns #>;
<#
}
#>

namespace <#= RootNamespace #>
{
	<# GenerateFactoryInterfaceAttributes(product); #>
	public partial interface I<#= product.CodeIdentifier #> : IFactoryInterface
	{ <# GenerateProperties(codegen, product); #>
<#
	PushIndent("\t");
	PushIndent("\t");

	foreach (var view in product.Views)
	{
		this.WriteLine("");
		GenerateDescription(view);
#>
I<#= view.CodeIdentifier #> <#= view.CodeIdentifier #> { get; }
<#
	}

	GenerateDeleteInterfaceMethod();

	PopIndent();
	PopIndent();
#>

		/// <summary>
		/// Gets the generic <see cref="IProduct"/> underlying element.
		/// </summary>
		IProduct AsProduct();
	}
}