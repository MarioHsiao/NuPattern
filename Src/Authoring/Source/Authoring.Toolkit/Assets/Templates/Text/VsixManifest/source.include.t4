<#@ Template Inherits="Microsoft.VisualStudio.Patterning.Library.ModelElementTextTransformation" HostSpecific="True" #>
<#@ ModelElement Type="Microsoft.VisualStudio.Patterning.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ output extension=".t4" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Runtime.Interfaces.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Authoring.Toolkit.Automation.dll" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Runtime" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Authoring.Authoring" #>
<#
	var toolkitInfo = this.Element.As<IPatternToolkitInfo>();
	var product = toolkitInfo.Parent.Parent;
	var toolkit = product as IPatternToolkit;
#>
\<#+
	string identifier = "<#= toolkitInfo.Identifier #>";
	string toolkitName = "<#= toolkitInfo.ToolkitName #>";
	string author = "<#= toolkitInfo.Author #>";
	string version = "<#= toolkitInfo.Version #>";
	string description = "<#= toolkitInfo.Description #>";
	string eula = @"<#= toolkitInfo.Eula #>";
	string icon = @"<#= toolkitInfo.Icon #>";

	string productName = "<#= product.InstanceName #>";
	string rootNamespace = "<#= toolkit.ProjectRootNamespace #>";
	string assemblyName = "<#= toolkit.ProjectAssemblyName #>";

	public bool HasValue(string value)
	{
		return !string.IsNullOrEmpty(value);
	}
\#>