<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateViewElementsCommand_TraceAddingViews" xml:space="preserve">
    <value>Creating child views for pattern model '{0}'.</value>
  </data>
  <data name="CreateViewElementsCommand_Description" xml:space="preserve">
    <value>Creates the initial View elements for each of the views in the Pattern Tool.</value>
  </data>
  <data name="CreateViewElementsCommand_DisplayName" xml:space="preserve">
    <value>Creates the Initial Views for the Pattern Tool</value>
  </data>
  <data name="AddViewCommand_TraceAddingView" xml:space="preserve">
    <value>Adding of new view to pattern element '{0}' with name '{1}'.</value>
  </data>
  <data name="AddViewCommand_Description" xml:space="preserve">
    <value>Adds a new view to the pattern model.</value>
  </data>
  <data name="AddViewCommand_DisplayName" xml:space="preserve">
    <value>Adds a New View</value>
  </data>
  <data name="AddViewCommand_TraceReferenceNotFound" xml:space="preserve">
    <value>Reference for existing view on pattern element '{0}' was not found.</value>
  </data>
  <data name="AutomationCategory_PatternToolkitAuthoring" xml:space="preserve">
    <value>Pattern Toolkit Authoring</value>
  </data>
  <data name="AutomationLibraryProjectNameValueProvider_Description" xml:space="preserve">
    <value>Determines the name of the automation library, depending on if it is parented or standalone</value>
  </data>
  <data name="AutomationLibraryProjectNameValueProvider_DisplayName" xml:space="preserve">
    <value>AutomationLibrary Project Name</value>
  </data>
  <data name="CreateAutomationLibraryExtensionCommand_Description" xml:space="preserve">
    <value>Creates the initial instance of the Automation Library for the toolkit.</value>
  </data>
  <data name="CreateAutomationLibraryExtensionCommand_DisplayName" xml:space="preserve">
    <value>Creates Automation Library Extension</value>
  </data>
  <data name="CreateAutomationLibraryExtensionCommand_ErrorFailedInstantiation" xml:space="preserve">
    <value>Failed to create an instance of the Automation Library for this toolkit for the '{0}' element. The '{1}' may not be installed on this machine. You will have to add the Automation Library manually.</value>
  </data>
  <data name="DeleteViewCommand_DeletingView" xml:space="preserve">
    <value>Deleting view.</value>
  </data>
  <data name="DeleteViewCommand_Description" xml:space="preserve">
    <value>Deletes an existing view in the pattern model.</value>
  </data>
  <data name="DeleteViewCommand_DisplayName" xml:space="preserve">
    <value>Deletes an Existing View</value>
  </data>
  <data name="LastViewCondition_Description" xml:space="preserve">
    <value>Used to verify that the view is not the last and only view in the pattern model.</value>
  </data>
  <data name="LastViewCondition_DisplayName" xml:space="preserve">
    <value>Is Not Only View</value>
  </data>
  <data name="SetAsDefaultViewCommand_Description" xml:space="preserve">
    <value>Sets a view as default in the pattern model.</value>
  </data>
  <data name="SetAsDefaultViewCommand_DisplayName" xml:space="preserve">
    <value>Sets a View as the Default View</value>
  </data>
  <data name="SetAsDefaultViewCommand_TraceSettingAsDefault" xml:space="preserve">
    <value>Setting default view of pattern element '{0} with name '{1}'.</value>
  </data>
  <data name="ShowViewCommand_Description" xml:space="preserve">
    <value>Shows the view in the pattern model.</value>
  </data>
  <data name="ShowViewCommand_DisplayName" xml:space="preserve">
    <value>Shows a View</value>
  </data>
  <data name="ShowViewCommand_ShowingView" xml:space="preserve">
    <value>Showing view.</value>
  </data>
  <data name="SynchViewNameCommand_Description" xml:space="preserve">
    <value>Synchronizes the name of the view in the pattern model.</value>
  </data>
  <data name="SynchViewNameCommand_DisplayName" xml:space="preserve">
    <value>Synchronizes a View's Name</value>
  </data>
  <data name="SynchViewNameCommand_SynchronizingViewName" xml:space="preserve">
    <value>Synchronizing view name.</value>
  </data>
  <data name="ViewArtifactLinkReference_Description" xml:space="preserve">
    <value>A view associated to the current element.</value>
  </data>
  <data name="ViewArtifactLinkReference_DisplayName" xml:space="preserve">
    <value>View Artifact Link</value>
  </data>
  <data name="ViewCommand_ParentPath_Description" xml:space="preserve">
    <value>The path to resolve the parent element.</value>
  </data>
  <data name="ViewCommand_ParentPath_DisplayName" xml:space="preserve">
    <value>Parent Path</value>
  </data>
  <data name="ValidatePatternModelCommand_Description" xml:space="preserve">
    <value>Validates the pattern in the pattern model file (*.patterndefinition) in the toolkit project.</value>
  </data>
  <data name="ValidatePatternModelCommand_DisplayName" xml:space="preserve">
    <value>Validates Pattern Model File</value>
  </data>
  <data name="ValidatePatternModelCommand_TargetPath_Description" xml:space="preserve">
    <value>The project in the solution containing the pattern model file. This property supports wildcard matches for relative paths in the solution starting from the 'Solution Item' related to the current node. Relative paths from the current element in the pattern model, and also supports property value substitution from properties on the current element. (e.g. {InstanceName} or {VariablePropertyName}). See guidance documentation for more details.</value>
  </data>
  <data name="ValidatePatternModelCommand_TargetPath_DisplayName" xml:space="preserve">
    <value>Target Path</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_Description" xml:space="preserve">
    <value>Shreds the toolkit guidance document, and creates a set of documents for each topic, adding them to the toolkit project.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_DisplayName" xml:space="preserve">
    <value>Creates Guidance Documents</value>
  </data>
  <data name="GuidanceDocumentPathProvider_Description" xml:space="preserve">
    <value>Retrieves the path of the guidance document on disk.</value>
  </data>
  <data name="GuidanceDocumentPathProvider_DisplayName" xml:space="preserve">
    <value>Guidance Document Path</value>
  </data>
  <data name="GuidanceDocumentPathProvider_LinkFound" xml:space="preserve">
    <value>Artifact link for guidance document of the element: '{0}' found: '{1}'.</value>
  </data>
  <data name="GuidanceDocumentPathProvider_NoDocumentLinkFound" xml:space="preserve">
    <value>No artifact link found for the guidance document of the element: '{0}'.</value>
  </data>
  <data name="GuidanceDocumentPathProvider_NoLinksFound" xml:space="preserve">
    <value>No artifact links found for the element: '{0}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_ErrorNoReferencesFound" xml:space="preserve">
    <value>No artifact links found for the toolkit.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_ErrorNoProjectReferenceFound" xml:space="preserve">
    <value>No artifact link found for the project of the toolkit.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceContentFolderCreating" xml:space="preserve">
    <value>Creating generated document content folder for the project '{0}' at: '{1}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_ErrorNoContentFolderFound" xml:space="preserve">
    <value>No guidance content folder could be found for the toolkit project at: '{0}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceTryDeleteGeneratedDocuments" xml:space="preserve">
    <value>Waiting, and re-attempting delete of locked temporary generated documents at: '{0}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceDeleteGeneratedDocumentsFailed" xml:space="preserve">
    <value>Failed to delete the temporary generated documents at: '{0}'. These need manual removal.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceAddingExcludedFile" xml:space="preserve">
    <value>Including existing excluded document '{0}' to project '{1}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceAddingNewFile" xml:space="preserve">
    <value>Adding new generated document '{0}' to project '{1}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceDeleteSuperfluousFile" xml:space="preserve">
    <value>Deleting superfluous file '{0}' in project '{1}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceOverwriteExistingFile" xml:space="preserve">
    <value>Overwriting existing with new generated document '{0}' in project '{1}'.</value>
  </data>
  <data name="GuidanceDocumentPathProvider_TraceInitial" xml:space="preserve">
    <value>Evaluating the path of the guidance document for the current element '{0}'</value>
  </data>
  <data name="GuidanceDocumentPathProvider_TraceEvaluation" xml:space="preserve">
    <value>Evaluated the path of the guidance document for the current element '{0}', as '{1}'</value>
  </data>
  <data name="LastViewCondition_TraceInitial" xml:space="preserve">
    <value>Determining if the current view '{0}' is only view.</value>
  </data>
  <data name="LastViewCondition_TraceEvaluation" xml:space="preserve">
    <value>Determined whether the current view '{0}' is only view, as '{1}'.</value>
  </data>
  <data name="AddViewCommand_TraceInitial" xml:space="preserve">
    <value>Executing add of new view to pattern element '{0}'.</value>
  </data>
  <data name="AddViewCommand_TraceAddingReference" xml:space="preserve">
    <value>Adding reference to view for pattern element '{0}'.</value>
  </data>
  <data name="DeleteViewCommand_TraceInitial" xml:space="preserve">
    <value>Executing delete of existing view from pattern element '{0}' with name '{1}'.</value>
  </data>
  <data name="DeleteViewCommand_TraceReferenceNotFound" xml:space="preserve">
    <value>Reference for existing view on pattern element '{0}' was not found.</value>
  </data>
  <data name="DeleteViewCommand_TraceSetOtherViewDefault" xml:space="preserve">
    <value>Setting remaining view '{0}' as default view.</value>
  </data>
  <data name="DeleteViewCommand_TraceDeleteingView" xml:space="preserve">
    <value>Deleting existing view of pattern element '{0} with name '{1}'.</value>
  </data>
  <data name="DeleteViewCommand_TraceViewNotFound" xml:space="preserve">
    <value>View of pattern element '{0}' not found '{1}'.</value>
  </data>
  <data name="SetAsDefaultViewCommand_TraceInitial" xml:space="preserve">
    <value>Executing setting default view of pattern element '{0}' with name '{1}'.</value>
  </data>
  <data name="SetAsDefaultViewCommand_TraceReferenceNotFound" xml:space="preserve">
    <value>Reference for existing view on pattern element '{0}' was not found.</value>
  </data>
  <data name="SetAsDefaultViewCommand_TraceViewNotFound" xml:space="preserve">
    <value>View of pattern element '{0}' not found '{1}'.</value>
  </data>
  <data name="ShowViewCommand_TraceInitial" xml:space="preserve">
    <value>Executing showing view of pattern element '{0}' with name '{1}'.</value>
  </data>
  <data name="ShowViewCommand_TraceReferenceNotFound" xml:space="preserve">
    <value>Reference for existing view on pattern element '{0}' was not found.</value>
  </data>
  <data name="ShowViewCommand_TraceShowingView" xml:space="preserve">
    <value>Showing view of pattern element '{0} with name '{1}'.</value>
  </data>
  <data name="ShowViewCommand_TraceViewNotFound" xml:space="preserve">
    <value>View of pattern element '{0}' not found '{1}'.</value>
  </data>
  <data name="SynchViewNameCommand_TraceSynchronizingViewName" xml:space="preserve">
    <value>Syncing name  of view of pattern element '{0}' with name '{1}'.</value>
  </data>
  <data name="SyncViewNameCommand_TraceInitial" xml:space="preserve">
    <value>Executing syncing name of view of pattern element '{0}' with name '{1}'.</value>
  </data>
  <data name="SyncViewNameCommand_TraceReferenceNotFound" xml:space="preserve">
    <value>Reference for existing view on pattern element '{0}' was not found.</value>
  </data>
  <data name="SyncViewNameCommand_TraceViewNotFound" xml:space="preserve">
    <value>View of pattern element '{0}' not found '{1}'.</value>
  </data>
  <data name="ValidatePatternModelCommand_TraceInitial" xml:space="preserve">
    <value>Executing validation of pattern model designer of pattern element '{0}' with path '{1}'.</value>
  </data>
  <data name="ValidatePatternModelCommand_TraceValidating" xml:space="preserve">
    <value>Validating pattern model designer of pattern element '{0}' with name '{1}'</value>
  </data>
  <data name="ValidatePatternModelCommand_TraceOpeningForResolution" xml:space="preserve">
    <value>Opening pattern model designer of pattern element '{0}' with name '{1}' for validation resolution</value>
  </data>
  <data name="ValidatePatternModelCommand_TraceDesignerNotFound" xml:space="preserve">
    <value>Pattern model designer of pattern element '{0}' not found</value>
  </data>
  <data name="CreateViewElementsCommand_TraceInitial" xml:space="preserve">
    <value>Executing creation of child views for pattern model '{0}'.</value>
  </data>
  <data name="CreateViewElementsCommand_TraceCreatingView" xml:space="preserve">
    <value>Creating child view for pattern model '{0}' with name '{1}'.</value>
  </data>
  <data name="CreateViewElementsCommand_TraceReferenceNotFound" xml:space="preserve">
    <value>Reference for pattern model '{0}' not found.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceInitial" xml:space="preserve">
    <value>Executing the creation of guidance content documents for guidance element '{0}'</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceTempGeneration" xml:space="preserve">
    <value>Generating documents into temporary location '{0}'</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceSyncingDocuments" xml:space="preserve">
    <value>Synchronizing generated documents from temporary location '{0}' with project '{1}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceAddingExcludedFiles" xml:space="preserve">
    <value>Including all existing, but excluded, documents in project '{0}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceAddingNewFiles" xml:space="preserve">
    <value>Adding all newly generated document to project '{0}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceDeleteSuperfluousFiles" xml:space="preserve">
    <value>Purging all superfluous file in project '{0}'</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceSettingBuildAction" xml:space="preserve">
    <value>Ensuring correct build actions on added document '{0}', in project '{1}'</value>
  </data>
  <data name="CreateAutomationLibraryExtensionCommand_TraceInital" xml:space="preserve">
    <value>Executing creation of automation library extension instance on '{0}'.</value>
  </data>
  <data name="CreateAutomationLibraryExtensionCommand_TraceCreatingInstance" xml:space="preserve">
    <value>Creating automation library extension instance on '{0}' with name '{1}'.</value>
  </data>
  <data name="SetManifestMSBuildCommand_Description" xml:space="preserve">
    <value>Sets the &lt;IsToolkitManifest&gt; MSBuild property on the *.vsixmanifest file, in the toolkit project.</value>
  </data>
  <data name="SetManifestMSBuildCommand_DisplayName" xml:space="preserve">
    <value>Sets MSBuild properties on the VSIX Manifest</value>
  </data>
  <data name="SetManifestMSBuildCommand_TraceInitial" xml:space="preserve">
    <value>Executing setting of MSBuild properties on *.vsixmanifest file for pattern toolkit registration '{0}'.</value>
  </data>
  <data name="ValidateGuidanceDocument_Description" xml:space="preserve">
    <value>Validates that the guidance document is correctly formatted.</value>
  </data>
  <data name="ValidateGuidanceDocument_DisplayName" xml:space="preserve">
    <value>Guidance Document is Valid</value>
  </data>
  <data name="ValidateGuidanceDocument_TraceInitial" xml:space="preserve">
    <value>Validating guidance document for current element '{0}'.</value>
  </data>
  <data name="ValidateGuidanceDocument_TraceValidation" xml:space="preserve">
    <value>Validated guidance document for current element '{0}', as '{1}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceValidatingDocument" xml:space="preserve">
    <value>Validating guidance document: '{0}'.</value>
  </data>
  <data name="CreateGuidanceDocumentsCommand_TraceDocumentValidationFailed" xml:space="preserve">
    <value>Validating guidance document: '{0}', failed with '{1}' errors.</value>
  </data>
  <data name="AddFromDroppedVSTemplateCommand_Description" xml:space="preserve">
    <value>Imports a VS Project/Item Template from a dropped *.zip template file.</value>
  </data>
  <data name="AddFromDroppedVSTemplateCommand_DisplayName" xml:space="preserve">
    <value>Imports a VSTemplate from dropped *.zip file</value>
  </data>
  <data name="AddFromDroppedVSTemplateCommand_TraceInitial" xml:space="preserve">
    <value>Adding VS Template elements '{1}' of the current element '{0}' for dragged VS Template files (*{2}).</value>
  </data>
  <data name="VsTemplateFileImporter_TraceFailedToUnzipToLocation" xml:space="preserve">
    <value>Zipped VS template file '{0}' for element '{1}' failed to unzip to location '{2}', error was: {3}</value>
  </data>
  <data name="VsTemplateFileImporter_TraceProjectFolderNotFound" xml:space="preserve">
    <value>Template folder '{0}' does not exist with the '{1}' folder in the solution.</value>
  </data>
  <data name="VsTemplateFileImporter_TraceVsTemplateFileNotFound" xml:space="preserve">
    <value>No VS Template file '(*{0})' exists within the '{1}' folder in the solution.</value>
  </data>
  <data name="VsTemplateFileImporter_TraceVsTemplateFound" xml:space="preserve">
    <value>Added VS Template file is '{0}'</value>
  </data>
  <data name="VsTemplateFileImporter_TraceRenamingTempUnzipFolder" xml:space="preserve">
    <value>Renaming temporary unzipped folder from '{0}' to '{1}'</value>
  </data>
  <data name="VsTemplateFileImporter_TraceRenamingTempVsTemplate" xml:space="preserve">
    <value>Renaming VS template file (*{0}) from '{1}' to '{2}'</value>
  </data>
  <data name="VsTemplateFileImporter_TraceResetItemProps" xml:space="preserve">
    <value>Resetting item project properties for '{0}'</value>
  </data>
  <data name="VsTemplateFileImporter_TraceAddFilesComplete" xml:space="preserve">
    <value>Completed unzipping, and adding of VS Template '{0}' of current element '{1}' to project folder '{2}'</value>
  </data>
  <data name="VsTemplateFileImporter_TraceUnzipTemplateFile" xml:space="preserve">
    <value>Unzipping template file '{0}' to temporary folder '{1}'</value>
  </data>
  <data name="VsTemplateFileImporter_TraceDeleteTempFolder" xml:space="preserve">
    <value>Cleaning up temporary unzip folder '{0}'</value>
  </data>
  <data name="ImportVSTemplateCommand_Description" xml:space="preserve">
    <value>Imports a selected VSTemplate file (*.zip) into the project.</value>
  </data>
  <data name="ImportVSTemplateCommand_DisplayName" xml:space="preserve">
    <value>Imports a VS Template from File</value>
  </data>
  <data name="ImportVSTemplateCommand_TargetPath_Description" xml:space="preserve">
    <value>The parent folder in the solution to unzip the VS Templates into. This property supports wildcard matches for relative paths in the solution starting from the 'Solution Item' related to the current node. Relative paths from the current element in the pattern model, and also supports property value substitution from properties on the current element. (e.g. {InstanceName} or {VariablePropertyName}). See guidance documentation for more details.</value>
  </data>
  <data name="ImportVSTemplateCommand_TargetPath_DisplayName" xml:space="preserve">
    <value>Target Path</value>
  </data>
  <data name="ImportVSTemplateCommand_TraceInitial" xml:space="preserve">
    <value>Adding VS Template elements '{1}' of the current element '{0}' for imported VS Template files (*{2}).</value>
  </data>
  <data name="AutomationCategory_Guidance" xml:space="preserve">
    <value>Guidance</value>
  </data>
</root>