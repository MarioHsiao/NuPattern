
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	A Visual Studio item template.
    ///	</summary>
    [Description("A Visual Studio item template.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "7475fa2d-8033-461c-a460-7e0793491874", ProxyType = typeof(ItemTemplate))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class ItemTemplate : IItemTemplate
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IItemTemplate> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private ItemTemplate() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ItemTemplate"/> class.
        /// </summary>
        public ItemTemplate(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IItemTemplate>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IItemTemplates Parent
        {
            get { return this.target.Parent.As<IItemTemplates>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	A Visual Studio project template
    ///	</summary>
    [Description("A Visual Studio project template")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "f03d48a2-2377-4e56-a2c4-ae24d34302d3", ProxyType = typeof(ProjectTemplate))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class ProjectTemplate : IProjectTemplate
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IProjectTemplate> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private ProjectTemplate() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectTemplate"/> class.
        /// </summary>
        public ProjectTemplate(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IProjectTemplate>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IProjectTemplates Parent
        {
            get { return this.target.Parent.As<IProjectTemplates>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	A custom T4 text template.
    ///	</summary>
    [Description("A custom T4 text template.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "c6a0f8d4-59df-4dad-b92e-c6a1e54be5e2", ProxyType = typeof(TextTemplate))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class TextTemplate : ITextTemplate
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<ITextTemplate> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private TextTemplate() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextTemplate"/> class.
        /// </summary>
        public TextTemplate(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<ITextTemplate>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual ITextTemplates Parent
        {
            get { return this.target.Parent.As<ITextTemplates>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	A custom wizard.
    ///	</summary>
    [Description("A custom wizard.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "b013c2ba-e9e0-484d-a0bc-e821c38c192b", ProxyType = typeof(Wizard))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class Wizard : IWizard
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IWizard> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private Wizard() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="Wizard"/> class.
        /// </summary>
        public Wizard(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IWizard>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IWizards Parent
        {
            get { return this.target.Parent.As<IWizards>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	A custom wizard page
    ///	</summary>
    [Description("A custom wizard page")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "93ee656b-6308-42d1-a5d7-e10fcea47ee7", ProxyType = typeof(WizardPage))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class WizardPage : IWizardPage
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IWizardPage> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private WizardPage() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="WizardPage"/> class.
        /// </summary>
        public WizardPage(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IWizardPage>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IWizardPages Parent
        {
            get { return this.target.Parent.As<IWizardPages>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	Guidance for the toolkit.
    ///	</summary>
    [Description("Guidance for the toolkit.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "c3d66aa5-3199-44ad-b7d7-f375a9ab16d3", ProxyType = typeof(Guidance))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class Guidance : IGuidance
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IGuidance> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private Guidance() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="Guidance"/> class.
        /// </summary>
        public Guidance(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IGuidance>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IAssets Parent
        {
            get { return this.target.Parent.As<IAssets>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	A relative path in the project where the guidance documents will be generated.
        ///	</summary>
        [Description("A relative path in the project where the guidance documents will be generated.")]
        [DisplayName("Project Content Path")]
        [Category("General")]
        public virtual String ProjectContentPath
        {
            get { return this.proxy.GetValue(() => this.ProjectContentPath); }
            set { this.proxy.SetValue(() => this.ProjectContentPath, value); }
        }

        ///	<summary>
        ///	The path to the guidance document
        ///	</summary>
        [Description("The path to the guidance document")]
        [DisplayName("Document File Path")]
        [Category("General")]
        public virtual String DocumentFilePath
        {
            get { return this.proxy.GetValue(() => this.DocumentFilePath); }
            set { this.proxy.SetValue(() => this.DocumentFilePath, value); }
        }

        ///	<summary>
        ///	The default name of all instances of this guidance.
        ///	</summary>
        [Description("The default name of all instances of this guidance.")]
        [DisplayName("Default Instance Name")]
        [Category("General")]
        public virtual String DefaultInstanceName
        {
            get { return this.proxy.GetValue(() => this.DefaultInstanceName); }
            set { this.proxy.SetValue(() => this.DefaultInstanceName, value); }
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.Design;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	The definition of the pattern.
    ///	</summary>
    [Description("The definition of the pattern.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "5da53e5a-0ba8-48f8-a922-1712244c388c", ProxyType = typeof(PatternModel))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class PatternModel : IPatternModel
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IPatternModel> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private PatternModel() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatternModel"/> class.
        /// </summary>
        public PatternModel(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IPatternModel>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IDevelopment Parent
        {
            get { return this.target.Parent.As<IDevelopment>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	When to validate the pattern model, to ensure that its configuration is valid and up to date.
        ///	</summary>
        [Description("When to validate the pattern model, to ensure that its configuration is valid and up to date.")]
        [DisplayName("Validate On Build")]
        [Category("General")]
        [TypeConverter(typeof(ValidateOnBuildConverter))]
        public virtual String ValidateOnBuild
        {
            get { return this.proxy.GetValue(() => this.ValidateOnBuild); }
            set { this.proxy.SetValue(() => this.ValidateOnBuild, value); }
        }

        ///	<summary>
        ///	Path to the definition file.
        ///	</summary>
        [Description("Path to the definition file.")]
        [DisplayName("Toolkit Definition File")]
        [Category("General")]
        public virtual String ToolkitDefinitionFile
        {
            get { return this.proxy.GetValue(() => this.ToolkitDefinitionFile); }
            set { this.proxy.SetValue(() => this.ToolkitDefinitionFile, value); }
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Gets the <see cref="IViews"/> contained in this element.
        /// </summary>
        public virtual IViews Views
        {
            get { return proxy.GetElement(() => this.Views, element => new Views(element)); }
        }

        /// <summary>
        ///	Creates a new <see cref="IViews"/>  
        /// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
        ///	</summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
        public virtual IViews CreateViews(string name, Action<IViews> initializer = null, bool raiseInstantiateEvents = true)
        {
            return proxy.CreateCollection<IViews>(name, initializer, raiseInstantiateEvents);
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	A view or aspect of the pattern.
    ///	</summary>
    [Description("A view or aspect of the pattern.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "6a596dea-529b-4cd5-9eea-7e856a2b332c", ProxyType = typeof(ViewModel))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class ViewModel : IViewModel
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IViewModel> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private ViewModel() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewModel"/> class.
        /// </summary>
        public ViewModel(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IViewModel>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IViews Parent
        {
            get { return this.target.Parent.As<IViews>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.Design;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	Information for packaging the toolkit as a VSIX extension.
    ///	</summary>
    [Description("Information for packaging the toolkit as a VSIX extension.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "c00ddfa6-b949-4c7c-b8b9-f46b8e3ccf1e", ProxyType = typeof(PatternToolkitInfo))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class PatternToolkitInfo : IPatternToolkitInfo
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IPatternToolkitInfo> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private PatternToolkitInfo() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="PatternToolkitInfo"/> class.
        /// </summary>
        public PatternToolkitInfo(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IPatternToolkitInfo>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IDevelopment Parent
        {
            get { return this.target.Parent.As<IDevelopment>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	The name of this pattern toolkit.
        ///	</summary>
        [Description("The name of this pattern toolkit.")]
        [DisplayName("Toolkit Name")]
        [Category("Identification")]
        public virtual String ToolkitName
        {
            get { return this.proxy.GetValue(() => this.ToolkitName); }
            set { this.proxy.SetValue(() => this.ToolkitName, value); }
        }

        ///	<summary>
        ///	The original author of this toolkit.
        ///	</summary>
        [Description("The original author of this toolkit.")]
        [DisplayName("Author")]
        [Category("Identification")]
        public virtual String Author
        {
            get { return this.proxy.GetValue(() => this.Author); }
            set { this.proxy.SetValue(() => this.Author, value); }
        }

        ///	<summary>
        ///	A description of the toolkit.
        ///	</summary>
        [Description("A description of the toolkit.")]
        [DisplayName("Toolkit Description")]
        [Category("Identification")]
        public virtual String Description
        {
            get { return this.proxy.GetValue(() => this.Description); }
            set { this.proxy.SetValue(() => this.Description, value); }
        }

        ///	<summary>
        ///	The current version of this toolkit.
        ///	</summary>
        [Description("The current version of this toolkit.")]
        [DisplayName("Version")]
        [Category("Identification")]
        public virtual String Version
        {
            get { return this.proxy.GetValue(() => this.Version); }
            set { this.proxy.SetValue(() => this.Version, value); }
        }

        ///	<summary>
        ///	The unique identifier of this toolkit, also used as the VSIX identifier.
        ///	</summary>
        [Description("The unique identifier of this toolkit, also used as the VSIX identifier.")]
        [DisplayName("Identifier")]
        [Category("Identification")]
        public virtual String Identifier
        {
            get { return this.proxy.GetValue(() => this.Identifier); }
            set { this.proxy.SetValue(() => this.Identifier, value); }
        }

        ///	<summary>
        ///	An optional icon for the toolkit.
        ///	</summary>
        [Description("An optional icon for the toolkit.")]
        [DisplayName("Icon")]
        [Category("Identification")]
        [TypeConverter(typeof(ItemRelativePathConverter))]
        [Editor(typeof(IconEditor), typeof(UITypeEditor))]
        public virtual String Icon
        {
            get { return this.proxy.GetValue(() => this.Icon); }
            set { this.proxy.SetValue(() => this.Icon, value); }
        }

        ///	<summary>
        ///	The license terms governing the use and distribution of this toolkit.
        ///	</summary>
        [Description("The license terms governing the use and distribution of this toolkit.")]
        [DisplayName("Eula")]
        [Category("Identification")]
        [TypeConverter(typeof(ItemRelativePathConverter))]
        [Editor(typeof(SolutionItemEditor), typeof(UITypeEditor))]
        public virtual String Eula
        {
            get { return this.proxy.GetValue(() => this.Eula); }
            set { this.proxy.SetValue(() => this.Eula, value); }
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

namespace NuPattern.Authoring.PatternToolkit
{
    using global::NuPattern.Runtime;
    using global::NuPattern.Runtime.ToolkitInterface;
    using global::System;
    using global::System.Collections.Generic;
    using global::System.ComponentModel;
    using global::System.ComponentModel.Composition;
    using global::System.ComponentModel.Design;
    using global::System.Drawing.Design;
    using Runtime = global::NuPattern.Runtime;

    ///	<summary>
    ///	The design of the tooling of the toolkit.
    ///	</summary>
    [Description("The design of the tooling of the toolkit.")]
    [ToolkitInterfaceProxy(ExtensionId = "9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "9291502b-fefc-4ef8-afc0-4c6914f0d2d1", ProxyType = typeof(ProductionTooling))]
    [System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    internal partial class ProductionTooling : IProductionTooling
    {
        private Runtime.IAbstractElement target;
        private Runtime.ToolkitInterface.IAbstractElementProxy<IProductionTooling> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private ProductionTooling() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionTooling"/> class.
        /// </summary>
        public ProductionTooling(Runtime.IAbstractElement target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<IProductionTooling>();
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets the parent element.
        /// </summary>
        public virtual IDesign Parent
        {
            get { return this.target.Parent.As<IDesign>(); }
        }

        /// <summary>
        /// Gets the generic <see cref="Runtime.IElement"/> underlying element.
        /// </summary>
        public virtual Runtime.IElement AsElement()
        {
            return this.As<Runtime.IElement>();
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }

        ///	<summary>
        ///	Notes for this element.
        ///	</summary>
        [Description("Notes for this element.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public virtual String Notes
        {
            get { return this.proxy.GetValue(() => this.Notes); }
            set { this.proxy.SetValue(() => this.Notes, value); }
        }

        ///	<summary>
        ///	The InTransaction.
        ///	</summary>
        public virtual Boolean InTransaction
        {
            get { return this.proxy.GetValue(() => this.InTransaction); }
        }

        ///	<summary>
        ///	The IsSerializing.
        ///	</summary>
        public virtual Boolean IsSerializing
        {
            get { return this.proxy.GetValue(() => this.IsSerializing); }
        }

        ///	<summary>
        ///	The name of this element instance.
        ///	</summary>
        [Description("The name of this element instance.")]
        [ParenthesizePropertyName(true)]
        public virtual String InstanceName
        {
            get { return this.proxy.GetValue(() => this.InstanceName); }
            set { this.proxy.SetValue(() => this.InstanceName, value); }
        }

        ///	<summary>
        ///	The order of this element relative to its siblings.
        ///	</summary>
        [Description("The order of this element relative to its siblings.")]
        [ReadOnly(true)]
        public virtual Double InstanceOrder
        {
            get { return this.proxy.GetValue(() => this.InstanceOrder); }
            set { this.proxy.SetValue(() => this.InstanceOrder, value); }
        }

        ///	<summary>
        ///	The references of this element.
        ///	</summary>
        [Description("The references of this element.")]
        public virtual IEnumerable<IReference> References
        {
            get { return this.proxy.GetValue(() => this.References); }
        }

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

