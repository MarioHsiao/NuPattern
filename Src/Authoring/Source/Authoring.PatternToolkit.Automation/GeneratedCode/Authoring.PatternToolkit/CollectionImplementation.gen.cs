
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	The assets used in this toolkit.
	///	</summary>
	[Description("The assets used in this toolkit.")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "58df3920-65bc-4078-b6a4-ab583f906881", ProxyType = typeof(Assets))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Assets : IAssets
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IAssets> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Assets() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Assets"/> class.
		/// </summary>
		public Assets(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IAssets>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets the <see cref="ITemplates"/> contained in this element.
		/// </summary>
		public virtual ITemplates Templates 
		{ 
			get { return proxy.GetElement(() => this.Templates, element => new Templates(element)); }
		}
		
		/// <summary>
		/// Gets the <see cref="IWizards"/> contained in this element.
		/// </summary>
		public virtual IWizards Wizards 
		{ 
			get { return proxy.GetElement(() => this.Wizards, element => new Wizards(element)); }
		}
		
		/// <summary>
		/// Gets the <see cref="IGuidance"/> contained in this element.
		/// </summary>
		public virtual IGuidance Guidance 
		{ 
			get { return proxy.GetElement(() => this.Guidance, element => new Guidance(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ITemplates"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ITemplates CreateTemplates(string name, Action<ITemplates> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<ITemplates>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="IWizards"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IWizards CreateWizards(string name, Action<IWizards> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<IWizards>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="IGuidance"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IGuidance CreateGuidance(string name, Action<IGuidance> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IGuidance>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	The templates used in this toolkit.
	///	</summary>
	[Description("The templates used in this toolkit.")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "f53b1915-e5c9-47f0-b33f-64487813d87c", ProxyType = typeof(Templates))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Templates : ITemplates
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ITemplates> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Templates() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Templates"/> class.
		/// </summary>
		public Templates(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ITemplates>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IAssets Parent
		{ 
			get { return this.target.Parent.As<IAssets>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets the <see cref="IItemTemplates"/> contained in this element.
		/// </summary>
		public virtual IItemTemplates ItemTemplates 
		{ 
			get { return proxy.GetElement(() => this.ItemTemplates, element => new ItemTemplates(element)); }
		}
		
		/// <summary>
		/// Gets the <see cref="IProjectTemplates"/> contained in this element.
		/// </summary>
		public virtual IProjectTemplates ProjectTemplates 
		{ 
			get { return proxy.GetElement(() => this.ProjectTemplates, element => new ProjectTemplates(element)); }
		}
		
		/// <summary>
		/// Gets the <see cref="ITextTemplates"/> contained in this element.
		/// </summary>
		public virtual ITextTemplates TextTemplates 
		{ 
			get { return proxy.GetElement(() => this.TextTemplates, element => new TextTemplates(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IItemTemplates"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IItemTemplates CreateItemTemplates(string name, Action<IItemTemplates> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<IItemTemplates>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="IProjectTemplates"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IProjectTemplates CreateProjectTemplates(string name, Action<IProjectTemplates> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<IProjectTemplates>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="ITextTemplates"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ITextTemplates CreateTextTemplates(string name, Action<ITextTemplates> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<ITextTemplates>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	VS item templates
	///	</summary>
	[Description("VS item templates")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "48591d87-4482-4dae-b5af-3ab807bcd947", ProxyType = typeof(ItemTemplates))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ItemTemplates : IItemTemplates
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IItemTemplates> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private ItemTemplates() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="ItemTemplates"/> class.
		/// </summary>
		public ItemTemplates(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IItemTemplates>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual ITemplates Parent
		{ 
			get { return this.target.Parent.As<ITemplates>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IItemTemplate"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IItemTemplate> ItemTemplate 
		{ 
			get { return proxy.GetElements(() => this.ItemTemplate, element => new ItemTemplate(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IItemTemplate"/>  and adds it to the <see cref="ItemTemplate"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IItemTemplate CreateItemTemplate(string name, Action<IItemTemplate> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IItemTemplate>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	VS project templates.
	///	</summary>
	[Description("VS project templates.")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "b48e216c-da3e-46db-9fdd-51af29559489", ProxyType = typeof(ProjectTemplates))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ProjectTemplates : IProjectTemplates
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IProjectTemplates> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private ProjectTemplates() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="ProjectTemplates"/> class.
		/// </summary>
		public ProjectTemplates(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IProjectTemplates>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual ITemplates Parent
		{ 
			get { return this.target.Parent.As<ITemplates>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IProjectTemplate"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IProjectTemplate> ProjectTemplate 
		{ 
			get { return proxy.GetElements(() => this.ProjectTemplate, element => new ProjectTemplate(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IProjectTemplate"/>  and adds it to the <see cref="ProjectTemplate"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IProjectTemplate CreateProjectTemplate(string name, Action<IProjectTemplate> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IProjectTemplate>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	T4 code generation templates.
	///	</summary>
	[Description("T4 code generation templates.")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "81dde21d-392a-4c60-a048-5c5445bf6542", ProxyType = typeof(TextTemplates))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class TextTemplates : ITextTemplates
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ITextTemplates> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private TextTemplates() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="TextTemplates"/> class.
		/// </summary>
		public TextTemplates(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ITextTemplates>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual ITemplates Parent
		{ 
			get { return this.target.Parent.As<ITemplates>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ITextTemplate"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ITextTemplate> TextTemplate 
		{ 
			get { return proxy.GetElements(() => this.TextTemplate, element => new TextTemplate(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ITextTemplate"/>  and adds it to the <see cref="TextTemplate"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ITextTemplate CreateTextTemplate(string name, Action<ITextTemplate> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ITextTemplate>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Wizards to gather user information
	///	</summary>
	[Description("Wizards to gather user information")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "e341bc69-c2e1-44ef-811f-6d092497c277", ProxyType = typeof(Wizards))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Wizards : IWizards
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IWizards> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Wizards() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Wizards"/> class.
		/// </summary>
		public Wizards(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IWizards>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IAssets Parent
		{ 
			get { return this.target.Parent.As<IAssets>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IWizard"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IWizard> Wizard 
		{ 
			get { return proxy.GetElements(() => this.Wizard, element => new Wizard(element)); }
		}
		
		/// <summary>
		/// Gets the <see cref="IWizardPages"/> contained in this element.
		/// </summary>
		public virtual IWizardPages WizardPages 
		{ 
			get { return proxy.GetElement(() => this.WizardPages, element => new WizardPages(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IWizard"/>  and adds it to the <see cref="Wizard"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IWizard CreateWizard(string name, Action<IWizard> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IWizard>(name, initializer, raiseInstantiateEvents);
		}
		
		/// <summary>
		///	Creates a new <see cref="IWizardPages"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IWizardPages CreateWizardPages(string name, Action<IWizardPages> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<IWizardPages>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	The pages of the wizard
	///	</summary>
	[Description("The pages of the wizard")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "3906075a-6263-4e5d-be94-3750e6fc1e57", ProxyType = typeof(WizardPages))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class WizardPages : IWizardPages
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IWizardPages> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private WizardPages() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="WizardPages"/> class.
		/// </summary>
		public WizardPages(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IWizardPages>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IWizards Parent
		{ 
			get { return this.target.Parent.As<IWizards>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IWizardPage"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IWizardPage> WizardPage 
		{ 
			get { return proxy.GetElements(() => this.WizardPage, element => new WizardPage(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IWizardPage"/>  and adds it to the <see cref="WizardPage"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IWizardPage CreateWizardPage(string name, Action<IWizardPage> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IWizardPage>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	Automation for the pattern model.
	///	</summary>
	[Description("Automation for the pattern model.")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "994965b7-d2b1-4460-8947-44ca73227b5f", ProxyType = typeof(AutomationCollection))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class AutomationCollection : IAutomationCollection
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IAutomationCollection> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private AutomationCollection() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="AutomationCollection"/> class.
		/// </summary>
		public AutomationCollection(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IAutomationCollection>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets the <see cref="IAutomationLibrary"/> contained in this element.
		/// </summary>
		public virtual IAutomationLibrary AutomationLibrary 
		{ 
			get { return proxy.GetExtension(() => this.AutomationLibrary, element => new AutomationLibrary(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IAutomationLibrary"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IAutomationLibrary CreateAutomationLibrary(string name, Guid productId, string toolkitId, Action<IAutomationLibrary> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateExtension<IAutomationLibrary>(name, productId, toolkitId, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace NuPattern.Authoring.PatternToolkit
{
	using global::NuPattern.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	///	<summary>
	///	The views (or aspects) being modeled in the pattern.
	///	</summary>
	[Description("The views (or aspects) being modeled in the pattern.")]
	[ToolkitInterfaceProxy(ExtensionId ="9f6dc301-6f66-4d21-9f9c-b37412b162f6", DefinitionId = "739aef21-5f1e-421b-804a-47f11f93c9c3", ProxyType = typeof(Views))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Views : IViews
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IViews> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Views() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Views"/> class.
		/// </summary>
		public Views(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IViews>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IPatternModel Parent
		{ 
			get { return this.target.Parent.As<IPatternModel>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IViewModel"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IViewModel> ViewModels 
		{ 
			get { return proxy.GetElements(() => this.ViewModels, element => new ViewModel(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IViewModel"/>  and adds it to the <see cref="ViewModels"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IViewModel CreateViewModel(string name, Action<IViewModel> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IViewModel>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

