<#@ Template inherits="NuPattern.Authoring.Guidance.TocProcessWorkflowTextTransformation" HostSpecific="True" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ output extension=".gen.cs" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Authoring.Guidance.dll" #>
<#@ Assembly Name="NuPattern.Authoring.PatternToolkit.Automation.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Authoring.PatternToolkit" #>
<#@ Import Namespace="NuPattern.Authoring.Guidance" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.Guidance" #>
<#@ Import Namespace="NuPattern.Runtime.Guidance.Workflow" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Include File="..\Utilities.t4include" #>
<#@ Include File="..\Header.t4include" #>
<#
IGuidance guidance = this.Element.As<IGuidance>();
var rootNamespace = guidance.Parent.Parent.Parent.ProjectRootNamespace;
var excludeFromCodeCoverage = guidance.Parent.Parent.Parent.ExcludeFromCodeCoverage;
var controller = new TocProcessWorkflowController(this, guidance.DocumentFilePath,
    new Guid(guidance.Parent.Parent.PatternToolkitInfo.Identifier).ToString() , guidance.ProjectContentPath);
#>

using System;
using System.ComponentModel.Composition;
using Microsoft.VisualStudio.Shell;
using NuPattern.Runtime.Composition;
using NuPattern.Runtime.Guidance;
using NuPattern.Runtime.Guidance.Extensions;
using NuPattern.Runtime.Guidance.Workflow;

namespace <#=rootNamespace #>.Guidance
{
<#
    Indent();
#>
/// <summary>
/// Defines a base class for the guidance workflow for this guidance extension.
/// </summary>
[CLSCompliant(false)]
<#
    if (excludeFromCodeCoverage)
    { 
#>
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
<#
    }
#>
[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Builder", "1.3.23.0")]
public partial class ProcessWorkflow : GuidanceWorkflow
{
<#
    Indent();
#>
/// <summary>
/// Gets the composition service.
/// </summary>
[Import]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
private INuPatternCompositionService Composition { get; set; }
<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
#>
/// <summary>
/// Gets whether to ignore all post conditions and enable all actions.
/// </summary>
public override bool IgnorePostConditions { get { return true; } }
<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
#>
/// <summary>
/// Initializes the workflow.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals")]
protected override void OnInitialize()
{
<#
    Indent();
#>
base.OnInitialize();
this.Name = "GuidanceWorkflow";
<#
    controller.RenderWorkflow();
#>

this.OnPostInitialize();
<#
    UnIndent();
#>
}
<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
#>
partial void OnPostInitialize();
<#
    UnIndent();
#>
}
<#
    UnIndent();
    WriteBlankLine();
    Indent();
#>
/// <summary>
/// Defines the guidance extension containing the guidance workflow.
/// </summary>
[GuidanceExtension("<#= new Guid(guidance.Parent.Parent.PatternToolkitInfo.Identifier).ToString() #>", DefaultName = "<#=guidance.DefaultInstanceName#>")]
[Export(typeof(IGuidanceExtension))]
[PartCreationPolicy(CreationPolicy.NonShared)]
[CLSCompliant(false)]
<#
    if (excludeFromCodeCoverage)
    { 
#>
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
<#
    }
#>
[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Builder", "1.3.23.0")]
public partial class GuidanceExtension : BlackboardGuidanceExtension<ProcessWorkflow>
{
<#
    Indent();
#>
/// <summary>
/// Initializes a new instance of the <see cref="GuidanceExtension"/> class.
/// </summary>
public GuidanceExtension() : base() { }
<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
#>
/// <summary>
/// Gets or sets the ServiceProvider.
/// </summary>
[Import]
public SVsServiceProvider ServiceProvider { get; set; }
<#
    UnIndent();
#>
}
<#
    UnIndent();
#>
}<#+

public override void WriteInitialConnectionCode(string initialIdentifier)
{
#>
this.ConnectTo(<#=initialIdentifier #>);
<#+
}

public override void WriteNodeConnectionCode(string predecessorIdentifier, string nodeIdentifier)
{
#>
<#=predecessorIdentifier #>.ConnectTo(<#=nodeIdentifier #>);
<#+
}

public override void WriteNodeVariableCode(INode node, string nodeIdentifier)
{
#>
var <#=nodeIdentifier #> = new <#=node.GetType().Name #>
{
<#+
    Indent();
#>
Name = "<#=node.Name #>",
<#+
    if (!String.IsNullOrEmpty(node.Description))
    {
#>
Description = "<#=node.Description #>",
<#+
    }
    if (!String.IsNullOrEmpty(node.Link))
    {
#>
Link = "<#=node.Link #>",
<#+
    }
    UnIndent();
#>
};
<#+
}
#>