<#@ output extension=".gen.t4" #>
<#@ Include File="..\..\..\..\..\..\..\MasterVSIXInfo.gen.ttinclude" #>
<#@ Include File="..\..\..\..\source.extension.gen.ttinclude" #>
\<#@ Template inherits="NuPattern.Authoring.Guidance.TocProcessWorkflowTextTransformation" HostSpecific="True" \#>
\<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" \#>
\<#@ output extension=".gen.cs" \#>
\<#@ Assembly Name="NuPattern.Common.dll" \#>
\<#@ Assembly Name="NuPattern.Authoring.Guidance.dll" \#>
\<#@ Assembly Name="NuPattern.Authoring.PatternToolkit.Automation.dll" \#>
\<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" \#>
\<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.dll" \#>
\<#@ Import Namespace="NuPattern.Authoring.PatternToolkit" \#>
\<#@ Import Namespace="NuPattern.Authoring.Guidance" \#>
\<#@ Import Namespace="NuPattern.Runtime" \#>
\<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" \#>
\<#@ Import Namespace="Microsoft.VisualStudio.TeamArchitect.PowerTools.Features" \#>
\<#@ Include File="..\Utilities.t4include" \#>
\<#@ Include File="..\Header.t4include" \#>
\<#
IGuidance guidance = this.Element.As<IGuidance>();
var rootNamespace = guidance.Parent.Parent.Parent.ProjectRootNamespace;
var excludeFromCodeCoverage = guidance.Parent.Parent.Parent.ExcludeFromCodeCoverage;
var controller = new TocProcessWorkflowController(this, guidance.DocumentFilePath,
    new Guid(guidance.Parent.Parent.PatternToolkitInfo.Identifier).ToString() , guidance.ProjectContentPath);
\#>

using System;
using System.ComponentModel.Composition;
using Microsoft.VisualStudio.Shell;

namespace \<#=rootNamespace \#>.Guidance
{
\<#
    Indent();
\#>
/// <summary>
/// Defines a base class for the guidance workflow for this feature.
/// </summary>
[CLSCompliant(false)]
\<#
    if (excludeFromCodeCoverage)
    { 
\#>
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
\<#
    }
\#>
[System.CodeDom.Compiler.GeneratedCode("<#= VsixInfo.PatternToolkitBuilder.Name #>", "<#= VsixInfo.PatternToolkitBuilder.Version #>")]
public partial class ProcessWorkflow : GuidanceWorkflow
{
\<#
    Indent();
\#>
/// <summary>
/// Gets the feature composition service.
/// </summary>
[Import]
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
private IFeatureCompositionService FeatureComposition { get; set; }
\<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
\#>
/// <summary>
/// Gets whether to ignore all post conditions and enable all actions.
/// </summary>
public override bool IgnorePostConditions { get { return true; } }
\<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
\#>
/// <summary>
/// Initializes the workflow.
/// </summary>
[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1809:AvoidExcessiveLocals")]
protected override void OnInitialize()
{
\<#
    Indent();
\#>
base.OnInitialize();
this.Name = "GuidanceWorkflow";
\<#
    controller.RenderWorkflow();
\#>

this.OnPostInitialize();
\<#
    UnIndent();
\#>
}
\<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
\#>
partial void OnPostInitialize();
\<#
    UnIndent();
\#>
}
\<#
    UnIndent();
    WriteBlankLine();
    Indent();
\#>
/// <summary>
/// Defines the feature extension containing the guidance workflow.
/// </summary>
[Feature("\<#= new Guid(guidance.Parent.Parent.PatternToolkitInfo.Identifier).ToString() \#>", DefaultName = "\<#=guidance.DefaultInstanceName\#>")]
[Export(typeof(IFeatureExtension))]
[PartCreationPolicy(CreationPolicy.NonShared)]
[CLSCompliant(false)]
\<#
    if (excludeFromCodeCoverage)
    { 
\#>
[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
\<#
    }
\#>
[System.CodeDom.Compiler.GeneratedCode("<#= VsixInfo.PatternToolkitBuilder.Name #>", "<#= VsixInfo.PatternToolkitBuilder.Version #>")]
public partial class Feature : BlackboardFeatureExtension<ProcessWorkflow>
{
\<#
    Indent();
\#>
/// <summary>
/// Initializes a new instance of the <see cref="Feature"/> class.
/// </summary>
public Feature() : base() { }
\<#
    UnIndent();
    UnIndent();
    WriteBlankLine();
    Indent();
    Indent();
\#>
/// <summary>
/// Gets or sets the ServiceProvider.
/// </summary>
[Import]
public SVsServiceProvider ServiceProvider { get; set; }
\<#
    UnIndent();
\#>
}
\<#
    UnIndent();
\#>
}\<#+

public override void WriteInitialConnectionCode(string initialIdentifier)
{
\#>
this.ConnectTo(\<#=initialIdentifier \#>);
\<#+
}

public override void WriteNodeConnectionCode(string predecessorIdentifier, string nodeIdentifier)
{
\#>
\<#=predecessorIdentifier \#>.ConnectTo(\<#=nodeIdentifier \#>);
\<#+
}

public override void WriteNodeVariableCode(INode node, string nodeIdentifier)
{
\#>
var \<#=nodeIdentifier \#> = new \<#=node.GetType().Name \#>
{
\<#+
    Indent();
\#>
Name = "\<#=node.Name \#>",
\<#+
    if (!String.IsNullOrEmpty(node.Description))
    {
\#>
Description = "\<#=node.Description \#>",
\<#+
    }
    if (!String.IsNullOrEmpty(node.Link))
    {
\#>
Link = "\<#=node.Link \#>",
\<#+
    }
    UnIndent();
\#>
};
\<#+
}
\#>