//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram")]

namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// Double-derived base class for DomainClass WorkflowDesignDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[DslModeling::DomainObjectId("1e053907-f125-4a0f-bc82-0cfe32cb32d6")]
	internal abstract partial class WorkflowDesignDiagramBase : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
		/// mapped to an element link.
		/// </summary>
		public override bool IsConnectorMappedToLink(DslDiagrams::BinaryLinkShape connector)
		{
			#region Check Parameters
			global::System.Diagnostics.Debug.Assert(connector != null);
			if (connector == null)
				throw new global::System.ArgumentNullException("connector");
			#endregion
			if (connector.GetType() == typeof(global::NuPattern.Authoring.WorkflowDesign.DesignConnector))
				return false;
			return base.IsConnectorMappedToLink(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::NuPattern.Authoring.WorkflowDesign.ProducedAsset)
			{
				global::NuPattern.Authoring.WorkflowDesign.ProducedAssetShape newShape = new global::NuPattern.Authoring.WorkflowDesign.ProducedAssetShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset)
			{
				global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape newShape = new global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Authoring.WorkflowDesign.ProductionTool)
			{
				global::NuPattern.Authoring.WorkflowDesign.ProductionToolShape newShape = new global::NuPattern.Authoring.WorkflowDesign.ProductionToolShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools)
			{
				global::NuPattern.Authoring.WorkflowDesign.ToolInputConnector newShape = new global::NuPattern.Authoring.WorkflowDesign.ToolInputConnector(this.Partition);
				return newShape;
			}
			if(element is global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools)
			{
				global::NuPattern.Authoring.WorkflowDesign.ToolInputConnector newShape = new global::NuPattern.Authoring.WorkflowDesign.ToolInputConnector(this.Partition);
				return newShape;
			}
			if(element is global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets)
			{
				global::NuPattern.Authoring.WorkflowDesign.ToolCopyConnector newShape = new global::NuPattern.Authoring.WorkflowDesign.ToolCopyConnector(this.Partition);
				return newShape;
			}
			if(element is global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets)
			{
				global::NuPattern.Authoring.WorkflowDesign.ToolOutputConnector newShape = new global::NuPattern.Authoring.WorkflowDesign.ToolOutputConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::NuPattern.Authoring.WorkflowDesign.ProductionToolShape.DecoratorsInitialized += ProductionToolShapeDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Authoring.WorkflowDesign.ProducedAssetShape.DecoratorsInitialized += ProducedAssetShapeDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape.DecoratorsInitialized += SuppliedAssetShapeDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ProductionToolShape.
		/// </summary>
		internal static partial class ProductionToolShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ProductionToolShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.ProductionTool.IsSatisfyingVariabilityDomainPropertyId);
				propertyInfo.FilteringValues.Add("False");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "IsNotSatisfyingVariabilityDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.ProductionTool.IsSatisfyingVariabilityDomainPropertyId);
				propertyInfo.FilteringValues.Add("True");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "IsSatisfyingVariabilityDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ProducedAssetShape.
		/// </summary>
		internal static partial class ProducedAssetShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ProducedAssetShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SuppliedAssetShape.
		/// </summary>
		internal static partial class SuppliedAssetShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SuppliedAssetShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape.StereotypeTextDomainPropertyId);
				propertyInfo.IsShapeProperty = true;
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "StereotypeDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetShape.StereotypeTextDomainPropertyId);
				propertyInfo.IsShapeProperty = true;
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "StereotypeDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Sticky Toolbox Support
		private string stickyToolboxItemId = null; // Id of the last-selected sticky toolbox item.
		
		/// <summary>
		/// Called when the selection on toolbox changed (through a single-click, or pressing up/down arrow keys).
		/// Base implementation does nothing.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">New toolbox item with selection. This can be null, if "Pointer" mode is selected.</param>
		public override void OnToolboxSelectionChanged(DslDesign::ModelingToolboxItem toolboxItem)
		{
			base.OnToolboxSelectionChanged(toolboxItem);
		
			// When a toolbox item is single-clicked, we need to turn off the sticky mode.
			this.stickyToolboxItemId = null;
			if (this.ActiveDiagramView != null)
			{
				DslDiagrams::CreateAction createAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::CreateAction;
				if (createAction != null)
				{
					createAction.StickyMode = false;
				}
				else
				{
					DslDiagrams::ConnectAction connectAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::ConnectAction;
					if (connectAction != null)
					{
						connectAction.StickyMode = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Called on selection of a ToolboxItem. (A selection is a double-click, or pressing Enter).
		/// The selection cannot be null; this method is not called when the "Pointer" mode is selected.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">Selected toolbox item.</param>
		public override bool OnToolboxItemSelected(DslDesign::ModelingToolboxItem toolboxItem)
		{
			// Save the current sticky item choice.
			this.stickyToolboxItemId = toolboxItem.Id;
			
			// Return true to indicate that the toolbox selection action is handled. Otherwise the old
			// behavior of creating new element on double-click will be carried out.
			return true;
		}
		#endregion
		
		#region Toolbox actions
		private bool changingMouseAction;
		private global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCreateAction suppliedAssetCreateAction;
		private global::NuPattern.Authoring.WorkflowDesign.ProductionToolCreateAction productionToolCreateAction;
		private global::NuPattern.Authoring.WorkflowDesign.ProducedAssetCreateAction producedAssetCreateAction;
		private global::NuPattern.Authoring.WorkflowDesign.ProductionWorkflowConnectorConnectAction productionWorkflowConnectorConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				bool stickyMode = false;
				DslDesign::ModelingToolboxItem selectedToolboxItem = activeView.Toolbox.GetSelectedToolboxItem() as DslDesign::ModelingToolboxItem;
				if (selectedToolboxItem != null && selectedToolboxItem.Id == this.stickyToolboxItemId)
				{
					stickyMode = true;
				}
				else
				{
					stickyMode = false;
					this.stickyToolboxItemId = null;
				}
		
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignToolboxHelper.SuppliedAssetFilterString))
				{
					if (this.suppliedAssetCreateAction == null)
					{
						this.suppliedAssetCreateAction = new global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCreateAction(this);
						this.suppliedAssetCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.suppliedAssetCreateAction.StickyMode = stickyMode;
					action = this.suppliedAssetCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignToolboxHelper.ProductionToolFilterString))
				{
					if (this.productionToolCreateAction == null)
					{
						this.productionToolCreateAction = new global::NuPattern.Authoring.WorkflowDesign.ProductionToolCreateAction(this);
						this.productionToolCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.productionToolCreateAction.StickyMode = stickyMode;
					action = this.productionToolCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignToolboxHelper.ProducedAssetFilterString))
				{
					if (this.producedAssetCreateAction == null)
					{
						this.producedAssetCreateAction = new global::NuPattern.Authoring.WorkflowDesign.ProducedAssetCreateAction(this);
						this.producedAssetCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.producedAssetCreateAction.StickyMode = stickyMode;
					action = this.producedAssetCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignToolboxHelper.ProductionWorkflowConnectorFilterString))
				{
					if (this.productionWorkflowConnectorConnectAction == null)
					{
						this.productionWorkflowConnectorConnectAction = new global::NuPattern.Authoring.WorkflowDesign.ProductionWorkflowConnectorConnectAction(this);
						this.productionWorkflowConnectorConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.productionWorkflowConnectorConnectAction.StickyMode = stickyMode;
					action = this.productionWorkflowConnectorConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom toolbox action.
		/// </summary>
		private void OnToolboxActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom toolbox action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.suppliedAssetCreateAction != null)
					{
						this.suppliedAssetCreateAction.Dispose();
						this.suppliedAssetCreateAction = null;
					}
					if(this.productionToolCreateAction != null)
					{
						this.productionToolCreateAction.Dispose();
						this.productionToolCreateAction = null;
					}
					if(this.producedAssetCreateAction != null)
					{
						this.producedAssetCreateAction.Dispose();
						this.producedAssetCreateAction = null;
					}
					if(this.productionWorkflowConnectorConnectAction != null)
					{
						this.productionWorkflowConnectorConnectAction.Dispose();
						this.productionWorkflowConnectorConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// WorkflowDesignDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1e053907, 0xf125, 0x4a0f, 0xbc, 0x82, 0x0c, 0xfe, 0x32, 0xcb, 0x32, 0xd6);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected WorkflowDesignDiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AuthoringGradientColor domain property code
		
		/// <summary>
		/// AuthoringGradientColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid AuthoringGradientColorDomainPropertyId = new global::System.Guid(0x62daca27, 0x748c, 0x4918, 0x9f, 0x33, 0x93, 0x8e, 0xef, 0xbf, 0x53, 0x61);
		
		/// <summary>
		/// Storage for AuthoringGradientColor
		/// </summary>
		private global::System.Drawing.Color authoringGradientColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("WhiteSmoke");
		
		/// <summary>
		/// Gets or sets the value of AuthoringGradientColor domain property.
		/// The color of the gradient in the title of the background.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/AuthoringGradientColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/AuthoringGradientColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "WhiteSmoke")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("62daca27-748c-4918-9f33-938eefbf5361")]
		internal global::System.Drawing.Color AuthoringGradientColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return authoringGradientColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AuthoringGradientColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WorkflowDesignDiagram.AuthoringGradientColor domain property.
		/// </summary>
		internal sealed partial class AuthoringGradientColorPropertyHandler : DslModeling::DomainPropertyValueHandler<WorkflowDesignDiagramBase, global::System.Drawing.Color>
		{
			private AuthoringGradientColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WorkflowDesignDiagram.AuthoringGradientColor domain property value handler.
			/// </summary>
			public static readonly AuthoringGradientColorPropertyHandler Instance = new AuthoringGradientColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WorkflowDesignDiagram.AuthoringGradientColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AuthoringGradientColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(WorkflowDesignDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.authoringGradientColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WorkflowDesignDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.authoringGradientColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AuthoringBackgroundColor domain property code
		
		/// <summary>
		/// AuthoringBackgroundColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid AuthoringBackgroundColorDomainPropertyId = new global::System.Guid(0x5f31d4ab, 0xe4f7, 0x4a1e, 0xa2, 0xfb, 0xcc, 0xc5, 0x47, 0x94, 0x85, 0x37);
		
		/// <summary>
		/// Storage for AuthoringBackgroundColor
		/// </summary>
		private global::System.Drawing.Color authoringBackgroundColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("White");
		
		/// <summary>
		/// Gets or sets the value of AuthoringBackgroundColor domain property.
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram.Authoring Background
		/// Color
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/AuthoringBackgroundColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/AuthoringBackgroundColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "White")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("5f31d4ab-e4f7-4a1e-a2fb-ccc547948537")]
		internal global::System.Drawing.Color AuthoringBackgroundColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return authoringBackgroundColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AuthoringBackgroundColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WorkflowDesignDiagram.AuthoringBackgroundColor domain property.
		/// </summary>
		internal sealed partial class AuthoringBackgroundColorPropertyHandler : DslModeling::DomainPropertyValueHandler<WorkflowDesignDiagramBase, global::System.Drawing.Color>
		{
			private AuthoringBackgroundColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WorkflowDesignDiagram.AuthoringBackgroundColor domain property value handler.
			/// </summary>
			public static readonly AuthoringBackgroundColorPropertyHandler Instance = new AuthoringBackgroundColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WorkflowDesignDiagram.AuthoringBackgroundColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AuthoringBackgroundColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(WorkflowDesignDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.authoringBackgroundColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WorkflowDesignDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.authoringBackgroundColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AuthoringTitleTextColor domain property code
		
		/// <summary>
		/// AuthoringTitleTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid AuthoringTitleTextColorDomainPropertyId = new global::System.Guid(0x49859ae8, 0x64df, 0x49be, 0xae, 0xc0, 0x04, 0x05, 0xd6, 0x53, 0xe0, 0x9a);
		
		/// <summary>
		/// Storage for AuthoringTitleTextColor
		/// </summary>
		private global::System.Drawing.Color authoringTitleTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DarkGray");
		
		/// <summary>
		/// Gets or sets the value of AuthoringTitleTextColor domain property.
		/// The color of the text of the diagram title.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/AuthoringTitleTextColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/AuthoringTitleTextColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DarkGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("49859ae8-64df-49be-aec0-0405d653e09a")]
		internal global::System.Drawing.Color AuthoringTitleTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return authoringTitleTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AuthoringTitleTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WorkflowDesignDiagram.AuthoringTitleTextColor domain property.
		/// </summary>
		internal sealed partial class AuthoringTitleTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<WorkflowDesignDiagramBase, global::System.Drawing.Color>
		{
			private AuthoringTitleTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WorkflowDesignDiagram.AuthoringTitleTextColor domain property value handler.
			/// </summary>
			public static readonly AuthoringTitleTextColorPropertyHandler Instance = new AuthoringTitleTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WorkflowDesignDiagram.AuthoringTitleTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AuthoringTitleTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(WorkflowDesignDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.authoringTitleTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WorkflowDesignDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.authoringTitleTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringGradientColor domain property code
		
		/// <summary>
		/// TailoringGradientColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringGradientColorDomainPropertyId = new global::System.Guid(0xd4807ceb, 0x9f5b, 0x4d28, 0x82, 0xbf, 0x8a, 0xd5, 0x97, 0x2c, 0x52, 0x49);
		
		/// <summary>
		/// Storage for TailoringGradientColor
		/// </summary>
		private global::System.Drawing.Color tailoringGradientColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("WhiteSmoke");
		
		/// <summary>
		/// Gets or sets the value of TailoringGradientColor domain property.
		/// The color of the gradient in the title of the background.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/TailoringGradientColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/TailoringGradientColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "WhiteSmoke")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d4807ceb-9f5b-4d28-82bf-8ad5972c5249")]
		internal global::System.Drawing.Color TailoringGradientColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringGradientColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringGradientColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WorkflowDesignDiagram.TailoringGradientColor domain property.
		/// </summary>
		internal sealed partial class TailoringGradientColorPropertyHandler : DslModeling::DomainPropertyValueHandler<WorkflowDesignDiagramBase, global::System.Drawing.Color>
		{
			private TailoringGradientColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WorkflowDesignDiagram.TailoringGradientColor domain property value handler.
			/// </summary>
			public static readonly TailoringGradientColorPropertyHandler Instance = new TailoringGradientColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WorkflowDesignDiagram.TailoringGradientColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringGradientColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(WorkflowDesignDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringGradientColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WorkflowDesignDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringGradientColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringBackgroundColor domain property code
		
		/// <summary>
		/// TailoringBackgroundColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringBackgroundColorDomainPropertyId = new global::System.Guid(0x7e3a2258, 0x2ee4, 0x49fc, 0x9a, 0xfe, 0x96, 0x31, 0x0c, 0x5e, 0xd5, 0x8d);
		
		/// <summary>
		/// Storage for TailoringBackgroundColor
		/// </summary>
		private global::System.Drawing.Color tailoringBackgroundColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("204, 204, 204");
		
		/// <summary>
		/// Gets or sets the value of TailoringBackgroundColor domain property.
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram.Tailoring Background
		/// Color
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/TailoringBackgroundColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/TailoringBackgroundColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "204, 204, 204")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("7e3a2258-2ee4-49fc-9afe-96310c5ed58d")]
		internal global::System.Drawing.Color TailoringBackgroundColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringBackgroundColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringBackgroundColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WorkflowDesignDiagram.TailoringBackgroundColor domain property.
		/// </summary>
		internal sealed partial class TailoringBackgroundColorPropertyHandler : DslModeling::DomainPropertyValueHandler<WorkflowDesignDiagramBase, global::System.Drawing.Color>
		{
			private TailoringBackgroundColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WorkflowDesignDiagram.TailoringBackgroundColor domain property value handler.
			/// </summary>
			public static readonly TailoringBackgroundColorPropertyHandler Instance = new TailoringBackgroundColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WorkflowDesignDiagram.TailoringBackgroundColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringBackgroundColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(WorkflowDesignDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringBackgroundColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WorkflowDesignDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringBackgroundColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringTitleTextColor domain property code
		
		/// <summary>
		/// TailoringTitleTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringTitleTextColorDomainPropertyId = new global::System.Guid(0x310d7d2c, 0xe3e2, 0x4b53, 0xa4, 0x74, 0x1e, 0x6b, 0xcc, 0x3f, 0x27, 0x47);
		
		/// <summary>
		/// Storage for TailoringTitleTextColor
		/// </summary>
		private global::System.Drawing.Color tailoringTitleTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DarkGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringTitleTextColor domain property.
		/// The color of the text of the diagram title.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/TailoringTitleTextColor.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram/TailoringTitleTextColor.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DarkGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("310d7d2c-e3e2-4b53-a474-1e6bcc3f2747")]
		internal global::System.Drawing.Color TailoringTitleTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringTitleTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringTitleTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the WorkflowDesignDiagram.TailoringTitleTextColor domain property.
		/// </summary>
		internal sealed partial class TailoringTitleTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<WorkflowDesignDiagramBase, global::System.Drawing.Color>
		{
			private TailoringTitleTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the WorkflowDesignDiagram.TailoringTitleTextColor domain property value handler.
			/// </summary>
			public static readonly TailoringTitleTextColorPropertyHandler Instance = new TailoringTitleTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the WorkflowDesignDiagram.TailoringTitleTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringTitleTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(WorkflowDesignDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringTitleTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(WorkflowDesignDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringTitleTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass WorkflowDesignDiagram
	/// Description for NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram
	/// </summary>
			
	internal partial class WorkflowDesignDiagram : WorkflowDesignDiagramBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WorkflowDesignDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WorkflowDesignDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.ProducedAsset), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.ProductionTool), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::NuPattern.Authoring.WorkflowDesign.ProducedAsset)
				{
					parentElement = GetParentForProducedAsset((global::NuPattern.Authoring.WorkflowDesign.ProducedAsset)childElement);
				} else
				if(childElement is global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset)
				{
					parentElement = GetParentForSuppliedAsset((global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset)childElement);
				} else
				if(childElement is global::NuPattern.Authoring.WorkflowDesign.ProductionTool)
				{
					parentElement = GetParentForProductionTool((global::NuPattern.Authoring.WorkflowDesign.ProductionTool)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::NuPattern.Authoring.WorkflowDesign.Design GetParentForProductionTool( global::NuPattern.Authoring.WorkflowDesign.ProductionTool root )
			{
				// Segments 0 and 1
				global::NuPattern.Authoring.WorkflowDesign.Design result = root.Design;
				if ( result == null ) return null;
				return result;
			}
			public static global::NuPattern.Authoring.WorkflowDesign.Design GetParentForProducedAsset( global::NuPattern.Authoring.WorkflowDesign.Asset root )
			{
				// Segments 0 and 1
				global::NuPattern.Authoring.WorkflowDesign.Design result = root.Design;
				if ( result == null ) return null;
				return result;
			}
			public static global::NuPattern.Authoring.WorkflowDesign.Design GetParentForSuppliedAsset( global::NuPattern.Authoring.WorkflowDesign.Asset root )
			{
				// Segments 0 and 1
				global::NuPattern.Authoring.WorkflowDesign.Design result = root.Design;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram diagram = linkShape.Diagram as global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
