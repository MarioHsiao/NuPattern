//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainModel WorkflowDesignDomainModel
	/// Description for NuPattern.Authoring.WorkflowDesign.WorkflowDesign
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("c0712d75-bf72-45f5-9b7b-bf7ad51c42c8")]
	internal partial class WorkflowDesignDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// WorkflowDesignDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xc0712d75, 0xbf72, 0x45f5, 0x9b, 0x7b, 0xbf, 0x7a, 0xd5, 0x1c, 0x42, 0xc8);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public WorkflowDesignDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(VariabilityRequirement),
				typeof(ProducedAsset),
				typeof(ProductionTool),
				typeof(SuppliedAsset),
				typeof(Asset),
				typeof(Design),
				typeof(NamedElementSchema),
				typeof(DesignElement),
				typeof(ProductionToolReferencesVariabilityRequirements),
				typeof(ProductionToolProducesProducedAssets),
				typeof(ProducedAssetSuppliesProductionTools),
				typeof(SuppliedAssetCopiesToProducedAssets),
				typeof(SuppliedAssetSuppliesProductionTools),
				typeof(AssetSuppliesAllProducingTools),
				typeof(DesignHasProductionTools),
				typeof(DesignHasAssets),
				typeof(DesignHasVariabilityRequirements),
				typeof(ParentVariabilityRequirementHasParentVariabilityRequirements),
				typeof(WorkflowDesignDiagram),
				typeof(DesignConnector),
				typeof(ToolInputConnector),
				typeof(ToolOutputConnector),
				typeof(ToolCopyConnector),
				typeof(ProductionToolShape),
				typeof(ProducedAssetShape),
				typeof(SuppliedAssetShape),
				typeof(global::NuPattern.Authoring.WorkflowDesign.FixUpDiagram),
				typeof(global::NuPattern.Authoring.WorkflowDesign.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(VariabilityRequirement), "IsSatisfiedByProductionTool", VariabilityRequirement.IsSatisfiedByProductionToolDomainPropertyId, typeof(VariabilityRequirement.IsSatisfiedByProductionToolPropertyHandler)),
				new DomainMemberInfo(typeof(ProducedAsset), "IsFinal", ProducedAsset.IsFinalDomainPropertyId, typeof(ProducedAsset.IsFinalPropertyHandler)),
				new DomainMemberInfo(typeof(ProductionTool), "Classification", ProductionTool.ClassificationDomainPropertyId, typeof(ProductionTool.ClassificationPropertyHandler)),
				new DomainMemberInfo(typeof(ProductionTool), "IsSatisfyingVariability", ProductionTool.IsSatisfyingVariabilityDomainPropertyId, typeof(ProductionTool.IsSatisfyingVariabilityPropertyHandler)),
				new DomainMemberInfo(typeof(SuppliedAsset), "IsUserSupplied", SuppliedAsset.IsUserSuppliedDomainPropertyId, typeof(SuppliedAsset.IsUserSuppliedPropertyHandler)),
				new DomainMemberInfo(typeof(Asset), "SourceReference", Asset.SourceReferenceDomainPropertyId, typeof(Asset.SourceReferencePropertyHandler)),
				new DomainMemberInfo(typeof(Asset), "IsSuppliedToTool", Asset.IsSuppliedToToolDomainPropertyId, typeof(Asset.IsSuppliedToToolPropertyHandler)),
				new DomainMemberInfo(typeof(NamedElementSchema), "Name", NamedElementSchema.NameDomainPropertyId, typeof(NamedElementSchema.NamePropertyHandler)),
				new DomainMemberInfo(typeof(NamedElementSchema), "BaseId", NamedElementSchema.BaseIdDomainPropertyId, typeof(NamedElementSchema.BaseIdPropertyHandler)),
				new DomainMemberInfo(typeof(NamedElementSchema), "DisplayName", NamedElementSchema.DisplayNameDomainPropertyId, typeof(NamedElementSchema.DisplayNamePropertyHandler)),
				new DomainMemberInfo(typeof(NamedElementSchema), "IsDisplayNameTracking", NamedElementSchema.IsDisplayNameTrackingDomainPropertyId, typeof(NamedElementSchema.IsDisplayNameTrackingPropertyHandler)),
				new DomainMemberInfo(typeof(NamedElementSchema), "Description", NamedElementSchema.DescriptionDomainPropertyId, typeof(NamedElementSchema.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(NamedElementSchema), "IsInheritedFromBase", NamedElementSchema.IsInheritedFromBaseDomainPropertyId, typeof(NamedElementSchema.IsInheritedFromBasePropertyHandler)),
				new DomainMemberInfo(typeof(DesignElement), "DesignNotes", DesignElement.DesignNotesDomainPropertyId, typeof(DesignElement.DesignNotesPropertyHandler)),
				new DomainMemberInfo(typeof(DesignElement), "IsIgnored", DesignElement.IsIgnoredDomainPropertyId, typeof(DesignElement.IsIgnoredPropertyHandler)),
				new DomainMemberInfo(typeof(WorkflowDesignDiagram), "AuthoringGradientColor", WorkflowDesignDiagram.AuthoringGradientColorDomainPropertyId, typeof(WorkflowDesignDiagram.AuthoringGradientColorPropertyHandler)),
				new DomainMemberInfo(typeof(WorkflowDesignDiagram), "AuthoringBackgroundColor", WorkflowDesignDiagram.AuthoringBackgroundColorDomainPropertyId, typeof(WorkflowDesignDiagram.AuthoringBackgroundColorPropertyHandler)),
				new DomainMemberInfo(typeof(WorkflowDesignDiagram), "AuthoringTitleTextColor", WorkflowDesignDiagram.AuthoringTitleTextColorDomainPropertyId, typeof(WorkflowDesignDiagram.AuthoringTitleTextColorPropertyHandler)),
				new DomainMemberInfo(typeof(WorkflowDesignDiagram), "TailoringGradientColor", WorkflowDesignDiagram.TailoringGradientColorDomainPropertyId, typeof(WorkflowDesignDiagram.TailoringGradientColorPropertyHandler)),
				new DomainMemberInfo(typeof(WorkflowDesignDiagram), "TailoringBackgroundColor", WorkflowDesignDiagram.TailoringBackgroundColorDomainPropertyId, typeof(WorkflowDesignDiagram.TailoringBackgroundColorPropertyHandler)),
				new DomainMemberInfo(typeof(WorkflowDesignDiagram), "TailoringTitleTextColor", WorkflowDesignDiagram.TailoringTitleTextColorDomainPropertyId, typeof(WorkflowDesignDiagram.TailoringTitleTextColorPropertyHandler)),
				new DomainMemberInfo(typeof(ProducedAssetShape), "IsFinalColor", ProducedAssetShape.IsFinalColorDomainPropertyId, typeof(ProducedAssetShape.IsFinalColorPropertyHandler)),
				new DomainMemberInfo(typeof(ProducedAssetShape), "IsIntermediateColor", ProducedAssetShape.IsIntermediateColorDomainPropertyId, typeof(ProducedAssetShape.IsIntermediateColorPropertyHandler)),
				new DomainMemberInfo(typeof(SuppliedAssetShape), "IsUserSuppliedColor", SuppliedAssetShape.IsUserSuppliedColorDomainPropertyId, typeof(SuppliedAssetShape.IsUserSuppliedColorPropertyHandler)),
				new DomainMemberInfo(typeof(SuppliedAssetShape), "IsMaterialColor", SuppliedAssetShape.IsMaterialColorDomainPropertyId, typeof(SuppliedAssetShape.IsMaterialColorPropertyHandler)),
				new DomainMemberInfo(typeof(SuppliedAssetShape), "IsUserSuppliedStereotypeText", SuppliedAssetShape.IsUserSuppliedStereotypeTextDomainPropertyId, typeof(SuppliedAssetShape.IsUserSuppliedStereotypeTextPropertyHandler)),
				new DomainMemberInfo(typeof(SuppliedAssetShape), "IsMaterialStereotypeText", SuppliedAssetShape.IsMaterialStereotypeTextDomainPropertyId, typeof(SuppliedAssetShape.IsMaterialStereotypeTextPropertyHandler)),
				new DomainMemberInfo(typeof(SuppliedAssetShape), "StereotypeText", SuppliedAssetShape.StereotypeTextDomainPropertyId, typeof(SuppliedAssetShape.StereotypeTextPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ProductionToolReferencesVariabilityRequirements), "ProductionTool", ProductionToolReferencesVariabilityRequirements.ProductionToolDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductionToolReferencesVariabilityRequirements), "VariabilityRequirement", ProductionToolReferencesVariabilityRequirements.VariabilityRequirementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductionToolProducesProducedAssets), "ProductionTool", ProductionToolProducesProducedAssets.ProductionToolDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductionToolProducesProducedAssets), "ProducedAsset", ProductionToolProducesProducedAssets.ProducedAssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProducedAssetSuppliesProductionTools), "ProducedAsset", ProducedAssetSuppliesProductionTools.ProducedAssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProducedAssetSuppliesProductionTools), "ProductionTool", ProducedAssetSuppliesProductionTools.ProductionToolDomainRoleId),
				new DomainRolePlayerInfo(typeof(SuppliedAssetCopiesToProducedAssets), "SuppliedAsset", SuppliedAssetCopiesToProducedAssets.SuppliedAssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(SuppliedAssetCopiesToProducedAssets), "ProducedAsset", SuppliedAssetCopiesToProducedAssets.ProducedAssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(SuppliedAssetSuppliesProductionTools), "SuppliedAsset", SuppliedAssetSuppliesProductionTools.SuppliedAssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(SuppliedAssetSuppliesProductionTools), "ProductionTool", SuppliedAssetSuppliesProductionTools.ProductionToolDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssetSuppliesAllProducingTools), "Asset", AssetSuppliesAllProducingTools.AssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(AssetSuppliesAllProducingTools), "ProductionTool", AssetSuppliesAllProducingTools.ProductionToolDomainRoleId),
				new DomainRolePlayerInfo(typeof(DesignHasProductionTools), "Design", DesignHasProductionTools.DesignDomainRoleId),
				new DomainRolePlayerInfo(typeof(DesignHasProductionTools), "ProductionTool", DesignHasProductionTools.ProductionToolDomainRoleId),
				new DomainRolePlayerInfo(typeof(DesignHasAssets), "Design", DesignHasAssets.DesignDomainRoleId),
				new DomainRolePlayerInfo(typeof(DesignHasAssets), "Asset", DesignHasAssets.AssetDomainRoleId),
				new DomainRolePlayerInfo(typeof(DesignHasVariabilityRequirements), "Design", DesignHasVariabilityRequirements.DesignDomainRoleId),
				new DomainRolePlayerInfo(typeof(DesignHasVariabilityRequirements), "VariabilityRequirement", DesignHasVariabilityRequirements.VariabilityRequirementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ParentVariabilityRequirementHasParentVariabilityRequirements), "SourceVariabilityRequirement", ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ParentVariabilityRequirementHasParentVariabilityRequirements), "TargetVariabilityRequirement", ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirementDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(16);
				createElementMap.Add(typeof(VariabilityRequirement), 0);
				createElementMap.Add(typeof(ProducedAsset), 1);
				createElementMap.Add(typeof(ProductionTool), 2);
				createElementMap.Add(typeof(SuppliedAsset), 3);
				createElementMap.Add(typeof(Design), 4);
				createElementMap.Add(typeof(WorkflowDesignDiagram), 5);
				createElementMap.Add(typeof(ToolInputConnector), 6);
				createElementMap.Add(typeof(ToolOutputConnector), 7);
				createElementMap.Add(typeof(ToolCopyConnector), 8);
				createElementMap.Add(typeof(ProductionToolShape), 9);
				createElementMap.Add(typeof(ProducedAssetShape), 10);
				createElementMap.Add(typeof(SuppliedAssetShape), 11);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new VariabilityRequirement(partition, propertyAssignments);
				case 1: return new ProducedAsset(partition, propertyAssignments);
				case 2: return new ProductionTool(partition, propertyAssignments);
				case 3: return new SuppliedAsset(partition, propertyAssignments);
				case 4: return new Design(partition, propertyAssignments);
				case 5: return new WorkflowDesignDiagram(partition, propertyAssignments);
				case 6: return new ToolInputConnector(partition, propertyAssignments);
				case 7: return new ToolOutputConnector(partition, propertyAssignments);
				case 8: return new ToolCopyConnector(partition, propertyAssignments);
				case 9: return new ProductionToolShape(partition, propertyAssignments);
				case 10: return new ProducedAssetShape(partition, propertyAssignments);
				case 11: return new SuppliedAssetShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(10);
				createElementLinkMap.Add(typeof(ProductionToolReferencesVariabilityRequirements), 0);
				createElementLinkMap.Add(typeof(ProductionToolProducesProducedAssets), 1);
				createElementLinkMap.Add(typeof(ProducedAssetSuppliesProductionTools), 2);
				createElementLinkMap.Add(typeof(SuppliedAssetCopiesToProducedAssets), 3);
				createElementLinkMap.Add(typeof(SuppliedAssetSuppliesProductionTools), 4);
				createElementLinkMap.Add(typeof(DesignHasProductionTools), 5);
				createElementLinkMap.Add(typeof(DesignHasAssets), 6);
				createElementLinkMap.Add(typeof(DesignHasVariabilityRequirements), 7);
				createElementLinkMap.Add(typeof(ParentVariabilityRequirementHasParentVariabilityRequirements), 8);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ProductionToolReferencesVariabilityRequirements(partition, roleAssignments, propertyAssignments);
				case 1: return new ProductionToolProducesProducedAssets(partition, roleAssignments, propertyAssignments);
				case 2: return new ProducedAssetSuppliesProductionTools(partition, roleAssignments, propertyAssignments);
				case 3: return new SuppliedAssetCopiesToProducedAssets(partition, roleAssignments, propertyAssignments);
				case 4: return new SuppliedAssetSuppliesProductionTools(partition, roleAssignments, propertyAssignments);
				case 5: return new DesignHasProductionTools(partition, roleAssignments, propertyAssignments);
				case 6: return new DesignHasAssets(partition, roleAssignments, propertyAssignments);
				case 7: return new DesignHasVariabilityRequirements(partition, roleAssignments, propertyAssignments);
				case 8: return new ParentVariabilityRequirementHasParentVariabilityRequirements(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return WorkflowDesignDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (WorkflowDesignDomainModel.resourceManager == null)
				{
					WorkflowDesignDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(WorkflowDesignDomainModel).Assembly);
				}
				return WorkflowDesignDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return WorkflowDesignDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return WorkflowDesignDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (WorkflowDesignDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new WorkflowDesignCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					WorkflowDesignDomainModel.copyClosure = copyFilter;
				}
				return WorkflowDesignDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (WorkflowDesignDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new WorkflowDesignDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					WorkflowDesignDomainModel.removeClosure = removeFilter;
				}
				return WorkflowDesignDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::NuPattern.Authoring.WorkflowDesign.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::NuPattern.Authoring.WorkflowDesign.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::NuPattern.Authoring.WorkflowDesign.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::NuPattern.Authoring.WorkflowDesign.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	internal partial class WorkflowDesignDeleteClosure : WorkflowDesignDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkflowDesignDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	internal partial class WorkflowDesignDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkflowDesignDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionToolDomainRoleId, true);
			DomainRoles.Add(global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets.AssetDomainRoleId, true);
			DomainRoles.Add(global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirementDomainRoleId, true);
			DomainRoles.Add(global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirementDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	internal partial class WorkflowDesignCopyClosure : WorkflowDesignCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkflowDesignCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	internal partial class WorkflowDesignCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public WorkflowDesignCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

