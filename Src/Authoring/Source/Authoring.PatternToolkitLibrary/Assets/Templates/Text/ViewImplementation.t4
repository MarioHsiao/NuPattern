<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True"#>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ output extension=".gen.cs" #>
<#@ Assembly Name="Microsoft.VisualStudio.Modeling.Sdk.Diagrams.11.0, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" #>
<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.dll" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Schema.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Assembly Name="NuPattern.Authoring.PatternToolkit.Automation.dll" #>
<#@ Assembly Name="System.ComponentModel.Composition" #>
<#@ Import Namespace="Microsoft.VisualStudio.Modeling" #>
<#@ Import Namespace="NuPattern" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.CodeGen" #>
<#@ Import Namespace="NuPattern.Runtime.Schema" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Import Namespace="NuPattern.Authoring.PatternToolkitLibrary" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.ComponentModel" #>
<#@ Import Namespace="System.Reflection" #>
<#@ Include File="Constants.t4" #>
<#@ Include File="Helpers.t4include" #>
<#@ Include File="Header.t4include" #>
<#@ Include File="NamedElementParent.t4include" #>
<#@ Include File="ElementContainer.t4include" #>
<#
var library = this.Element.As<IPatternToolkitLibrary>();
var developmentView = this.Element.Parent.Parent.As<NuPattern.Authoring.PatternToolkit.IDevelopment>();
var toolkitInfo = developmentView.PatternToolkitInfo;

if (toolkitInfo == null)
    throw new Exception("ToolkitInfo element not found");

var patternModel = developmentView.PatternModel;
var patternModelInfo = LoadPatternModel(patternModel.ToolkitDefinitionFile);
var pattern = patternModelInfo.Pattern;
#>

<#
foreach (var view in pattern.Views)
{
    var codegen = new ViewCodeGeneration<IViewInfo, IView>(view);
    codegen.AddType(typeof(Action));
    codegen.AddType(typeof(System.ComponentModel.Composition.ImportingConstructorAttribute));
    codegen.AddType(typeof(System.Collections.Generic.IEnumerable<object>));
    codegen.AddType(typeof(NuPattern.Runtime.ToolkitInterface.ToolkitInterfaceLayer));
    codegen.EndInit();
#>
namespace <#=library.ToolkitProjectRootNamespace #>
{
<#GenerateUsings(codegen);#>

    <#GenerateToolkitCommentsAndAttributes(AttributeTargets.Class, library, toolkitInfo, view); #>
    internal partial class <#=view.CodeIdentifier#> : I<#=view.CodeIdentifier#>
    {
        private Runtime.IView target;
        private IContainerProxy<I<#=view.CodeIdentifier#>> proxy;

        /// <summary>
        /// For MEF.
        /// </summary>
        [ImportingConstructor]
        private <#=view.CodeIdentifier#>() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="<#=view.CodeIdentifier#>"/> class.
        /// </summary>
        public <#=view.CodeIdentifier#>(Runtime.IView target)
        {
            this.target = target;
            this.proxy = target.ProxyFor<I<#=view.CodeIdentifier#>>();
            OnCreated();
        }	

        partial void OnCreated();
<#GenerateParentProperty(view, false); #>

        /// <summary>
        /// Gets the generic <see cref="Runtime.IView"/> underlying element.
        /// </summary>
        public virtual Runtime.IView AsView()
        {
            return this.target;
        }

        /// <summary>
        /// Gets the generic underlying element as the given type if possible.
        /// </summary>
        public virtual TRuntimeInterface As<TRuntimeInterface>()
            where TRuntimeInterface : class
        {
            return this.target as TRuntimeInterface;
        }
<#
PushIndent("\t");
PushIndent("\t");

GenerateContainedElements(view, false);

PopIndent();
PopIndent();
#>

        /// <summary>
        /// Deletes this instance.
        /// </summary>
        public virtual void Delete()
        {
            this.target.Delete();
        }
    }
}

<#
}
#>
