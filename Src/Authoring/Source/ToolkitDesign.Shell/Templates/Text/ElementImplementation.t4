<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.dll" #>
<#@ Assembly Name="System.ComponentModel.Composition" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Runtime.Interfaces.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Authoring.Toolkit.Shell.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.Patterning.Extensibility.dll" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.ComponentModel" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Runtime" #>
<#@ Import Namespace="Microsoft.VisualStudio.Patterning.Extensibility" #>
<#@ Assembly Name="System.Data.Entity.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ Import Namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ Include File="Header.t4" #>
<#@ Include File="NamedElementParentImplementation.t4" #>
<#@ Include File="ElementContainerImplementation.t4" #>
<#@ Include File="ProductElementImplementation.t4" #>
<# 
var store = this.ProductLine.Store;

// The pluralizer in .NET 4.0 only supports English.
var pluralizer = PluralizationService.CreateService(new System.Globalization.CultureInfo("en-US"));

foreach (var element in store.DefaultPartition.ElementDirectory.AllElements.OfType<IElementInfo>())
{
    var codegen = new ProductCodeGeneration<IElementInfo, IElement>(element);
    codegen.AddType(typeof(Action));
    codegen.AddType(typeof(System.ComponentModel.Composition.ImportingConstructorAttribute));
    codegen.EndInit();
#>
namespace <#= RootNamespace #>
{
<# 
foreach (var ns in codegen.SafeImports)
{
#>
	using <#=ns #>;
<#
}
#>

	<#GenerateFactoryProxyAttributes(element); #>
	internal partial class <#=element.CodeIdentifier #> : I<#=element.CodeIdentifier #>
	{
		private IAbstractElement target;
		private IAbstractElementProxy<I<#=element.CodeIdentifier #>> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private <#=element.CodeIdentifier#>() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="<#=element.CodeIdentifier #>"/> class.
		/// </summary>
		public <#=element.CodeIdentifier #>(IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<I<#=element.CodeIdentifier #>>();
		}	

<#GenerateParentProperty(element); #>

		/// <summary>
		/// Gets the generic <see cref="IElement"/> underlying element.
		/// </summary>
		public IElement AsElement()
		{
			return this.As<IElement>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
<#GenerateProperties(codegen, element); #>
<#
PushIndent("\t");
PushIndent("\t");

GenerateContainedElements(pluralizer, element);

PopIndent();
PopIndent();
#>

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public void Delete()
		{
			this.target.Delete();
		}
	}
}

<#
}
#>