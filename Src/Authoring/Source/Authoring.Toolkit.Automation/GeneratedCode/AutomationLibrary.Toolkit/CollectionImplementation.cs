
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The commands defined in this library.
	///	</summary>
	[Description("The commands defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "184bf063-7339-4866-978c-964d9d995c32", ProxyType = typeof(Commands))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Commands : ICommands
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ICommands> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Commands() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Commands"/> class.
		/// </summary>
		public Commands(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ICommands>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ICommand"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ICommand> Command 
		{ 
			get { return proxy.GetElements(() => this.Command, element => new Command(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ICommand"/>  and adds it to the <see cref="Command"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ICommand CreateCommand(string name, Action<ICommand> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ICommand>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The conditions defined in this library.
	///	</summary>
	[Description("The conditions defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "2226c6bc-3e33-4570-8807-f68bbfbbffcd", ProxyType = typeof(Conditions))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Conditions : IConditions
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IConditions> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Conditions() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Conditions"/> class.
		/// </summary>
		public Conditions(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IConditions>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ICondition"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ICondition> Condition 
		{ 
			get { return proxy.GetElements(() => this.Condition, element => new Condition(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ICondition"/>  and adds it to the <see cref="Condition"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ICondition CreateCondition(string name, Action<ICondition> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ICondition>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The events defined in this library.
	///	</summary>
	[Description("The events defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "f0e386f0-bf6f-4560-978f-32396e30c4e5", ProxyType = typeof(Events))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Events : IEvents
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IEvents> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private Events() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="Events"/> class.
		/// </summary>
		public Events(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IEvents>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IEvent"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IEvent> Event 
		{ 
			get { return proxy.GetElements(() => this.Event, element => new Event(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IEvent"/>  and adds it to the <see cref="Event"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IEvent CreateEvent(string name, Action<IEvent> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IEvent>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The type converters defined in this library.
	///	</summary>
	[Description("The type converters defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "96227e6c-f4a5-421c-8f0a-e38763d86740", ProxyType = typeof(TypeConverters))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class TypeConverters : ITypeConverters
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ITypeConverters> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private TypeConverters() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="TypeConverters"/> class.
		/// </summary>
		public TypeConverters(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ITypeConverters>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IEnumTypeConverter"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IEnumTypeConverter> EnumTypeConverters 
		{ 
			get { return proxy.GetElements(() => this.EnumTypeConverters, element => new EnumTypeConverter(element)); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IDataTypeConverter"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IDataTypeConverter> DataTypeConverters 
		{ 
			get { return proxy.GetElements(() => this.DataTypeConverters, element => new DataTypeConverter(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IEnumTypeConverter"/>  and adds it to the <see cref="EnumTypeConverters"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IEnumTypeConverter CreateEnumTypeConverter(string name, Action<IEnumTypeConverter> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IEnumTypeConverter>(name, initializer, raiseInstantiateEvents);	
		}
		
		/// <summary>
		///	Creates a new <see cref="IDataTypeConverter"/>  and adds it to the <see cref="DataTypeConverters"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IDataTypeConverter CreateDataTypeConverter(string name, Action<IDataTypeConverter> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IDataTypeConverter>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The type editors defined in this library.
	///	</summary>
	[Description("The type editors defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "7fe79778-3880-4daf-a4e5-c401f131c5db", ProxyType = typeof(TypeEditors))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class TypeEditors : ITypeEditors
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<ITypeEditors> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private TypeEditors() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="TypeEditors"/> class.
		/// </summary>
		public TypeEditors(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ITypeEditors>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="ITypePickerEditor"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<ITypePickerEditor> TypePickerEditors 
		{ 
			get { return proxy.GetElements(() => this.TypePickerEditors, element => new TypePickerEditor(element)); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IUIEditor"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IUIEditor> UIEditors 
		{ 
			get { return proxy.GetElements(() => this.UIEditors, element => new UIEditor(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="ITypePickerEditor"/>  and adds it to the <see cref="TypePickerEditors"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ITypePickerEditor CreateTypePickerEditor(string name, Action<ITypePickerEditor> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<ITypePickerEditor>(name, initializer, raiseInstantiateEvents);	
		}
		
		/// <summary>
		///	Creates a new <see cref="IUIEditor"/>  and adds it to the <see cref="UIEditors"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IUIEditor CreateUIEditor(string name, Action<IUIEditor> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IUIEditor>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The validation rules defined in this library.
	///	</summary>
	[Description("The validation rules defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "c398e040-eb92-481a-a1a4-67d1eac1edff", ProxyType = typeof(ValidationRules))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ValidationRules : IValidationRules
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IValidationRules> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private ValidationRules() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="ValidationRules"/> class.
		/// </summary>
		public ValidationRules(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IValidationRules>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IElementValidationRule"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IElementValidationRule> ElementValidationRules 
		{ 
			get { return proxy.GetElements(() => this.ElementValidationRules, element => new ElementValidationRule(element)); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IPropertyValidationRule"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IPropertyValidationRule> PropertyValidationRules 
		{ 
			get { return proxy.GetElements(() => this.PropertyValidationRules, element => new PropertyValidationRule(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IElementValidationRule"/>  and adds it to the <see cref="ElementValidationRules"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IElementValidationRule CreateElementValidationRule(string name, Action<IElementValidationRule> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IElementValidationRule>(name, initializer, raiseInstantiateEvents);	
		}
		
		/// <summary>
		///	Creates a new <see cref="IPropertyValidationRule"/>  and adds it to the <see cref="PropertyValidationRules"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IPropertyValidationRule CreatePropertyValidationRule(string name, Action<IPropertyValidationRule> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IPropertyValidationRule>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The value providers defined in this library.
	///	</summary>
	[Description("The value providers defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "fa75b840-b733-4365-bcb0-5e513092f4dd", ProxyType = typeof(ValueProviders))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ValueProviders : IValueProviders
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IValueProviders> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private ValueProviders() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="ValueProviders"/> class.
		/// </summary>
		public ValueProviders(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IValueProviders>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IValueProvider"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IValueProvider> ValueProvider 
		{ 
			get { return proxy.GetElements(() => this.ValueProvider, element => new ValueProvider(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IValueProvider"/>  and adds it to the <see cref="ValueProvider"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IValueProvider CreateValueProvider(string name, Action<IValueProvider> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IValueProvider>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

namespace Microsoft.VisualStudio.Patterning.Authoring.Library
{
	using global::Microsoft.VisualStudio.Patterning.Runtime;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::Microsoft.VisualStudio.Patterning.Runtime;

	///	<summary>
	///	The value comparers defined in this library.
	///	</summary>
	[Description("The value comparers defined in this library.")]
	[ToolkitInterfaceProxy(ExtensionId ="080eb0ef-518d-4807-9b5c-aa32d0032e0b", DefinitionId = "18765960-f08b-4bd2-a0e5-fb547a182517", ProxyType = typeof(ValueComparers))]
	[System.CodeDom.Compiler.GeneratedCode("Pattern Toolkit Automation Library", "1.3.20.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ValueComparers : IValueComparers
	{
		private Runtime.IAbstractElement target;
		private Runtime.IAbstractElementProxy<IValueComparers> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private ValueComparers() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="ValueComparers"/> class.
		/// </summary>
		public ValueComparers(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IValueComparers>();
			OnCreated();
		}	

		partial void OnCreated();

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDevelopment Parent
		{ 
			get { return this.target.Parent.As<IDevelopment>(); }
		}

		/// <summary>
		/// Gets the generic <see cref="Runtime.ICollection"/> underlying element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public virtual TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}
		
		///	<summary>
		///	Notes for this element.
		///	</summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes 
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}
		
		///	<summary>
		///	The InTransaction.
		///	</summary>
		public virtual Boolean InTransaction 
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}
		
		///	<summary>
		///	The IsSerializing.
		///	</summary>
		public virtual Boolean IsSerializing 
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}
		
		///	<summary>
		///	The name of this element instance.
		///	</summary>
		[ParenthesizePropertyName(true)]
		[Description("The name of this element instance.")]
		public virtual String InstanceName 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}
		
		///	<summary>
		///	The order of this element relative to its siblings.
		///	</summary>
		[ReadOnly(true)]
		[Description("The order of this element relative to its siblings.")]
		public virtual Double InstanceOrder 
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}
		
		///	<summary>
		///	The references of this element.
		///	</summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References 
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}
		
		/// <summary>
		/// Gets all instances of <see cref="IElementOrderingComparer"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IElementOrderingComparer> ElementOrderingComparers 
		{ 
			get { return proxy.GetElements(() => this.ElementOrderingComparers, element => new ElementOrderingComparer(element)); }
		}
		
		/// <summary>
		///	Creates a new <see cref="IElementOrderingComparer"/>  and adds it to the <see cref="ElementOrderingComparers"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		///	</summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IElementOrderingComparer CreateElementOrderingComparer(string name, Action<IElementOrderingComparer> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IElementOrderingComparer>(name, initializer, raiseInstantiateEvents);	
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}
	}
}

