//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass VariabilityRequirement
	/// A requirement for a point of variability in the product line.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("19c7bdb0-d161-487c-bd32-38fb3f9bb023")]
	public partial class VariabilityRequirement : DesignElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// VariabilityRequirement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19c7bdb0, 0xd161, 0x487c, 0xbd, 0x32, 0x38, 0xfb, 0x3f, 0x9b, 0xb0, 0x23);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariabilityRequirement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VariabilityRequirement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsSatisfiedByProductionTool domain property code
		
		/// <summary>
		/// IsSatisfiedByProductionTool domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsSatisfiedByProductionToolDomainPropertyId = new global::System.Guid(0x0d2aea9a, 0x7e9f, 0x4ac3, 0x9a, 0x59, 0x53, 0xe0, 0x50, 0xa1, 0xa9, 0xb0);
		
		/// <summary>
		/// Gets or sets the value of IsSatisfiedByProductionTool domain property.
		/// Determines whether the requirement is satisfied by one or more tools in the
		/// design.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement/IsSatisfiedByProductionTool.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement/IsSatisfiedByProductionTool.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement/IsSatisfiedByProductionTool.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("0d2aea9a-7e9f-4ac3-9a59-53e050a1a9b0")]
		internal global::System.Boolean IsSatisfiedByProductionTool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsSatisfiedByProductionToolPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the VariabilityRequirement.IsSatisfiedByProductionTool domain property.
		/// </summary>
		internal sealed partial class IsSatisfiedByProductionToolPropertyHandler : DslModeling::CalculatedPropertyValueHandler<VariabilityRequirement, global::System.Boolean>
		{
			private IsSatisfiedByProductionToolPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the VariabilityRequirement.IsSatisfiedByProductionTool domain property value handler.
			/// </summary>
			public static readonly IsSatisfiedByProductionToolPropertyHandler Instance = new IsSatisfiedByProductionToolPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the VariabilityRequirement.IsSatisfiedByProductionTool domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsSatisfiedByProductionToolDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(VariabilityRequirement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsSatisfiedByProductionTool because its Kind is
				// set to Calculated. Please provide the GetIsSatisfiedByProductionToolValue()
				// method on the domain class.
				return element.GetIsSatisfiedByProductionToolValue();
			}
		
		}
		
		#endregion
		#region ProductionTools opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProductionTools.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.VariabilityRequirement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProductionTool> ProductionTools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.VariabilityRequirementDomainRoleId);
			}
		}
		#endregion
		#region Design opposite domain role accessor
		/// <summary>
		/// Gets or sets Design.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirement
		/// </summary>
		public virtual Design Design
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirementDomainRoleId) as Design;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirementDomainRoleId, value);
			}
		}
		#endregion
		#region VariabilityRequirements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of VariabilityRequirements.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirement
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<VariabilityRequirement> VariabilityRequirements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<VariabilityRequirement>, VariabilityRequirement>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirementDomainRoleId);
			}
		}
		#endregion
		#region ParentVariabilityRequirement opposite domain role accessor
		/// <summary>
		/// Gets or sets ParentVariabilityRequirement.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirement
		/// </summary>
		public virtual VariabilityRequirement ParentVariabilityRequirement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirementDomainRoleId) as VariabilityRequirement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirementDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement sourceVariabilityRequirement1 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement;
			if (sourceVariabilityRequirement1 != null)
			{
				// Create link for path ParentVariabilityRequirementHasParentVariabilityRequirements.VariabilityRequirements
				this.VariabilityRequirements.Add(sourceVariabilityRequirement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement sourceVariabilityRequirement1 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement;
			if (sourceVariabilityRequirement1 != null)
			{
				// Delete link for path ParentVariabilityRequirementHasParentVariabilityRequirements.VariabilityRequirements
				
				foreach (DslModeling::ElementLink link in global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.GetLinks((global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement)this, sourceVariabilityRequirement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirementDomainRoleId, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass ProducedAsset
	/// An asset that is produced by a production tool.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAsset.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAsset.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("82cf2129-d420-41dc-8b95-12a99a5d20c9")]
	public partial class ProducedAsset : Asset
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProducedAsset domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x82cf2129, 0xd420, 0x41dc, 0x8b, 0x95, 0x12, 0xa9, 0x9a, 0x5d, 0x20, 0xc9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProducedAsset(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProducedAsset(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsFinal domain property code
		
		/// <summary>
		/// IsFinal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsFinalDomainPropertyId = new global::System.Guid(0xbfe0dc2d, 0x98d8, 0x4de6, 0xa9, 0x01, 0x3b, 0xeb, 0xc6, 0xf2, 0xea, 0x7f);
		
		/// <summary>
		/// Storage for IsFinal
		/// </summary>
		private global::System.Boolean isFinalPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsFinal domain property.
		/// Whether the asset is part of the final delivered product.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAsset/IsFinal.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAsset/IsFinal.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAsset/IsFinal.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bfe0dc2d-98d8-4de6-a901-3bebc6f2ea7f")]
		public global::System.Boolean IsFinal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isFinalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsFinalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProducedAsset.IsFinal domain property.
		/// </summary>
		internal sealed partial class IsFinalPropertyHandler : DslModeling::DomainPropertyValueHandler<ProducedAsset, global::System.Boolean>
		{
			private IsFinalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProducedAsset.IsFinal domain property value handler.
			/// </summary>
			public static readonly IsFinalPropertyHandler Instance = new IsFinalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProducedAsset.IsFinal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsFinalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ProducedAsset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isFinalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProducedAsset element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isFinalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProducingProductionTools opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProducingProductionTools.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProducedAsset
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProductionTool> ProducingProductionTools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProducedAssetDomainRoleId);
			}
		}
		#endregion
		#region ProductionTools opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProductionTools.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAsset
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProductionTool> ProductionTools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAssetDomainRoleId);
			}
		}
		#endregion
		#region SuppliedAssets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SuppliedAssets.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.ProducedAsset
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SuppliedAsset> SuppliedAssets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SuppliedAsset>, SuppliedAsset>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.ProducedAssetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass ProductionTool
	/// A tool that is supplied assets that produces more assets.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("67726e9a-a7da-4c26-b642-b4065710cee0")]
	public partial class ProductionTool : DesignElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProductionTool domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x67726e9a, 0xa7da, 0x4c26, 0xb6, 0x42, 0xb4, 0x06, 0x57, 0x10, 0xce, 0xe0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProductionTool(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProductionTool(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Classification domain property code
		
		/// <summary>
		/// Classification domain property Id.
		/// </summary>
		public static readonly global::System.Guid ClassificationDomainPropertyId = new global::System.Guid(0x86433396, 0xf14f, 0x4697, 0x9a, 0x45, 0xf0, 0xf7, 0xc9, 0x52, 0x65, 0xae);
		
		/// <summary>
		/// Storage for Classification
		/// </summary>
		private global::System.String classificationPropertyStorage = "(undefined)";
		
		/// <summary>
		/// Gets or sets the value of Classification domain property.
		/// The intended classification of this tool, defining how it processes and produces
		/// its assets.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool/Classification.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool/Classification.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool/Classification.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("(undefined)")]
		[DslModeling::DomainObjectId("86433396-f14f-4697-9a45-f0f7c95265ae")]
		public global::System.String Classification
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return classificationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ClassificationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProductionTool.Classification domain property.
		/// </summary>
		internal sealed partial class ClassificationPropertyHandler : DslModeling::DomainPropertyValueHandler<ProductionTool, global::System.String>
		{
			private ClassificationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProductionTool.Classification domain property value handler.
			/// </summary>
			public static readonly ClassificationPropertyHandler Instance = new ClassificationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProductionTool.Classification domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ClassificationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProductionTool element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.classificationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProductionTool element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.classificationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsSatisfyingVariability domain property code
		
		/// <summary>
		/// IsSatisfyingVariability domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsSatisfyingVariabilityDomainPropertyId = new global::System.Guid(0x882ced98, 0xc760, 0x4937, 0xa9, 0x94, 0xb5, 0xd2, 0x29, 0xeb, 0x33, 0xe3);
		
		/// <summary>
		/// Gets or sets the value of IsSatisfyingVariability domain property.
		/// Whether the tool satisfies any variability requirements.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool/IsSatisfyingVariability.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool/IsSatisfyingVariability.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool/IsSatisfyingVariability.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("882ced98-c760-4937-a994-b5d229eb33e3")]
		internal global::System.Boolean IsSatisfyingVariability
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsSatisfyingVariabilityPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ProductionTool.IsSatisfyingVariability domain property.
		/// </summary>
		internal sealed partial class IsSatisfyingVariabilityPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ProductionTool, global::System.Boolean>
		{
			private IsSatisfyingVariabilityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProductionTool.IsSatisfyingVariability domain property value handler.
			/// </summary>
			public static readonly IsSatisfyingVariabilityPropertyHandler Instance = new IsSatisfyingVariabilityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProductionTool.IsSatisfyingVariability domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsSatisfyingVariabilityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ProductionTool element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsSatisfyingVariability because its Kind is
				// set to Calculated. Please provide the GetIsSatisfyingVariabilityValue()
				// method on the domain class.
				return element.GetIsSatisfyingVariabilityValue();
			}
		
		}
		
		#endregion
		#region VariabilityRequirements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of VariabilityRequirements.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionTool
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<VariabilityRequirement> VariabilityRequirements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<VariabilityRequirement>, VariabilityRequirement>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionToolDomainRoleId);
			}
		}
		#endregion
		#region ProducedProducedAssets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProducedProducedAssets.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionTool
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProducedAsset> ProducedProducedAssets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProducedAsset>, ProducedAsset>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionToolDomainRoleId);
			}
		}
		#endregion
		#region SuppliedProducedAssets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SuppliedProducedAssets.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProductionTool
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProducedAsset> SuppliedProducedAssets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProducedAsset>, ProducedAsset>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProductionToolDomainRoleId);
			}
		}
		#endregion
		#region SuppliedSuppliedAssets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SuppliedSuppliedAssets.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.ProductionTool
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SuppliedAsset> SuppliedSuppliedAssets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SuppliedAsset>, SuppliedAsset>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.ProductionToolDomainRoleId);
			}
		}
		#endregion
		#region AllSuppliedAssets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AllSuppliedAssets.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.ComponentModel.AssetSuppliesAllProducingTools.ProductionTool
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<Asset> AllSuppliedAssets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<Asset>, Asset>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.ProductionToolDomainRoleId);
			}
		}
		#endregion
		#region Design opposite domain role accessor
		/// <summary>
		/// Gets or sets Design.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionTool
		/// </summary>
		public virtual Design Design
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionToolDomainRoleId) as Design;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionToolDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass SuppliedAsset
	/// An asset that is supplied to a production tool.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAsset.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAsset.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a395e79e-1a6d-4132-9724-671c4413ddab")]
	public partial class SuppliedAsset : Asset
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SuppliedAsset domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa395e79e, 0x1a6d, 0x4132, 0x97, 0x24, 0x67, 0x1c, 0x44, 0x13, 0xdd, 0xab);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SuppliedAsset(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SuppliedAsset(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsUserSupplied domain property code
		
		/// <summary>
		/// IsUserSupplied domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUserSuppliedDomainPropertyId = new global::System.Guid(0xcb4d8e7b, 0xc39a, 0x4096, 0xa1, 0xc3, 0xb5, 0xf8, 0xb7, 0xbe, 0x67, 0x65);
		
		/// <summary>
		/// Storage for IsUserSupplied
		/// </summary>
		private global::System.Boolean isUserSuppliedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsUserSupplied domain property.
		/// Whether this asset is supplied by the user as configuration to the product, or a
		/// supplied artifact as input to the product line.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAsset/IsUserSupplied.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAsset/IsUserSupplied.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAsset/IsUserSupplied.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cb4d8e7b-c39a-4096-a1c3-b5f8b7be6765")]
		public global::System.Boolean IsUserSupplied
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUserSuppliedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUserSuppliedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SuppliedAsset.IsUserSupplied domain property.
		/// </summary>
		internal sealed partial class IsUserSuppliedPropertyHandler : DslModeling::DomainPropertyValueHandler<SuppliedAsset, global::System.Boolean>
		{
			private IsUserSuppliedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SuppliedAsset.IsUserSupplied domain property value handler.
			/// </summary>
			public static readonly IsUserSuppliedPropertyHandler Instance = new IsUserSuppliedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SuppliedAsset.IsUserSupplied domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUserSuppliedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(SuppliedAsset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isUserSuppliedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SuppliedAsset element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUserSuppliedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProducedAssets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProducedAssets.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAsset
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProducedAsset> ProducedAssets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProducedAsset>, ProducedAsset>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAssetDomainRoleId);
			}
		}
		#endregion
		#region ProductionTools opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProductionTools.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAsset
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProductionTool> ProductionTools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAssetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass Asset
	/// A supplied or fabricated asset in the product line.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("245abfec-9096-464a-a73b-358748042100")]
	public abstract partial class Asset : DesignElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Asset domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x245abfec, 0x9096, 0x464a, 0xa7, 0x3b, 0x35, 0x87, 0x48, 0x04, 0x21, 0x00);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Asset(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SourceReference domain property code
		
		/// <summary>
		/// SourceReference domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceReferenceDomainPropertyId = new global::System.Guid(0x22610cd1, 0x2a38, 0x467c, 0x83, 0x95, 0xcc, 0xbe, 0x6f, 0x01, 0xd8, 0x3e);
		
		/// <summary>
		/// Storage for SourceReference
		/// </summary>
		private global::System.String sourceReferencePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceReference domain property.
		/// A reference to a known physical artifact that is represented by this asset.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset/SourceReference.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset/SourceReference.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset/SourceReference.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("22610cd1-2a38-467c-8395-ccbe6f01d83e")]
		public global::System.String SourceReference
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceReferencePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceReferencePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Asset.SourceReference domain property.
		/// </summary>
		internal sealed partial class SourceReferencePropertyHandler : DslModeling::DomainPropertyValueHandler<Asset, global::System.String>
		{
			private SourceReferencePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Asset.SourceReference domain property value handler.
			/// </summary>
			public static readonly SourceReferencePropertyHandler Instance = new SourceReferencePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Asset.SourceReference domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceReferenceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Asset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceReferencePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Asset element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceReferencePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsSuppliedToTool domain property code
		
		/// <summary>
		/// IsSuppliedToTool domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsSuppliedToToolDomainPropertyId = new global::System.Guid(0x24632330, 0xdbd9, 0x48f7, 0x85, 0x35, 0x23, 0x0e, 0x3f, 0xaa, 0xfe, 0xad);
		
		/// <summary>
		/// Gets or sets the value of IsSuppliedToTool domain property.
		/// Whether the asset is used as an input to a tool.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset/IsSuppliedToTool.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset/IsSuppliedToTool.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset/IsSuppliedToTool.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("24632330-dbd9-48f7-8535-230e3faafead")]
		internal global::System.Boolean IsSuppliedToTool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsSuppliedToToolPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Asset.IsSuppliedToTool domain property.
		/// </summary>
		internal sealed partial class IsSuppliedToToolPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Asset, global::System.Boolean>
		{
			private IsSuppliedToToolPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Asset.IsSuppliedToTool domain property value handler.
			/// </summary>
			public static readonly IsSuppliedToToolPropertyHandler Instance = new IsSuppliedToToolPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Asset.IsSuppliedToTool domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsSuppliedToToolDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Asset element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsSuppliedToTool because its Kind is
				// set to Calculated. Please provide the GetIsSuppliedToToolValue()
				// method on the domain class.
				return element.GetIsSuppliedToToolValue();
			}
		
		}
		
		#endregion
		#region AllProducingTools opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AllProducingTools.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.Asset
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ProductionTool> AllProducingTools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ProductionTool>, ProductionTool>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.AssetDomainRoleId);
			}
		}
		#endregion
		#region Design opposite domain role accessor
		/// <summary>
		/// Gets or sets Design.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.Asset
		/// </summary>
		public virtual Design Design
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.AssetDomainRoleId) as Design;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.AssetDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass Design
	/// A production line design.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Design.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Design.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fedd3e36-d9ec-4f70-85b9-16728700f201")]
	public partial class Design : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Design domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfedd3e36, 0xd9ec, 0x4f70, 0x85, 0xb9, 0x16, 0x72, 0x87, 0x00, 0xf2, 0x01);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Design(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Design(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ProductionTools opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProductionTools.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.Design
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProductionTool> ProductionTools
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.DesignDomainRoleId);
			}
		}
		#endregion
		#region Assets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Assets.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.Design
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Asset> Assets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.DesignDomainRoleId);
			}
		}
		#endregion
		#region VariabilityRequirements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of VariabilityRequirements.
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.Design
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<VariabilityRequirement> VariabilityRequirements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<VariabilityRequirement>, VariabilityRequirement>(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.DesignDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool sourceProductionTool1 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool;
			if (sourceProductionTool1 != null)
			{
				// Create link for path DesignHasProductionTools.ProductionTools
				this.ProductionTools.Add(sourceProductionTool1);

				return;
			}
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset sourceAsset2 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset;
			if (sourceAsset2 != null)
			{
				// Create link for path DesignHasAssets.Assets
				this.Assets.Add(sourceAsset2);

				return;
			}
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement sourceVariabilityRequirement3 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement;
			if (sourceVariabilityRequirement3 != null)
			{
				// Create link for path DesignHasVariabilityRequirements.VariabilityRequirements
				this.VariabilityRequirements.Add(sourceVariabilityRequirement3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool sourceProductionTool1 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionTool;
			if (sourceProductionTool1 != null)
			{
				// Delete link for path DesignHasProductionTools.ProductionTools
				
				foreach (DslModeling::ElementLink link in global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.GetLinks((global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Design)this, sourceProductionTool1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.DesignDomainRoleId, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionToolDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset sourceAsset2 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Asset;
			if (sourceAsset2 != null)
			{
				// Delete link for path DesignHasAssets.Assets
				
				foreach (DslModeling::ElementLink link in global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.GetLinks((global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Design)this, sourceAsset2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.DesignDomainRoleId, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.AssetDomainRoleId);
				}

				return;
			}
				
			global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement sourceVariabilityRequirement3 = sourceElement as global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.VariabilityRequirement;
			if (sourceVariabilityRequirement3 != null)
			{
				// Delete link for path DesignHasVariabilityRequirements.VariabilityRequirements
				
				foreach (DslModeling::ElementLink link in global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.GetLinks((global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Design)this, sourceVariabilityRequirement3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.DesignDomainRoleId, global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass NamedElementSchema
	/// An element that has a unique name.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("6665aba9-d5b1-4412-9757-e5172874d63b")]
	public abstract partial class NamedElementSchema : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElementSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6665aba9, 0xd5b1, 0x4412, 0x97, 0x57, 0xe5, 0x17, 0x28, 0x74, 0xd6, 0x3b);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElementSchema(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1264ecd0, 0xdb3c, 0x4300, 0xb1, 0x5e, 0x7c, 0xda, 0x16, 0x87, 0x4e, 0xa4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The well-known name of this item in this model.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/Name.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/Name.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/Name.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("1264ecd0-db3c-4300-b15e-7cda16874ea4")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElementSchema.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElementSchema.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElementSchema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BaseId domain property code
		
		/// <summary>
		/// BaseId domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseIdDomainPropertyId = new global::System.Guid(0xafaadae8, 0x6ae4, 0x43d6, 0xaf, 0xeb, 0x5f, 0xb3, 0x96, 0x8e, 0x78, 0xfe);
		
		/// <summary>
		/// Storage for BaseId
		/// </summary>
		private global::System.String baseIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseId domain property.
		/// The identifier of the inherited variability model.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/BaseId.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/BaseId.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("afaadae8-6ae4-43d6-afeb-5fb3968e78fe")]
		public global::System.String BaseId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return baseIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				BaseIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.BaseId domain property.
		/// </summary>
		internal sealed partial class BaseIdPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
			private BaseIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElementSchema.BaseId domain property value handler.
			/// </summary>
			public static readonly BaseIdPropertyHandler Instance = new BaseIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElementSchema.BaseId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElementSchema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.baseIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.baseIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayName domain property code
		
		/// <summary>
		/// DisplayName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayNameDomainPropertyId = new global::System.Guid(0x22a06ee5, 0x1b83, 0x40dd, 0x8c, 0x3a, 0x6b, 0x7d, 0xd9, 0xb2, 0x9a, 0x62);
		
		/// <summary>
		/// Gets or sets the value of DisplayName domain property.
		/// The name used for instances of this item, as seen by the user. Also used to name
		/// associated artifacts/configuration created for this item.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/DisplayName.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/DisplayName.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/DisplayName.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("22a06ee5-1b83-40dd-8c3a-6b7dd9b29a62")]
		public global::System.String DisplayName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DisplayNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.DisplayName domain property.
		/// </summary>
		internal sealed partial class DisplayNamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
			private DisplayNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElementSchema.DisplayName domain property value handler.
			/// </summary>
			public static readonly DisplayNamePropertyHandler Instance = new DisplayNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElementSchema.DisplayName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElementSchema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DisplayName because its Kind is
				// set to CustomStorage. Please provide the GetDisplayNameValue()
				// method on the domain class.
				return element.GetDisplayNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DisplayName because its Kind is
					// set to CustomStorage. Please provide the SetDisplayNameValue()
					// method on the domain class.
					element.SetDisplayNameValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsDisplayNameTracking domain property code
		
		/// <summary>
		/// IsDisplayNameTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDisplayNameTrackingDomainPropertyId = new global::System.Guid(0xc0d910ef, 0x7fd4, 0x4912, 0x90, 0x0f, 0x72, 0x90, 0x14, 0xf4, 0xaf, 0xd4);
		
		/// <summary>
		/// Storage for IsDisplayNameTracking
		/// </summary>
		private global::System.Boolean isDisplayNameTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDisplayNameTracking domain property.
		/// Used to track whether the user changed the display name manually.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/IsDisplayNameTracking.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/IsDisplayNameTracking.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("c0d910ef-7fd4-4912-900f-729014f4afd4")]
		internal global::System.Boolean IsDisplayNameTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDisplayNameTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				IsDisplayNameTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.IsDisplayNameTracking domain property.
		/// </summary>
		internal sealed partial class IsDisplayNameTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.Boolean>
		{
			private IsDisplayNameTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElementSchema.IsDisplayNameTracking domain property value handler.
			/// </summary>
			public static readonly IsDisplayNameTrackingPropertyHandler Instance = new IsDisplayNameTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElementSchema.IsDisplayNameTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDisplayNameTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NamedElementSchema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDisplayNameTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElementSchema element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDisplayNameTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x62c5e1fa, 0xd334, 0x4235, 0x97, 0x02, 0x0a, 0xf5, 0x8b, 0x7f, 0x07, 0xe6);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The description of this item displayed to the user.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/Description.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/Description.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/Description.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("62c5e1fa-d334-4235-9702-0af58b7f07e6")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElementSchema.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElementSchema.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElementSchema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsInheritedFromBase domain property code
		
		/// <summary>
		/// IsInheritedFromBase domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInheritedFromBaseDomainPropertyId = new global::System.Guid(0x3093952e, 0x10f2, 0x401d, 0xa1, 0xc8, 0x58, 0xb8, 0xb2, 0x63, 0xac, 0x3f);
		
		/// <summary>
		/// Gets or sets the value of IsInheritedFromBase domain property.
		/// Whether the element is derived from a base variability model definition.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/IsInheritedFromBase.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.NamedElementSchema/IsInheritedFromBase.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("3093952e-10f2-401d-a1c8-58b8b263ac3f")]
		public global::System.Boolean IsInheritedFromBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsInheritedFromBasePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.IsInheritedFromBase domain property.
		/// </summary>
		internal sealed partial class IsInheritedFromBasePropertyHandler : DslModeling::CalculatedPropertyValueHandler<NamedElementSchema, global::System.Boolean>
		{
			private IsInheritedFromBasePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElementSchema.IsInheritedFromBase domain property value handler.
			/// </summary>
			public static readonly IsInheritedFromBasePropertyHandler Instance = new IsInheritedFromBasePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElementSchema.IsInheritedFromBase domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsInheritedFromBaseDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(NamedElementSchema element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsInheritedFromBase because its Kind is
				// set to Calculated. Please provide the GetIsInheritedFromBaseValue()
				// method on the domain class.
				return element.GetIsInheritedFromBaseValue();
			}
		
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainClass DesignElement
	/// An element used for realization.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("865cf412-cfa1-4e9f-b6ec-bf02f69bea74")]
	public abstract partial class DesignElement : NamedElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DesignElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x865cf412, 0xcfa1, 0x4e9f, 0xb6, 0xec, 0xbf, 0x02, 0xf6, 0x9b, 0xea, 0x74);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DesignElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DesignNotes domain property code
		
		/// <summary>
		/// DesignNotes domain property Id.
		/// </summary>
		public static readonly global::System.Guid DesignNotesDomainPropertyId = new global::System.Guid(0x395aba29, 0x4372, 0x4244, 0x8b, 0x5f, 0xdf, 0x13, 0xca, 0xa4, 0x04, 0x32);
		
		/// <summary>
		/// Storage for DesignNotes
		/// </summary>
		private global::System.String designNotesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DesignNotes domain property.
		/// Design notes for this element.
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement/DesignNotes.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement/DesignNotes.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement/DesignNotes.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("395aba29-4372-4244-8b5f-df13caa40432")]
		public global::System.String DesignNotes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return designNotesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DesignNotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DesignElement.DesignNotes domain property.
		/// </summary>
		internal sealed partial class DesignNotesPropertyHandler : DslModeling::DomainPropertyValueHandler<DesignElement, global::System.String>
		{
			private DesignNotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DesignElement.DesignNotes domain property value handler.
			/// </summary>
			public static readonly DesignNotesPropertyHandler Instance = new DesignNotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DesignElement.DesignNotes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DesignNotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DesignElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.designNotesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DesignElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.designNotesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIgnored domain property code
		
		/// <summary>
		/// IsIgnored domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIgnoredDomainPropertyId = new global::System.Guid(0x3c5e96bf, 0xd2ae, 0x4b91, 0x9d, 0xf1, 0x00, 0xa4, 0xea, 0xd6, 0x00, 0x49);
		
		/// <summary>
		/// Storage for IsIgnored
		/// </summary>
		private global::System.Boolean isIgnoredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIgnored domain property.
		/// Whether to ignore this item. Ignored items will not be considered part of the
		/// current design.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement/IsIgnored.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement/IsIgnored.Category", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignElement/IsIgnored.Description", typeof(global::Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3c5e96bf-d2ae-4b91-9df1-00a4ead60049")]
		public global::System.Boolean IsIgnored
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIgnoredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIgnoredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DesignElement.IsIgnored domain property.
		/// </summary>
		internal sealed partial class IsIgnoredPropertyHandler : DslModeling::DomainPropertyValueHandler<DesignElement, global::System.Boolean>
		{
			private IsIgnoredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DesignElement.IsIgnored domain property value handler.
			/// </summary>
			public static readonly IsIgnoredPropertyHandler Instance = new IsIgnoredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DesignElement.IsIgnored domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIgnoredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DesignElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIgnoredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DesignElement element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIgnoredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
