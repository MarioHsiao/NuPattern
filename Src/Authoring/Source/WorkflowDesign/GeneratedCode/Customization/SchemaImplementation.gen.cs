
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.Interfaces;
using Microsoft.VisualStudio.Modeling.Extensibility;
using Microsoft.VisualStudio.Patterning.Extensibility;

namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// A requirement for a point of variability in the product line..
	/// </summary>
	public partial class VariabilityRequirement : INotifyPropertyChanged
	{ 
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IVariabilityRequirement.SubscribeChanged(Expression<Func<IVariabilityRequirement, object>> propertyExpression, Action<IVariabilityRequirement> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IVariabilityRequirementInfo.SubscribeChanged(Expression<Func<IVariabilityRequirementInfo, object>> propertyExpression, Action<IVariabilityRequirementInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
	}
	
	/// <summary>
	/// A requirement for a point of variability in the product line.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class VariabilityRequirement : IVariabilityRequirement, IVariabilityRequirementInfo
	{ 
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.VariabilityRequirement
		/// </summary>
		IEnumerable<IProductionTool> IVariabilityRequirement.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionTool>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.VariabilityRequirement
		///	
		/// </summary>
		IEnumerable<IProductionToolInfo> IVariabilityRequirementInfo.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionToolInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirement
		/// </summary>
		IDesign IVariabilityRequirement.Design
		{
			get { return this.Design; }
			set { this.Design = (Design)value; }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirement
		/// </summary>
		IDesignInfo IVariabilityRequirementInfo.Design
		{
			get { return this.Design; }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirement
		/// </summary>
		IEnumerable<IVariabilityRequirement> IVariabilityRequirement.VariabilityRequirements
		{
			get { return this.VariabilityRequirements.Cast<IVariabilityRequirement>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirement
		///	
		/// </summary>
		IEnumerable<IVariabilityRequirementInfo> IVariabilityRequirementInfo.VariabilityRequirements
		{
			get { return this.VariabilityRequirements.Cast<IVariabilityRequirementInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IVariabilityRequirement"/>.
		/// </summary>
		public IVariabilityRequirement CreateVariabilityRequirement()
		{
			return this.CreateVariabilityRequirement(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IVariabilityRequirement"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IVariabilityRequirement CreateVariabilityRequirement(Action<IVariabilityRequirement> initializer)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of VariabilityRequirement", this.IsSerializing()))
			{
				var instance = this.Create<VariabilityRequirement>();
				if (initializer != null)
				{
					initializer(instance);
				}
		
				tx.Commit();
				return instance;
			}
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IVariabilityRequirement"/>.
		/// </summary>
		public void DeleteVariabilityRequirement(IVariabilityRequirement instance)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting VariabilityRequirement instance", this.IsSerializing()))
			{
				var modelElement = instance as VariabilityRequirement;
				if (modelElement != null)
				{
					modelElement.Delete();
				}
		
				tx.Commit();
			}
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirement
		/// </summary>
		IVariabilityRequirement IVariabilityRequirement.ParentVariabilityRequirement
		{
			get { return this.ParentVariabilityRequirement; }
			set { this.ParentVariabilityRequirement = (VariabilityRequirement)value; }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirement
		/// </summary>
		IVariabilityRequirementInfo IVariabilityRequirementInfo.ParentVariabilityRequirement
		{
			get { return this.ParentVariabilityRequirement; }
		}
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// An asset that is produced by a production tool..
	/// </summary>
	public partial class ProducedAsset : INotifyPropertyChanged
	{ 
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IProducedAsset.SubscribeChanged(Expression<Func<IProducedAsset, object>> propertyExpression, Action<IProducedAsset> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IProducedAssetInfo.SubscribeChanged(Expression<Func<IProducedAssetInfo, object>> propertyExpression, Action<IProducedAssetInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
	}
	
	/// <summary>
	/// An asset that is produced by a production tool.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class ProducedAsset : IProducedAsset, IProducedAssetInfo
	{ 
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProducedAsset
		/// </summary>
		IEnumerable<IProductionTool> IProducedAsset.ProducingProductionTools
		{
			get { return this.ProducingProductionTools.Cast<IProductionTool>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProducedAsset
		///	
		/// </summary>
		IEnumerable<IProductionToolInfo> IProducedAssetInfo.ProducingProductionTools
		{
			get { return this.ProducingProductionTools.Cast<IProductionToolInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAsset
		/// </summary>
		IEnumerable<IProductionTool> IProducedAsset.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionTool>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAsset
		///	
		/// </summary>
		IEnumerable<IProductionToolInfo> IProducedAssetInfo.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionToolInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.ProducedAsset
		/// </summary>
		IEnumerable<ISuppliedAsset> IProducedAsset.SuppliedAssets
		{
			get { return this.SuppliedAssets.Cast<ISuppliedAsset>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.ProducedAsset
		///	
		/// </summary>
		IEnumerable<ISuppliedAssetInfo> IProducedAssetInfo.SuppliedAssets
		{
			get { return this.SuppliedAssets.Cast<ISuppliedAssetInfo>(); }
		}
		
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// A tool that is supplied assets that produces more assets..
	/// </summary>
	public partial class ProductionTool : INotifyPropertyChanged
	{ 
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IProductionTool.SubscribeChanged(Expression<Func<IProductionTool, object>> propertyExpression, Action<IProductionTool> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IProductionToolInfo.SubscribeChanged(Expression<Func<IProductionToolInfo, object>> propertyExpression, Action<IProductionToolInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
	}
	
	/// <summary>
	/// A tool that is supplied assets that produces more assets.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class ProductionTool : IProductionTool, IProductionToolInfo
	{ 
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionTool
		/// </summary>
		IEnumerable<IVariabilityRequirement> IProductionTool.VariabilityRequirements
		{
			get { return this.VariabilityRequirements.Cast<IVariabilityRequirement>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionTool
		///	
		/// </summary>
		IEnumerable<IVariabilityRequirementInfo> IProductionToolInfo.VariabilityRequirements
		{
			get { return this.VariabilityRequirements.Cast<IVariabilityRequirementInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionTool
		/// </summary>
		IEnumerable<IProducedAsset> IProductionTool.ProducedProducedAssets
		{
			get { return this.ProducedProducedAssets.Cast<IProducedAsset>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionTool
		///	
		/// </summary>
		IEnumerable<IProducedAssetInfo> IProductionToolInfo.ProducedProducedAssets
		{
			get { return this.ProducedProducedAssets.Cast<IProducedAssetInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProductionTool
		/// </summary>
		IEnumerable<IProducedAsset> IProductionTool.SuppliedProducedAssets
		{
			get { return this.SuppliedProducedAssets.Cast<IProducedAsset>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProductionTool
		///	
		/// </summary>
		IEnumerable<IProducedAssetInfo> IProductionToolInfo.SuppliedProducedAssets
		{
			get { return this.SuppliedProducedAssets.Cast<IProducedAssetInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.ProductionTool
		/// </summary>
		IEnumerable<ISuppliedAsset> IProductionTool.SuppliedSuppliedAssets
		{
			get { return this.SuppliedSuppliedAssets.Cast<ISuppliedAsset>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.ProductionTool
		///	
		/// </summary>
		IEnumerable<ISuppliedAssetInfo> IProductionToolInfo.SuppliedSuppliedAssets
		{
			get { return this.SuppliedSuppliedAssets.Cast<ISuppliedAssetInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.ComponentModel.AssetSuppliesAllProducingTools.ProductionTool
		/// </summary>
		IEnumerable<IAsset> IProductionTool.AllSuppliedAssets
		{
			get { return this.AllSuppliedAssets.Cast<IAsset>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.ComponentModel.AssetSuppliesAllProducingTools.ProductionTool
		///	
		/// </summary>
		IEnumerable<IAssetInfo> IProductionToolInfo.AllSuppliedAssets
		{
			get { return this.AllSuppliedAssets.Cast<IAssetInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionTool
		/// </summary>
		IDesign IProductionTool.Design
		{
			get { return this.Design; }
			set { this.Design = (Design)value; }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionTool
		/// </summary>
		IDesignInfo IProductionToolInfo.Design
		{
			get { return this.Design; }
		}
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// An asset that is supplied to a production tool..
	/// </summary>
	public partial class SuppliedAsset : INotifyPropertyChanged
	{ 
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable ISuppliedAsset.SubscribeChanged(Expression<Func<ISuppliedAsset, object>> propertyExpression, Action<ISuppliedAsset> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable ISuppliedAssetInfo.SubscribeChanged(Expression<Func<ISuppliedAssetInfo, object>> propertyExpression, Action<ISuppliedAssetInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
	}
	
	/// <summary>
	/// An asset that is supplied to a production tool.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class SuppliedAsset : ISuppliedAsset, ISuppliedAssetInfo
	{ 
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAsset
		/// </summary>
		IEnumerable<IProducedAsset> ISuppliedAsset.ProducedAssets
		{
			get { return this.ProducedAssets.Cast<IProducedAsset>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAsset
		///	
		/// </summary>
		IEnumerable<IProducedAssetInfo> ISuppliedAssetInfo.ProducedAssets
		{
			get { return this.ProducedAssets.Cast<IProducedAssetInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAsset
		/// </summary>
		IEnumerable<IProductionTool> ISuppliedAsset.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionTool>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAsset
		///	
		/// </summary>
		IEnumerable<IProductionToolInfo> ISuppliedAssetInfo.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionToolInfo>(); }
		}
		
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// A supplied or fabricated asset in the product line..
	/// </summary>
	public partial class Asset : INotifyPropertyChanged
	{ 
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IAsset.SubscribeChanged(Expression<Func<IAsset, object>> propertyExpression, Action<IAsset> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IAssetInfo.SubscribeChanged(Expression<Func<IAssetInfo, object>> propertyExpression, Action<IAssetInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
	}
	
	/// <summary>
	/// A supplied or fabricated asset in the product line.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class Asset : IAsset, IAssetInfo
	{ 
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.Asset
		/// </summary>
		IEnumerable<IProductionTool> IAsset.AllProducingTools
		{
			get { return this.AllProducingTools.Cast<IProductionTool>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.Asset
		///	
		/// </summary>
		IEnumerable<IProductionToolInfo> IAssetInfo.AllProducingTools
		{
			get { return this.AllProducingTools.Cast<IProductionToolInfo>(); }
		}
		
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.Asset
		/// </summary>
		IDesign IAsset.Design
		{
			get { return this.Design; }
			set { this.Design = (Design)value; }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.Asset
		/// </summary>
		IDesignInfo IAssetInfo.Design
		{
			get { return this.Design; }
		}
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// A production line design..
	/// </summary>
	public partial class Design : INotifyPropertyChanged
	{ 	private Microsoft.VisualStudio.Patterning.Runtime.PropertyChangeManager propertyChanges;
	
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IDesign.SubscribeChanged(Expression<Func<IDesign, object>> propertyExpression, Action<IDesign> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IDesignInfo.SubscribeChanged(Expression<Func<IDesignInfo, object>> propertyExpression, Action<IDesignInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
		/// <summary>
		/// Gets the manager for property change event subscriptions for this instance 
		///	and any of its derived classes.
		/// </summary>
		protected Microsoft.VisualStudio.Patterning.Runtime.PropertyChangeManager PropertyChanges
		{
			get
			{
				if (this.propertyChanges == null)
				{
					this.propertyChanges = new Microsoft.VisualStudio.Patterning.Runtime.PropertyChangeManager(this);
				}
	
				return this.propertyChanges;
			}
		}
	}
	
	/// <summary>
	/// A production line design.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class Design : IDesign, IDesignInfo
	{ 
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.Design
		/// </summary>
		IEnumerable<IProductionTool> IDesign.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionTool>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasProductionTools.Design
		///	
		/// </summary>
		IEnumerable<IProductionToolInfo> IDesignInfo.ProductionTools
		{
			get { return this.ProductionTools.Cast<IProductionToolInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IProductionTool"/>.
		/// </summary>
		public IProductionTool CreateProductionTool()
		{
			return this.CreateProductionTool(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IProductionTool"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IProductionTool CreateProductionTool(Action<IProductionTool> initializer)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ProductionTool", this.IsSerializing()))
			{
				var instance = this.Create<ProductionTool>();
				if (initializer != null)
				{
					initializer(instance);
				}
		
				tx.Commit();
				return instance;
			}
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IProductionTool"/>.
		/// </summary>
		public void DeleteProductionTool(IProductionTool instance)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ProductionTool instance", this.IsSerializing()))
			{
				var modelElement = instance as ProductionTool;
				if (modelElement != null)
				{
					modelElement.Delete();
				}
		
				tx.Commit();
			}
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.Design
		/// </summary>
		IEnumerable<IAsset> IDesign.Assets
		{
			get { return this.Assets.Cast<IAsset>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasAssets.Design
		///	
		/// </summary>
		IEnumerable<IAssetInfo> IDesignInfo.Assets
		{
			get { return this.Assets.Cast<IAssetInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IProducedAsset"/>.
		/// </summary>
		public IProducedAsset CreateProducedAsset()
		{
			return this.CreateProducedAsset(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IProducedAsset"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IProducedAsset CreateProducedAsset(Action<IProducedAsset> initializer)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ProducedAsset", this.IsSerializing()))
			{
				var instance = this.Create<ProducedAsset>();
				if (initializer != null)
				{
					initializer(instance);
				}
		
				tx.Commit();
				return instance;
			}
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IProducedAsset"/>.
		/// </summary>
		public void DeleteProducedAsset(IProducedAsset instance)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ProducedAsset instance", this.IsSerializing()))
			{
				var modelElement = instance as ProducedAsset;
				if (modelElement != null)
				{
					modelElement.Delete();
				}
		
				tx.Commit();
			}
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ISuppliedAsset"/>.
		/// </summary>
		public ISuppliedAsset CreateSuppliedAsset()
		{
			return this.CreateSuppliedAsset(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ISuppliedAsset"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public ISuppliedAsset CreateSuppliedAsset(Action<ISuppliedAsset> initializer)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of SuppliedAsset", this.IsSerializing()))
			{
				var instance = this.Create<SuppliedAsset>();
				if (initializer != null)
				{
					initializer(instance);
				}
		
				tx.Commit();
				return instance;
			}
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="ISuppliedAsset"/>.
		/// </summary>
		public void DeleteSuppliedAsset(ISuppliedAsset instance)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting SuppliedAsset instance", this.IsSerializing()))
			{
				var modelElement = instance as SuppliedAsset;
				if (modelElement != null)
				{
					modelElement.Delete();
				}
		
				tx.Commit();
			}
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.Design
		/// </summary>
		IEnumerable<IVariabilityRequirement> IDesign.VariabilityRequirements
		{
			get { return this.VariabilityRequirements.Cast<IVariabilityRequirement>(); }
		}
		
		/// <summary>
		/// Description for Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.Design
		///	
		/// </summary>
		IEnumerable<IVariabilityRequirementInfo> IDesignInfo.VariabilityRequirements
		{
			get { return this.VariabilityRequirements.Cast<IVariabilityRequirementInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IVariabilityRequirement"/>.
		/// </summary>
		public IVariabilityRequirement CreateVariabilityRequirement()
		{
			return this.CreateVariabilityRequirement(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IVariabilityRequirement"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IVariabilityRequirement CreateVariabilityRequirement(Action<IVariabilityRequirement> initializer)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of VariabilityRequirement", this.IsSerializing()))
			{
				var instance = this.Create<VariabilityRequirement>();
				if (initializer != null)
				{
					initializer(instance);
				}
		
				tx.Commit();
				return instance;
			}
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IVariabilityRequirement"/>.
		/// </summary>
		public void DeleteVariabilityRequirement(IVariabilityRequirement instance)
		{
			using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting VariabilityRequirement instance", this.IsSerializing()))
			{
				var modelElement = instance as VariabilityRequirement;
				if (modelElement != null)
				{
					modelElement.Delete();
				}
		
				tx.Commit();
			}
		}
	
		/// <summary>
		/// Gets the extensions.
		/// </summary>
		/// <typeparam name="TExtension">The type of the extension.</typeparam>	
		public IEnumerable<TExtension> GetExtensions<TExtension>()
		{
		 	return this.GetAllExtensions().OfType<TExtension>();
		}
	
		/// <summary>
		/// Gets a value indicating whether this instance is serializing.
		/// </summary>
		/// <value>
		/// <c>true</c> if this instance is serializing; otherwise, <c>false</c>.
		/// </value>
		protected bool IsSerializing()
		{
			return this.Store.TransactionManager.InTransaction &&
				this.Store.TransactionManager.CurrentTransaction.IsSerializing;
		}
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// An element that has a unique name..
	/// </summary>
	public partial class NamedElementSchema : INotifyPropertyChanged
	{ 	private Microsoft.VisualStudio.Patterning.Runtime.PropertyChangeManager propertyChanges;
	
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable INamedElementSchema.SubscribeChanged(Expression<Func<INamedElementSchema, object>> propertyExpression, Action<INamedElementSchema> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable INamedElementInfo.SubscribeChanged(Expression<Func<INamedElementInfo, object>> propertyExpression, Action<INamedElementInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
		/// <summary>
		/// Gets the manager for property change event subscriptions for this instance 
		///	and any of its derived classes.
		/// </summary>
		protected Microsoft.VisualStudio.Patterning.Runtime.PropertyChangeManager PropertyChanges
		{
			get
			{
				if (this.propertyChanges == null)
				{
					this.propertyChanges = new Microsoft.VisualStudio.Patterning.Runtime.PropertyChangeManager(this);
				}
	
				return this.propertyChanges;
			}
		}
	}
	
	/// <summary>
	/// An element that has a unique name.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class NamedElementSchema : INamedElementSchema, INamedElementInfo
	{ 
		/// <summary>
		/// Gets the extensions.
		/// </summary>
		/// <typeparam name="TExtension">The type of the extension.</typeparam>	
		public IEnumerable<TExtension> GetExtensions<TExtension>()
		{
		 	return this.GetAllExtensions().OfType<TExtension>();
		}
	
		/// <summary>
		/// Gets a value indicating whether this instance is serializing.
		/// </summary>
		/// <value>
		/// <c>true</c> if this instance is serializing; otherwise, <c>false</c>.
		/// </value>
		protected bool IsSerializing()
		{
			return this.Store.TransactionManager.InTransaction &&
				this.Store.TransactionManager.CurrentTransaction.IsSerializing;
		}
	}
}
namespace Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign
{
	/// <summary>
	/// An element used for realization..
	/// </summary>
	public partial class DesignElement : INotifyPropertyChanged
	{ 
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IDesignElement.SubscribeChanged(Expression<Func<IDesignElement, object>> propertyExpression, Action<IDesignElement> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable IDesignElementInfo.SubscribeChanged(Expression<Func<IDesignElementInfo, object>> propertyExpression, Action<IDesignElementInfo> callbackAction)
		{
			return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
		}
	
		/// <summary>
		/// Exposes the property changed event.
		/// </summary>
		event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
		{
			add { this.PropertyChanges.AddHandler(value); }
			remove { this.PropertyChanges.RemoveHandler(value); }
		}
	
	}
	
	/// <summary>
	/// An element used for realization.
	/// </summary>
	[GeneratedCode("Microsoft.VisualStudio.Patterning.Authoring.WorkflowDesign", "1.2.0.0")]
	public partial class DesignElement : IDesignElement, IDesignElementInfo
	{ }
}
