//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship ProductionToolReferencesVariabilityRequirements
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("91409b5f-6b3a-4a3d-a8b7-e347eccee8a6")]
	public partial class ProductionToolReferencesVariabilityRequirements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProductionToolReferencesVariabilityRequirements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x91409b5f, 0x6b3a, 0x4a3d, 0xa8, 0xb7, 0xe3, 0x47, 0xec, 0xce, 0xe8, 0xa6);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProductionToolReferencesVariabilityRequirements link in the same Partition as the given ProductionTool
		/// </summary>
		/// <param name="source">ProductionTool to use as the source of the relationship.</param>
		/// <param name="target">VariabilityRequirement to use as the target of the relationship.</param>
		public ProductionToolReferencesVariabilityRequirements(ProductionTool source, VariabilityRequirement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProductionToolReferencesVariabilityRequirements.ProductionToolDomainRoleId, source), new DslModeling::RoleAssignment(ProductionToolReferencesVariabilityRequirements.VariabilityRequirementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductionToolReferencesVariabilityRequirements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductionToolReferencesVariabilityRequirements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductionToolReferencesVariabilityRequirements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductionToolReferencesVariabilityRequirements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProductionTool domain role code
		
		/// <summary>
		/// ProductionTool domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductionToolDomainRoleId = new global::System.Guid(0x4c5bf749, 0x6e50, 0x4f84, 0x9f, 0x9a, 0xfd, 0x43, 0x29, 0xf1, 0xa2, 0xdc);
		
		/// <summary>
		/// DomainRole ProductionTool
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionTool
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements/ProductionTool.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements/ProductionTool.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VariabilityRequirements", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements/ProductionTool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4c5bf749-6e50-4f84-9f9a-fd4329f1a2dc")]
		public virtual ProductionTool ProductionTool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductionTool)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductionToolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductionToolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProductionTools of a VariabilityRequirement
		/// <summary>
		/// Gets a list of ProductionTools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProductionTool> GetProductionTools(VariabilityRequirement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(element, VariabilityRequirementDomainRoleId);
		}
		#endregion
		#region VariabilityRequirement domain role code
		
		/// <summary>
		/// VariabilityRequirement domain role Id.
		/// </summary>
		public static readonly global::System.Guid VariabilityRequirementDomainRoleId = new global::System.Guid(0xf42ef571, 0x400e, 0x416c, 0x8e, 0x44, 0x66, 0xa9, 0x2e, 0x1a, 0x0a, 0xfd);
		
		/// <summary>
		/// DomainRole VariabilityRequirement
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.VariabilityRequirement
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements/VariabilityRequirement.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements/VariabilityRequirement.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProductionTools", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements/VariabilityRequirement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f42ef571-400e-416c-8e44-66a92e1a0afd")]
		public virtual VariabilityRequirement VariabilityRequirement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VariabilityRequirement)DslModeling::DomainRoleInfo.GetRolePlayer(this, VariabilityRequirementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VariabilityRequirementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VariabilityRequirements of a ProductionTool
		/// <summary>
		/// Gets a list of VariabilityRequirements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<VariabilityRequirement> GetVariabilityRequirements(ProductionTool element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<VariabilityRequirement>, VariabilityRequirement>(element, ProductionToolDomainRoleId);
		}
		#endregion
		#region ProductionTool link accessor
		/// <summary>
		/// Get the list of ProductionToolReferencesVariabilityRequirements links to a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements> GetLinksToVariabilityRequirements ( global::NuPattern.Authoring.WorkflowDesign.ProductionTool productionToolInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements>(productionToolInstance, global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionToolDomainRoleId);
		}
		#endregion
		#region VariabilityRequirement link accessor
		/// <summary>
		/// Get the list of ProductionToolReferencesVariabilityRequirements links to a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements> GetLinksToProductionTools ( global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement variabilityRequirementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements>(variabilityRequirementInstance, global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.VariabilityRequirementDomainRoleId);
		}
		#endregion
		#region ProductionToolReferencesVariabilityRequirements instance accessors
		
		/// <summary>
		/// Get any ProductionToolReferencesVariabilityRequirements links between a given ProductionTool and a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements> GetLinks( global::NuPattern.Authoring.WorkflowDesign.ProductionTool source, global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements>(source, global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionToolDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements link in links )
			{
				if ( target.Equals(link.VariabilityRequirement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProductionToolReferencesVariabilityRequirements link between a given ProductionTooland a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements GetLink( global::NuPattern.Authoring.WorkflowDesign.ProductionTool source, global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements>(source, global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements.ProductionToolDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ProductionToolReferencesVariabilityRequirements link in links )
			{
				if ( target.Equals(link.VariabilityRequirement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship ProductionToolProducesProducedAssets
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4e0787f5-1b90-4962-af22-34b462ca1993")]
	public partial class ProductionToolProducesProducedAssets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProductionToolProducesProducedAssets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4e0787f5, 0x1b90, 0x4962, 0xaf, 0x22, 0x34, 0xb4, 0x62, 0xca, 0x19, 0x93);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProductionToolProducesProducedAssets link in the same Partition as the given ProductionTool
		/// </summary>
		/// <param name="source">ProductionTool to use as the source of the relationship.</param>
		/// <param name="target">ProducedAsset to use as the target of the relationship.</param>
		public ProductionToolProducesProducedAssets(ProductionTool source, ProducedAsset target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProductionToolProducesProducedAssets.ProductionToolDomainRoleId, source), new DslModeling::RoleAssignment(ProductionToolProducesProducedAssets.ProducedAssetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductionToolProducesProducedAssets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductionToolProducesProducedAssets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductionToolProducesProducedAssets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductionToolProducesProducedAssets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProductionTool domain role code
		
		/// <summary>
		/// ProductionTool domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductionToolDomainRoleId = new global::System.Guid(0xa410ff8e, 0xd1ac, 0x468f, 0x92, 0x7a, 0xa9, 0x7d, 0xbd, 0x2f, 0x98, 0x1c);
		
		/// <summary>
		/// DomainRole ProductionTool
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionTool
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets/ProductionTool.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets/ProductionTool.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProducedProducedAssets", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets/ProductionTool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a410ff8e-d1ac-468f-927a-a97dbd2f981c")]
		public virtual ProductionTool ProductionTool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductionTool)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductionToolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductionToolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProducingProductionTools of a ProducedAsset
		/// <summary>
		/// Gets a list of ProducingProductionTools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProductionTool> GetProducingProductionTools(ProducedAsset element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(element, ProducedAssetDomainRoleId);
		}
		#endregion
		#region ProducedAsset domain role code
		
		/// <summary>
		/// ProducedAsset domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProducedAssetDomainRoleId = new global::System.Guid(0xea75f6de, 0x6b2d, 0x4b7b, 0x9c, 0x5a, 0x08, 0x11, 0x04, 0xbf, 0x2f, 0xbd);
		
		/// <summary>
		/// DomainRole ProducedAsset
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProducedAsset
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets/ProducedAsset.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets/ProducedAsset.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProducingProductionTools", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets/ProducedAsset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ea75f6de-6b2d-4b7b-9c5a-081104bf2fbd")]
		public virtual ProducedAsset ProducedAsset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProducedAsset)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProducedAssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProducedAssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProducedProducedAssets of a ProductionTool
		/// <summary>
		/// Gets a list of ProducedProducedAssets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProducedAsset> GetProducedProducedAssets(ProductionTool element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProducedAsset>, ProducedAsset>(element, ProductionToolDomainRoleId);
		}
		#endregion
		#region ProductionTool link accessor
		/// <summary>
		/// Get the list of ProductionToolProducesProducedAssets links to a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets> GetLinksToProducedProducedAssets ( global::NuPattern.Authoring.WorkflowDesign.ProductionTool productionToolInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets>(productionToolInstance, global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionToolDomainRoleId);
		}
		#endregion
		#region ProducedAsset link accessor
		/// <summary>
		/// Get the list of ProductionToolProducesProducedAssets links to a ProducedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets> GetLinksToProducingProductionTools ( global::NuPattern.Authoring.WorkflowDesign.ProducedAsset producedAssetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets>(producedAssetInstance, global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProducedAssetDomainRoleId);
		}
		#endregion
		#region ProductionToolProducesProducedAssets instance accessors
		
		/// <summary>
		/// Get any ProductionToolProducesProducedAssets links between a given ProductionTool and a ProducedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets> GetLinks( global::NuPattern.Authoring.WorkflowDesign.ProductionTool source, global::NuPattern.Authoring.WorkflowDesign.ProducedAsset target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets>(source, global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionToolDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets link in links )
			{
				if ( target.Equals(link.ProducedAsset) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProductionToolProducesProducedAssets link between a given ProductionTooland a ProducedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets GetLink( global::NuPattern.Authoring.WorkflowDesign.ProductionTool source, global::NuPattern.Authoring.WorkflowDesign.ProducedAsset target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets>(source, global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets.ProductionToolDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ProductionToolProducesProducedAssets link in links )
			{
				if ( target.Equals(link.ProducedAsset) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship ProducedAssetSuppliesProductionTools
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b7c9e653-7d6f-4370-9ae1-d86964397b7d")]
	public partial class ProducedAssetSuppliesProductionTools : AssetSuppliesAllProducingTools
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProducedAssetSuppliesProductionTools domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb7c9e653, 0x7d6f, 0x4370, 0x9a, 0xe1, 0xd8, 0x69, 0x64, 0x39, 0x7b, 0x7d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProducedAssetSuppliesProductionTools link in the same Partition as the given ProducedAsset
		/// </summary>
		/// <param name="source">ProducedAsset to use as the source of the relationship.</param>
		/// <param name="target">ProductionTool to use as the target of the relationship.</param>
		public ProducedAssetSuppliesProductionTools(ProducedAsset source, ProductionTool target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProducedAssetSuppliesProductionTools.ProducedAssetDomainRoleId, source), new DslModeling::RoleAssignment(ProducedAssetSuppliesProductionTools.ProductionToolDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProducedAssetSuppliesProductionTools(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProducedAssetSuppliesProductionTools(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProducedAssetSuppliesProductionTools(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProducedAssetSuppliesProductionTools(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProducedAsset domain role code
		
		/// <summary>
		/// ProducedAsset domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProducedAssetDomainRoleId = new global::System.Guid(0x41648a11, 0xe24d, 0x4726, 0xa8, 0x02, 0x1e, 0x31, 0xe2, 0xe2, 0xd5, 0x26);
		
		/// <summary>
		/// DomainRole ProducedAsset
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAsset
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools/ProducedAsset.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools/ProducedAsset.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProductionTools", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools/ProducedAsset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("41648a11-e24d-4726-a802-1e31e2e2d526")]
		public virtual ProducedAsset ProducedAsset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProducedAsset)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProducedAssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProducedAssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuppliedProducedAssets of a ProductionTool
		/// <summary>
		/// Gets a list of SuppliedProducedAssets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProducedAsset> GetSuppliedProducedAssets(ProductionTool element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProducedAsset>, ProducedAsset>(element, ProductionToolDomainRoleId);
		}
		#endregion
		#region Asset domain role override
		
		/// <summary>
		/// Gets the element playing ProducedAsset domain role.
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.Asset
		/// </summary>
		public override Asset Asset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.ProducedAsset;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.ProducedAsset = (ProducedAsset)value;
			}
		}
		
		#endregion
		#region ProductionTool domain role code
		
		/// <summary>
		/// ProductionTool domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ProductionToolDomainRoleId = new global::System.Guid(0xc7d26b7c, 0x5f73, 0x404f, 0x9f, 0x97, 0xdb, 0xe3, 0xe9, 0x8b, 0xcf, 0x71);
		
		/// <summary>
		/// DomainRole ProductionTool
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProductionTool
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools/ProductionTool.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools/ProductionTool.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SuppliedProducedAssets", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools/ProductionTool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c7d26b7c-5f73-404f-9f97-dbe3e98bcf71")]
		public override ProductionTool ProductionTool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductionTool)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductionToolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductionToolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProductionTools of a ProducedAsset
		/// <summary>
		/// Gets a list of ProductionTools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProductionTool> GetProductionTools(ProducedAsset element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(element, ProducedAssetDomainRoleId);
		}
		#endregion
		#region ProducedAsset link accessor
		/// <summary>
		/// Get the list of ProducedAssetSuppliesProductionTools links to a ProducedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools> GetLinksToProductionTools ( global::NuPattern.Authoring.WorkflowDesign.ProducedAsset producedAssetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools>(producedAssetInstance, global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAssetDomainRoleId);
		}
		#endregion
		#region ProductionTool link accessor
		/// <summary>
		/// Get the list of ProducedAssetSuppliesProductionTools links to a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools> GetLinksToSuppliedProducedAssets ( global::NuPattern.Authoring.WorkflowDesign.ProductionTool productionToolInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools>(productionToolInstance, global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProductionToolDomainRoleId);
		}
		#endregion
		#region ProducedAssetSuppliesProductionTools instance accessors
		
		/// <summary>
		/// Get any ProducedAssetSuppliesProductionTools links between a given ProducedAsset and a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools> GetLinks( global::NuPattern.Authoring.WorkflowDesign.ProducedAsset source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools>(source, global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProducedAssetSuppliesProductionTools link between a given ProducedAssetand a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools GetLink( global::NuPattern.Authoring.WorkflowDesign.ProducedAsset source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools>(source, global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools.ProducedAssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ProducedAssetSuppliesProductionTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship SuppliedAssetCopiesToProducedAssets
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6103e751-0edc-4bde-9870-bcb0af30910b")]
	public partial class SuppliedAssetCopiesToProducedAssets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SuppliedAssetCopiesToProducedAssets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6103e751, 0x0edc, 0x4bde, 0x98, 0x70, 0xbc, 0xb0, 0xaf, 0x30, 0x91, 0x0b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SuppliedAssetCopiesToProducedAssets link in the same Partition as the given SuppliedAsset
		/// </summary>
		/// <param name="source">SuppliedAsset to use as the source of the relationship.</param>
		/// <param name="target">ProducedAsset to use as the target of the relationship.</param>
		public SuppliedAssetCopiesToProducedAssets(SuppliedAsset source, ProducedAsset target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SuppliedAssetCopiesToProducedAssets.SuppliedAssetDomainRoleId, source), new DslModeling::RoleAssignment(SuppliedAssetCopiesToProducedAssets.ProducedAssetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SuppliedAssetCopiesToProducedAssets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SuppliedAssetCopiesToProducedAssets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SuppliedAssetCopiesToProducedAssets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SuppliedAssetCopiesToProducedAssets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SuppliedAsset domain role code
		
		/// <summary>
		/// SuppliedAsset domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuppliedAssetDomainRoleId = new global::System.Guid(0xe16620b7, 0xaae0, 0x44a0, 0x9b, 0x84, 0xfc, 0xbc, 0x5a, 0x27, 0x5f, 0x2d);
		
		/// <summary>
		/// DomainRole SuppliedAsset
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAsset
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets/SuppliedAsset.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets/SuppliedAsset.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProducedAssets", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets/SuppliedAsset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e16620b7-aae0-44a0-9b84-fcbc5a275f2d")]
		public virtual SuppliedAsset SuppliedAsset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SuppliedAsset)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuppliedAssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuppliedAssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuppliedAssets of a ProducedAsset
		/// <summary>
		/// Gets a list of SuppliedAssets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SuppliedAsset> GetSuppliedAssets(ProducedAsset element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SuppliedAsset>, SuppliedAsset>(element, ProducedAssetDomainRoleId);
		}
		#endregion
		#region ProducedAsset domain role code
		
		/// <summary>
		/// ProducedAsset domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProducedAssetDomainRoleId = new global::System.Guid(0x202d77ab, 0x7b4e, 0x4139, 0xb3, 0xd8, 0x89, 0x16, 0x7e, 0xe1, 0xb3, 0x27);
		
		/// <summary>
		/// DomainRole ProducedAsset
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.ProducedAsset
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets/ProducedAsset.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets/ProducedAsset.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SuppliedAssets", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets/ProducedAsset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("202d77ab-7b4e-4139-b3d8-89167ee1b327")]
		public virtual ProducedAsset ProducedAsset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProducedAsset)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProducedAssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProducedAssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProducedAssets of a SuppliedAsset
		/// <summary>
		/// Gets a list of ProducedAssets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProducedAsset> GetProducedAssets(SuppliedAsset element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProducedAsset>, ProducedAsset>(element, SuppliedAssetDomainRoleId);
		}
		#endregion
		#region SuppliedAsset link accessor
		/// <summary>
		/// Get the list of SuppliedAssetCopiesToProducedAssets links to a SuppliedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets> GetLinksToProducedAssets ( global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset suppliedAssetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets>(suppliedAssetInstance, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAssetDomainRoleId);
		}
		#endregion
		#region ProducedAsset link accessor
		/// <summary>
		/// Get the list of SuppliedAssetCopiesToProducedAssets links to a ProducedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets> GetLinksToSuppliedAssets ( global::NuPattern.Authoring.WorkflowDesign.ProducedAsset producedAssetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets>(producedAssetInstance, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.ProducedAssetDomainRoleId);
		}
		#endregion
		#region SuppliedAssetCopiesToProducedAssets instance accessors
		
		/// <summary>
		/// Get any SuppliedAssetCopiesToProducedAssets links between a given SuppliedAsset and a ProducedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets> GetLinks( global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset source, global::NuPattern.Authoring.WorkflowDesign.ProducedAsset target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets>(source, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets link in links )
			{
				if ( target.Equals(link.ProducedAsset) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SuppliedAssetCopiesToProducedAssets link between a given SuppliedAssetand a ProducedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets GetLink( global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset source, global::NuPattern.Authoring.WorkflowDesign.ProducedAsset target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets>(source, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets.SuppliedAssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetCopiesToProducedAssets link in links )
			{
				if ( target.Equals(link.ProducedAsset) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship SuppliedAssetSuppliesProductionTools
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c884ef2a-69d3-4df7-9595-b270b3a54a5b")]
	public partial class SuppliedAssetSuppliesProductionTools : AssetSuppliesAllProducingTools
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SuppliedAssetSuppliesProductionTools domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc884ef2a, 0x69d3, 0x4df7, 0x95, 0x95, 0xb2, 0x70, 0xb3, 0xa5, 0x4a, 0x5b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SuppliedAssetSuppliesProductionTools link in the same Partition as the given SuppliedAsset
		/// </summary>
		/// <param name="source">SuppliedAsset to use as the source of the relationship.</param>
		/// <param name="target">ProductionTool to use as the target of the relationship.</param>
		public SuppliedAssetSuppliesProductionTools(SuppliedAsset source, ProductionTool target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SuppliedAssetSuppliesProductionTools.SuppliedAssetDomainRoleId, source), new DslModeling::RoleAssignment(SuppliedAssetSuppliesProductionTools.ProductionToolDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SuppliedAssetSuppliesProductionTools(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SuppliedAssetSuppliesProductionTools(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SuppliedAssetSuppliesProductionTools(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SuppliedAssetSuppliesProductionTools(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SuppliedAsset domain role code
		
		/// <summary>
		/// SuppliedAsset domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuppliedAssetDomainRoleId = new global::System.Guid(0x9f26c80d, 0x04ab, 0x4b84, 0xad, 0xfa, 0x67, 0x2f, 0xc8, 0x82, 0x46, 0xd6);
		
		/// <summary>
		/// DomainRole SuppliedAsset
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAsset
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools/SuppliedAsset.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools/SuppliedAsset.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProductionTools", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools/SuppliedAsset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9f26c80d-04ab-4b84-adfa-672fc88246d6")]
		public virtual SuppliedAsset SuppliedAsset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SuppliedAsset)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuppliedAssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuppliedAssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SuppliedSuppliedAssets of a ProductionTool
		/// <summary>
		/// Gets a list of SuppliedSuppliedAssets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SuppliedAsset> GetSuppliedSuppliedAssets(ProductionTool element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SuppliedAsset>, SuppliedAsset>(element, ProductionToolDomainRoleId);
		}
		#endregion
		#region Asset domain role override
		
		/// <summary>
		/// Gets the element playing SuppliedAsset domain role.
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.Asset
		/// </summary>
		public override Asset Asset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SuppliedAsset;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SuppliedAsset = (SuppliedAsset)value;
			}
		}
		
		#endregion
		#region ProductionTool domain role code
		
		/// <summary>
		/// ProductionTool domain role Id.
		/// </summary>
		public static readonly new global::System.Guid ProductionToolDomainRoleId = new global::System.Guid(0x8d8cfed6, 0x33f9, 0x45b1, 0x81, 0x32, 0x6b, 0x87, 0x91, 0xcf, 0xc2, 0x18);
		
		/// <summary>
		/// DomainRole ProductionTool
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.ProductionTool
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools/ProductionTool.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools/ProductionTool.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SuppliedSuppliedAssets", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools/ProductionTool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8d8cfed6-33f9-45b1-8132-6b8791cfc218")]
		public override ProductionTool ProductionTool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductionTool)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductionToolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductionToolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProductionTools of a SuppliedAsset
		/// <summary>
		/// Gets a list of ProductionTools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProductionTool> GetProductionTools(SuppliedAsset element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(element, SuppliedAssetDomainRoleId);
		}
		#endregion
		#region SuppliedAsset link accessor
		/// <summary>
		/// Get the list of SuppliedAssetSuppliesProductionTools links to a SuppliedAsset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools> GetLinksToProductionTools ( global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset suppliedAssetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools>(suppliedAssetInstance, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAssetDomainRoleId);
		}
		#endregion
		#region ProductionTool link accessor
		/// <summary>
		/// Get the list of SuppliedAssetSuppliesProductionTools links to a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools> GetLinksToSuppliedSuppliedAssets ( global::NuPattern.Authoring.WorkflowDesign.ProductionTool productionToolInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools>(productionToolInstance, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.ProductionToolDomainRoleId);
		}
		#endregion
		#region SuppliedAssetSuppliesProductionTools instance accessors
		
		/// <summary>
		/// Get any SuppliedAssetSuppliesProductionTools links between a given SuppliedAsset and a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools> GetLinks( global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools>(source, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SuppliedAssetSuppliesProductionTools link between a given SuppliedAssetand a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools GetLink( global::NuPattern.Authoring.WorkflowDesign.SuppliedAsset source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools>(source, global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools.SuppliedAssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.SuppliedAssetSuppliesProductionTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship AssetSuppliesAllProducingTools
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dc20e99c-5f1d-4a9c-81af-eec621f4c3ec")]
	public abstract partial class AssetSuppliesAllProducingTools : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssetSuppliesAllProducingTools domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdc20e99c, 0x5f1d, 0x4a9c, 0x81, 0xaf, 0xee, 0xc6, 0x21, 0xf4, 0xc3, 0xec);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected AssetSuppliesAllProducingTools(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Asset domain role code
		
		/// <summary>
		/// Asset domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssetDomainRoleId = new global::System.Guid(0x6fe991a6, 0xe1b0, 0x4fc3, 0xb3, 0x6a, 0x81, 0x0b, 0xfe, 0xfd, 0x79, 0x1e);
		
		/// <summary>
		/// DomainRole Asset
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.Asset
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools/Asset.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools/Asset.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AllProducingTools", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools/Asset.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6fe991a6-e1b0-4fc3-b36a-810bfefd791e")]
		public abstract Asset Asset
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access AllSuppliedAssets of a ProductionTool
		/// <summary>
		/// Gets a list of AllSuppliedAssets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<Asset> GetAllSuppliedAssets(ProductionTool element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<Asset>, Asset>(element, ProductionToolDomainRoleId);
		}
		#endregion
		#region ProductionTool domain role code
		
		/// <summary>
		/// ProductionTool domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductionToolDomainRoleId = new global::System.Guid(0x09210d13, 0x2037, 0x4f79, 0xae, 0xda, 0x2e, 0x04, 0xe4, 0x9b, 0xa3, 0xca);
		
		/// <summary>
		/// DomainRole ProductionTool
		/// Description for
		/// NuPattern.Authoring.ComponentModel.AssetSuppliesAllProducingTools.ProductionTool
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools/ProductionTool.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools/ProductionTool.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AllSuppliedAssets", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools/ProductionTool.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("09210d13-2037-4f79-aeda-2e04e49ba3ca")]
		public abstract ProductionTool ProductionTool
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access AllProducingTools of a Asset
		/// <summary>
		/// Gets a list of AllProducingTools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ProductionTool> GetAllProducingTools(Asset element)
		{
			return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ProductionTool>, ProductionTool>(element, AssetDomainRoleId);
		}
		#endregion
		#region Asset link accessor
		/// <summary>
		/// Get the list of AssetSuppliesAllProducingTools links to a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools> GetLinksToAllProducingTools ( global::NuPattern.Authoring.WorkflowDesign.Asset assetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools>(assetInstance, global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.AssetDomainRoleId);
		}
		#endregion
		#region ProductionTool link accessor
		/// <summary>
		/// Get the list of AssetSuppliesAllProducingTools links to a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools> GetLinksToAllSuppliedAssets ( global::NuPattern.Authoring.WorkflowDesign.ProductionTool productionToolInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools>(productionToolInstance, global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.ProductionToolDomainRoleId);
		}
		#endregion
		#region AssetSuppliesAllProducingTools instance accessors
		
		/// <summary>
		/// Get any AssetSuppliesAllProducingTools links between a given Asset and a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools> GetLinks( global::NuPattern.Authoring.WorkflowDesign.Asset source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools>(source, global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.AssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssetSuppliesAllProducingTools link between a given Assetand a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools GetLink( global::NuPattern.Authoring.WorkflowDesign.Asset source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools>(source, global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools.AssetDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.AssetSuppliesAllProducingTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship DesignHasProductionTools
	/// Description for NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("80b044c8-3478-4387-8ae4-b1f78fbd6475")]
	public partial class DesignHasProductionTools : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignHasProductionTools domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x80b044c8, 0x3478, 0x4387, 0x8a, 0xe4, 0xb1, 0xf7, 0x8f, 0xbd, 0x64, 0x75);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignHasProductionTools link in the same Partition as the given Design
		/// </summary>
		/// <param name="source">Design to use as the source of the relationship.</param>
		/// <param name="target">ProductionTool to use as the target of the relationship.</param>
		public DesignHasProductionTools(Design source, ProductionTool target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignHasProductionTools.DesignDomainRoleId, source), new DslModeling::RoleAssignment(DesignHasProductionTools.ProductionToolDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasProductionTools(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasProductionTools(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasProductionTools(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasProductionTools(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Design domain role code
		
		/// <summary>
		/// Design domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignDomainRoleId = new global::System.Guid(0xc5ee3106, 0x0130, 0x492a, 0x86, 0xd8, 0x0c, 0x3e, 0xf3, 0x53, 0x25, 0x20);
		
		/// <summary>
		/// DomainRole Design
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.Design
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools/Design.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools/Design.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProductionTools", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools/Design.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c5ee3106-0130-492a-86d8-0c3ef3532520")]
		public virtual Design Design
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Design)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Design of a ProductionTool
		/// <summary>
		/// Gets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Design GetDesign(ProductionTool element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProductionToolDomainRoleId) as Design;
		}
		
		/// <summary>
		/// Sets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDesign(ProductionTool element, Design newDesign)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProductionToolDomainRoleId, newDesign);
		}
		#endregion
		#region ProductionTool domain role code
		
		/// <summary>
		/// ProductionTool domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductionToolDomainRoleId = new global::System.Guid(0x3f6e20bf, 0xff82, 0x4b55, 0xaa, 0xfe, 0x8f, 0x49, 0x30, 0xe4, 0x78, 0x00);
		
		/// <summary>
		/// DomainRole ProductionTool
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionTool
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools/ProductionTool.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools/ProductionTool.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Design", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools/ProductionTool.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("3f6e20bf-ff82-4b55-aafe-8f4930e47800")]
		public virtual ProductionTool ProductionTool
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductionTool)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductionToolDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductionToolDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProductionTools of a Design
		/// <summary>
		/// Gets a list of ProductionTools.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProductionTool> GetProductionTools(Design element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProductionTool>, ProductionTool>(element, DesignDomainRoleId);
		}
		#endregion
		#region Design link accessor
		/// <summary>
		/// Get the list of DesignHasProductionTools links to a Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools> GetLinksToProductionTools ( global::NuPattern.Authoring.WorkflowDesign.Design designInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools>(designInstance, global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.DesignDomainRoleId);
		}
		#endregion
		#region ProductionTool link accessor
		/// <summary>
		/// Get the DesignHasProductionTools link to a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools GetLinkToDesign (global::NuPattern.Authoring.WorkflowDesign.ProductionTool productionToolInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools>(productionToolInstance, global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.ProductionToolDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProductionTool not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DesignHasProductionTools instance accessors
		
		/// <summary>
		/// Get any DesignHasProductionTools links between a given Design and a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools> GetLinks( global::NuPattern.Authoring.WorkflowDesign.Design source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools>(source, global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.DesignDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignHasProductionTools link between a given Designand a ProductionTool.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools GetLink( global::NuPattern.Authoring.WorkflowDesign.Design source, global::NuPattern.Authoring.WorkflowDesign.ProductionTool target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools>(source, global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools.DesignDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.DesignHasProductionTools link in links )
			{
				if ( target.Equals(link.ProductionTool) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship DesignHasAssets
	/// Description for NuPattern.Authoring.WorkflowDesign.DesignHasAssets
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasAssets.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasAssets.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("425ce70d-ec0b-4add-ab06-0368a05904e4")]
	public partial class DesignHasAssets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignHasAssets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x425ce70d, 0xec0b, 0x4add, 0xab, 0x06, 0x03, 0x68, 0xa0, 0x59, 0x04, 0xe4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignHasAssets link in the same Partition as the given Design
		/// </summary>
		/// <param name="source">Design to use as the source of the relationship.</param>
		/// <param name="target">Asset to use as the target of the relationship.</param>
		public DesignHasAssets(Design source, Asset target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignHasAssets.DesignDomainRoleId, source), new DslModeling::RoleAssignment(DesignHasAssets.AssetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasAssets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasAssets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasAssets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasAssets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Design domain role code
		
		/// <summary>
		/// Design domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignDomainRoleId = new global::System.Guid(0x915f6d0f, 0x3ba1, 0x4216, 0xa0, 0xbf, 0x37, 0xf2, 0x1f, 0x50, 0xfc, 0xbf);
		
		/// <summary>
		/// DomainRole Design
		/// Description for NuPattern.Authoring.WorkflowDesign.DesignHasAssets.Design
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasAssets/Design.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasAssets/Design.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Assets", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.DesignHasAssets/Design.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("915f6d0f-3ba1-4216-a0bf-37f21f50fcbf")]
		public virtual Design Design
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Design)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Design of a Asset
		/// <summary>
		/// Gets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Design GetDesign(Asset element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssetDomainRoleId) as Design;
		}
		
		/// <summary>
		/// Sets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDesign(Asset element, Design newDesign)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssetDomainRoleId, newDesign);
		}
		#endregion
		#region Asset domain role code
		
		/// <summary>
		/// Asset domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssetDomainRoleId = new global::System.Guid(0x826f0f43, 0x41df, 0x4f3e, 0xb5, 0x74, 0xfa, 0xf6, 0xd1, 0x3b, 0x69, 0xb6);
		
		/// <summary>
		/// DomainRole Asset
		/// Description for NuPattern.Authoring.WorkflowDesign.DesignHasAssets.Asset
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasAssets/Asset.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasAssets/Asset.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Design", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.DesignHasAssets/Asset.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("826f0f43-41df-4f3e-b574-faf6d13b69b6")]
		public virtual Asset Asset
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Asset)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Assets of a Design
		/// <summary>
		/// Gets a list of Assets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Asset> GetAssets(Design element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Asset>, Asset>(element, DesignDomainRoleId);
		}
		#endregion
		#region Design link accessor
		/// <summary>
		/// Get the list of DesignHasAssets links to a Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets> GetLinksToAssets ( global::NuPattern.Authoring.WorkflowDesign.Design designInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets>(designInstance, global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets.DesignDomainRoleId);
		}
		#endregion
		#region Asset link accessor
		/// <summary>
		/// Get the DesignHasAssets link to a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets GetLinkToDesign (global::NuPattern.Authoring.WorkflowDesign.Asset assetInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets>(assetInstance, global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets.AssetDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Asset not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DesignHasAssets instance accessors
		
		/// <summary>
		/// Get any DesignHasAssets links between a given Design and a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets> GetLinks( global::NuPattern.Authoring.WorkflowDesign.Design source, global::NuPattern.Authoring.WorkflowDesign.Asset target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets>(source, global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets.DesignDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignHasAssets link between a given Designand a Asset.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets GetLink( global::NuPattern.Authoring.WorkflowDesign.Design source, global::NuPattern.Authoring.WorkflowDesign.Asset target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets>(source, global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets.DesignDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.DesignHasAssets link in links )
			{
				if ( target.Equals(link.Asset) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship DesignHasVariabilityRequirements
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0c15cee8-4ab6-4fe8-8218-6ffca2d22dc9")]
	public partial class DesignHasVariabilityRequirements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DesignHasVariabilityRequirements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0c15cee8, 0x4ab6, 0x4fe8, 0x82, 0x18, 0x6f, 0xfc, 0xa2, 0xd2, 0x2d, 0xc9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DesignHasVariabilityRequirements link in the same Partition as the given Design
		/// </summary>
		/// <param name="source">Design to use as the source of the relationship.</param>
		/// <param name="target">VariabilityRequirement to use as the target of the relationship.</param>
		public DesignHasVariabilityRequirements(Design source, VariabilityRequirement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DesignHasVariabilityRequirements.DesignDomainRoleId, source), new DslModeling::RoleAssignment(DesignHasVariabilityRequirements.VariabilityRequirementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasVariabilityRequirements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasVariabilityRequirements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DesignHasVariabilityRequirements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DesignHasVariabilityRequirements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Design domain role code
		
		/// <summary>
		/// Design domain role Id.
		/// </summary>
		public static readonly global::System.Guid DesignDomainRoleId = new global::System.Guid(0x341c3a81, 0x81ad, 0x485d, 0x82, 0xb4, 0x17, 0xd5, 0x47, 0x2f, 0x56, 0xe3);
		
		/// <summary>
		/// DomainRole Design
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.Design
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements/Design.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements/Design.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VariabilityRequirements", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements/Design.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("341c3a81-81ad-485d-82b4-17d5472f56e3")]
		public virtual Design Design
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Design)DslModeling::DomainRoleInfo.GetRolePlayer(this, DesignDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DesignDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Design of a VariabilityRequirement
		/// <summary>
		/// Gets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Design GetDesign(VariabilityRequirement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VariabilityRequirementDomainRoleId) as Design;
		}
		
		/// <summary>
		/// Sets Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDesign(VariabilityRequirement element, Design newDesign)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VariabilityRequirementDomainRoleId, newDesign);
		}
		#endregion
		#region VariabilityRequirement domain role code
		
		/// <summary>
		/// VariabilityRequirement domain role Id.
		/// </summary>
		public static readonly global::System.Guid VariabilityRequirementDomainRoleId = new global::System.Guid(0xbf7f9257, 0x8bf9, 0x470d, 0xad, 0xef, 0xa9, 0x92, 0x2c, 0x3a, 0x93, 0xd5);
		
		/// <summary>
		/// DomainRole VariabilityRequirement
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirement
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements/VariabilityRequirement.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements/VariabilityRequirement.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Design", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements/VariabilityRequirement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bf7f9257-8bf9-470d-adef-a9922c3a93d5")]
		public virtual VariabilityRequirement VariabilityRequirement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VariabilityRequirement)DslModeling::DomainRoleInfo.GetRolePlayer(this, VariabilityRequirementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VariabilityRequirementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VariabilityRequirements of a Design
		/// <summary>
		/// Gets a list of VariabilityRequirements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<VariabilityRequirement> GetVariabilityRequirements(Design element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<VariabilityRequirement>, VariabilityRequirement>(element, DesignDomainRoleId);
		}
		#endregion
		#region Design link accessor
		/// <summary>
		/// Get the list of DesignHasVariabilityRequirements links to a Design.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements> GetLinksToVariabilityRequirements ( global::NuPattern.Authoring.WorkflowDesign.Design designInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements>(designInstance, global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.DesignDomainRoleId);
		}
		#endregion
		#region VariabilityRequirement link accessor
		/// <summary>
		/// Get the DesignHasVariabilityRequirements link to a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements GetLinkToDesign (global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement variabilityRequirementInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements>(variabilityRequirementInstance, global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.VariabilityRequirementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of VariabilityRequirement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DesignHasVariabilityRequirements instance accessors
		
		/// <summary>
		/// Get any DesignHasVariabilityRequirements links between a given Design and a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements> GetLinks( global::NuPattern.Authoring.WorkflowDesign.Design source, global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements>(source, global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.DesignDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements link in links )
			{
				if ( target.Equals(link.VariabilityRequirement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DesignHasVariabilityRequirements link between a given Designand a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements GetLink( global::NuPattern.Authoring.WorkflowDesign.Design source, global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements>(source, global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements.DesignDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.DesignHasVariabilityRequirements link in links )
			{
				if ( target.Equals(link.VariabilityRequirement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Authoring.WorkflowDesign
{
	/// <summary>
	/// DomainRelationship ParentVariabilityRequirementHasParentVariabilityRequirements
	/// Description for
	/// NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("60c1f1f1-e7cf-4ab5-927f-9864d9ba40e9")]
	public partial class ParentVariabilityRequirementHasParentVariabilityRequirements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ParentVariabilityRequirementHasParentVariabilityRequirements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60c1f1f1, 0xe7cf, 0x4ab5, 0x92, 0x7f, 0x98, 0x64, 0xd9, 0xba, 0x40, 0xe9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ParentVariabilityRequirementHasParentVariabilityRequirements link in the same Partition as the given VariabilityRequirement
		/// </summary>
		/// <param name="source">VariabilityRequirement to use as the source of the relationship.</param>
		/// <param name="target">VariabilityRequirement to use as the target of the relationship.</param>
		public ParentVariabilityRequirementHasParentVariabilityRequirements(VariabilityRequirement source, VariabilityRequirement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirementDomainRoleId, source), new DslModeling::RoleAssignment(ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ParentVariabilityRequirementHasParentVariabilityRequirements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ParentVariabilityRequirementHasParentVariabilityRequirements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ParentVariabilityRequirementHasParentVariabilityRequirements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ParentVariabilityRequirementHasParentVariabilityRequirements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceVariabilityRequirement domain role code
		
		/// <summary>
		/// SourceVariabilityRequirement domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceVariabilityRequirementDomainRoleId = new global::System.Guid(0xd938a687, 0x573c, 0x4f75, 0xb7, 0xde, 0xf8, 0xb2, 0xa6, 0xec, 0xc5, 0x3c);
		
		/// <summary>
		/// DomainRole SourceVariabilityRequirement
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirement
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements/SourceVariabilityRequirement.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements/SourceVariabilityRequirement.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "VariabilityRequirements", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements/SourceVariabilityRequirement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d938a687-573c-4f75-b7de-f8b2a6ecc53c")]
		public virtual VariabilityRequirement SourceVariabilityRequirement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VariabilityRequirement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceVariabilityRequirementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceVariabilityRequirementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentVariabilityRequirement of a VariabilityRequirement
		/// <summary>
		/// Gets ParentVariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static VariabilityRequirement GetParentVariabilityRequirement(VariabilityRequirement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TargetVariabilityRequirementDomainRoleId) as VariabilityRequirement;
		}
		
		/// <summary>
		/// Sets ParentVariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentVariabilityRequirement(VariabilityRequirement element, VariabilityRequirement newSourceVariabilityRequirement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TargetVariabilityRequirementDomainRoleId, newSourceVariabilityRequirement);
		}
		#endregion
		#region TargetVariabilityRequirement domain role code
		
		/// <summary>
		/// TargetVariabilityRequirement domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetVariabilityRequirementDomainRoleId = new global::System.Guid(0x216e3b31, 0x177b, 0x40b6, 0xb2, 0x17, 0x69, 0x7b, 0xeb, 0x57, 0x99, 0xf3);
		
		/// <summary>
		/// DomainRole TargetVariabilityRequirement
		/// Description for
		/// NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirement
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements/TargetVariabilityRequirement.DisplayName", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements/TargetVariabilityRequirement.Description", typeof(global::NuPattern.Authoring.WorkflowDesign.WorkflowDesignDomainModel), "NuPattern.Authoring.WorkflowDesign.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentVariabilityRequirement", PropertyDisplayNameKey="NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements/TargetVariabilityRequirement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("216e3b31-177b-40b6-b217-697beb5799f3")]
		public virtual VariabilityRequirement TargetVariabilityRequirement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (VariabilityRequirement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetVariabilityRequirementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetVariabilityRequirementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access VariabilityRequirements of a VariabilityRequirement
		/// <summary>
		/// Gets a list of VariabilityRequirements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<VariabilityRequirement> GetVariabilityRequirements(VariabilityRequirement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<VariabilityRequirement>, VariabilityRequirement>(element, SourceVariabilityRequirementDomainRoleId);
		}
		#endregion
		#region SourceVariabilityRequirement link accessor
		/// <summary>
		/// Get the list of ParentVariabilityRequirementHasParentVariabilityRequirements links to a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements> GetLinksToVariabilityRequirements ( global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement sourceVariabilityRequirementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements>(sourceVariabilityRequirementInstance, global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirementDomainRoleId);
		}
		#endregion
		#region TargetVariabilityRequirement link accessor
		/// <summary>
		/// Get the ParentVariabilityRequirementHasParentVariabilityRequirements link to a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements GetLinkToParentVariabilityRequirement (global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement targetVariabilityRequirementInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements>(targetVariabilityRequirementInstance, global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.TargetVariabilityRequirementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TargetVariabilityRequirement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ParentVariabilityRequirementHasParentVariabilityRequirements instance accessors
		
		/// <summary>
		/// Get any ParentVariabilityRequirementHasParentVariabilityRequirements links between a given VariabilityRequirement and a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements> GetLinks( global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement source, global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements>();
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements>(source, global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirementDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements link in links )
			{
				if ( target.Equals(link.TargetVariabilityRequirement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ParentVariabilityRequirementHasParentVariabilityRequirements link between a given VariabilityRequirementand a VariabilityRequirement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements GetLink( global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement source, global::NuPattern.Authoring.WorkflowDesign.VariabilityRequirement target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements>(source, global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements.SourceVariabilityRequirementDomainRoleId);
			foreach ( global::NuPattern.Authoring.WorkflowDesign.ParentVariabilityRequirementHasParentVariabilityRequirements link in links )
			{
				if ( target.Equals(link.TargetVariabilityRequirement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
