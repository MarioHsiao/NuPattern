<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Interfaces.dll" #>
<#@ Assembly Name="NuPattern.Authoring.Toolkit.Shell.dll" #>
<#@ Assembly Name="NuPattern.Extensibility.dll" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.ComponentModel" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Extensibility" #>
<#@ Include File="Header.t4" #>
<#@ Include File="NamedElementParentInterface.t4" #>
<#@ Include File="ProductElementInterface.t4" #>
<# 
var store = this.ProductLine.Store;

foreach (var extensionPoint in store.DefaultPartition.ElementDirectory.AllElements.OfType<IExtensionPointInfo>())
{
    var codegen = new ProductCodeGeneration<IExtensionPointInfo, IProduct>(extensionPoint);
    codegen.AddType(typeof(Action));
    codegen.EndInit();
#>
namespace <#=RootNamespace #>
{
<#
	foreach (var ns in codegen.SafeImports)
	{
#>
	using <#=ns #>;
<#
	}
#>

	<#GenerateFactoryInterfaceAttributes(extensionPoint); #>
	public partial interface I<#=extensionPoint.CodeIdentifier #> : IFactoryInterface
	{ <# 
GenerateProperties(codegen, extensionPoint);
GenerateParentProperty(extensionPoint);

PushIndent("\t");
PushIndent("\t");

GenerateDeleteInterfaceMethod();

PopIndent();
PopIndent();
#>

		/// <summary>
		/// Gets the generic <see cref="IProduct"/> underlying element.
		/// </summary>
		IProduct AsProduct();
	}
}

<#
}
#>