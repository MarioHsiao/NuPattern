<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="Microsoft.VisualStudio.TeamArchitect.PowerTools.dll" #>
<#@ Assembly Name="System.ComponentModel.Composition" #>
<#@ Assembly Name="NuPattern.Runtime.Interfaces.dll" #>
<#@ Assembly Name="NuPattern.Authoring.Toolkit.Shell.dll" #>
<#@ Assembly Name="NuPattern.Extensibility.dll" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.ComponentModel" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Extensibility" #>
<#@ Include File="Header.t4" #>
<#@ Include File="NamedElementParentImplementation.t4" #>
<#@ Include File="ProductElementImplementation.t4" #>
<# 
var store = this.ProductLine.Store;

foreach (var extensionPoint in store.DefaultPartition.ElementDirectory.AllElements.OfType<IExtensionPointInfo>())
{
    var codegen = new ProductCodeGeneration<IExtensionPointInfo, IProduct>(extensionPoint);
    codegen.AddType(typeof(Action));
    codegen.AddType(typeof(System.ComponentModel.Composition.ImportingConstructorAttribute));
    codegen.EndInit();
#>
namespace <#=RootNamespace #>
{
<#
	foreach (var ns in codegen.SafeImports)
	{
#>
	using <#=ns #>;
<#
	}
#>

	<# GenerateFactoryProxyAttributes(extensionPoint); #>
	internal partial class <#=extensionPoint.CodeIdentifier #> : I<#=extensionPoint.CodeIdentifier #>
	{
		private IProduct target;
		private IProductProxy<I<#=extensionPoint.CodeIdentifier #>> proxy;

		/// <summary>
		/// For MEF.
		/// </summary>
		[ImportingConstructor]
		private <#=extensionPoint.CodeIdentifier#>() { }

		/// <summary>
		/// Initializes a new instance of the <see cref="<#=extensionPoint.CodeIdentifier #>"/> class.
		/// </summary>
		public <#=extensionPoint.CodeIdentifier #>(IProduct target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<I<#=extensionPoint.CodeIdentifier #>>();
		}	
<# 
GenerateProperties(codegen, extensionPoint);
GenerateParentProperty(extensionPoint);
#>

		/// <summary>
		/// Gets the generic <see cref="IProduct"/> underlying element.
		/// </summary>
		public IProduct AsProduct()
		{
			return this.target;
		}

		/// <summary>
		/// Gets the generic underlying element as the given type if possible.
		/// </summary>
		public TRuntimeInterface As<TRuntimeInterface>()
			where TRuntimeInterface : class
		{
			return this.target as TRuntimeInterface;
		}

		/// <summary>
		/// Deletes this instance.
		/// </summary>
		public void Delete()
		{
			this.target.Delete();
		}
	}
}
<#
}
#>