<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NuPattern.Library.Automation.LibraryDomainModel.Description" xml:space="preserve">
    <value>Library</value>
    <comment>Description for DslLibrary &apos;Library&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.LibraryDomainModel.DisplayName" xml:space="preserve">
    <value>Library</value>
    <comment>DisplayName for DslLibrary &apos;Library&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings.Description" xml:space="preserve">
    <value>Configures the settings for adding a project or item template to unfold, and execute other automation on this element.</value>
    <comment>Description for DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings.DisplayName" xml:space="preserve">
    <value>VS Template Launch Point</value>
    <comment>DisplayName for DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/TemplateUri.Description" xml:space="preserve">
    <value>The project or item template to unfold.</value>
    <comment>Description for DomainProperty &apos;TemplateUri&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/TemplateUri.DisplayName" xml:space="preserve">
    <value>Template</value>
    <comment>DisplayName for DomainProperty &apos;TemplateUri&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/CreateElementOnUnfold.Description" xml:space="preserve">
    <value>Whether to create the current element when the template is unfolded from the New Project/Item dialog in Visual Studio.</value>
    <comment>Description for DomainProperty &apos;CreateElementOnUnfold&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/CreateElementOnUnfold.DisplayName" xml:space="preserve">
    <value>Create When Unfolded</value>
    <comment>DisplayName for DomainProperty &apos;CreateElementOnUnfold&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/UnfoldOnElementCreated.Description" xml:space="preserve">
    <value>Whether to unfold the template when the element is created from the Solution Builder.</value>
    <comment>Description for DomainProperty &apos;UnfoldOnElementCreated&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/UnfoldOnElementCreated.DisplayName" xml:space="preserve">
    <value>Unfold When Created</value>
    <comment>DisplayName for DomainProperty &apos;UnfoldOnElementCreated&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/CommandId.Description" xml:space="preserve">
    <value>The command to execute after the template is unfolded.</value>
    <comment>Description for DomainProperty &apos;CommandId&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/CommandId.DisplayName" xml:space="preserve">
    <value>Command</value>
    <comment>DisplayName for DomainProperty &apos;CommandId&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/WizardId.Description" xml:space="preserve">
    <value>A wizard to gather input from the user, that configures the properties of this element, before the template is unfolded.</value>
    <comment>Description for DomainProperty &apos;WizardId&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/WizardId.DisplayName" xml:space="preserve">
    <value>Wizard</value>
    <comment>DisplayName for DomainProperty &apos;WizardId&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/TemplateAuthoringUri.Description" xml:space="preserve">
    <value>The Uri to resolve the referenced template at authoring time.</value>
    <comment>Description for DomainProperty &apos;TemplateAuthoringUri&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/TemplateAuthoringUri.DisplayName" xml:space="preserve">
    <value>Template Authoring Uri</value>
    <comment>DisplayName for DomainProperty &apos;TemplateAuthoringUri&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/SyncName.Description" xml:space="preserve">
    <value>Whether to keep in sync the name of the unfolded artifact with the name of the current element.</value>
    <comment>Description for DomainProperty &apos;SyncName&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/SyncName.DisplayName" xml:space="preserve">
    <value>Sync Name</value>
    <comment>DisplayName for DomainProperty &apos;SyncName&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/SanitizeName.Description" xml:space="preserve">
    <value>Whether to remove spaces and other illegal characters from the name of the unfolded artifact.</value>
    <comment>Description for DomainProperty &apos;SanitizeName&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/SanitizeName.DisplayName" xml:space="preserve">
    <value>Sanitize Name</value>
    <comment>DisplayName for DomainProperty &apos;SanitizeName&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/RawTargetFileName.Description" xml:space="preserve">
    <value>The name of the unfolded artifact. For an item template, if no extension is provided, it is taken from the vstemplate file. This property supports property value substitution from properties on the current element. (e.g. {InstanceName} or {VariablePropertyName}). See guidance documentation for details.</value>
    <comment>Description for DomainProperty &apos;RawTargetFileName&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/RawTargetFileName.DisplayName" xml:space="preserve">
    <value>Target File Name</value>
    <comment>DisplayName for DomainProperty &apos;RawTargetFileName&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/RawTargetPath.Description" xml:space="preserve">
    <value>The path to the target file, project, folder or solution folder in the current solution where the artifact is to be unfolded. Folders that don&apos;t currently exist are created automatically. i.e. ..\~\GeneratedCode, navigates up to the parent element, and traverses the first artifact link found on the parent element and into the &apos;GeneratedCode&apos; sub-folder of that container (project or folder).  See guidance documentation for more example paths and details.</value>
    <comment>Description for DomainProperty &apos;RawTargetPath&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/RawTargetPath.DisplayName" xml:space="preserve">
    <value>Target Path</value>
    <comment>DisplayName for DomainProperty &apos;RawTargetPath&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/Tag.Description" xml:space="preserve">
    <value>An optional arbitrary text value to tag the generated solution item, that is used as an aid in resolving the artifact reference to the solution item.</value>
    <comment>Description for DomainProperty &apos;Tag&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.TemplateSettings/Tag.DisplayName" xml:space="preserve">
    <value>Tag</value>
    <comment>DisplayName for DomainProperty &apos;Tag&apos; on DomainClass &apos;TemplateSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings.Description" xml:space="preserve">
    <value>Configures the settings for handling an event for executing other automation on this element.</value>
    <comment>Description for DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings.DisplayName" xml:space="preserve">
    <value>Event Launch Point</value>
    <comment>DisplayName for DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/EventId.Description" xml:space="preserve">
    <value>The type of event which triggers the command to execute when all conditions are met.</value>
    <comment>Description for DomainProperty &apos;EventId&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/EventId.DisplayName" xml:space="preserve">
    <value>Event Type</value>
    <comment>DisplayName for DomainProperty &apos;EventId&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/CommandId.Description" xml:space="preserve">
    <value>The command to execute on this event.</value>
    <comment>Description for DomainProperty &apos;CommandId&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/CommandId.DisplayName" xml:space="preserve">
    <value>Command</value>
    <comment>DisplayName for DomainProperty &apos;CommandId&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/Conditions.Description" xml:space="preserve">
    <value>The conditions that must be satisfied when the event is raised in order to execute the command.</value>
    <comment>Description for DomainProperty &apos;Conditions&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/Conditions.DisplayName" xml:space="preserve">
    <value>Conditions</value>
    <comment>DisplayName for DomainProperty &apos;Conditions&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/WizardId.Description" xml:space="preserve">
    <value>A wizard to gather input from the user, that configures the properties of this element, when the event is raised.</value>
    <comment>Description for DomainProperty &apos;WizardId&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.EventSettings/WizardId.DisplayName" xml:space="preserve">
    <value>Wizard</value>
    <comment>DisplayName for DomainProperty &apos;WizardId&apos; on DomainClass &apos;EventSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.CommandSettings.Description" xml:space="preserve">
    <value>Configures the settings for adding a command that can be executed on this element.</value>
    <comment>Description for DomainClass &apos;CommandSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.CommandSettings.DisplayName" xml:space="preserve">
    <value>Command</value>
    <comment>DisplayName for DomainClass &apos;CommandSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.CommandSettings/TypeId.Description" xml:space="preserve">
    <value>The type of the command. Once selected, the specific properties of the selected command can be configured.</value>
    <comment>Description for DomainProperty &apos;TypeId&apos; on DomainClass &apos;CommandSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.CommandSettings/TypeId.DisplayName" xml:space="preserve">
    <value>Command Type</value>
    <comment>DisplayName for DomainProperty &apos;TypeId&apos; on DomainClass &apos;CommandSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.CommandSettings/Properties.Description" xml:space="preserve">
    <value>The design-time properties of the command.</value>
    <comment>Description for DomainProperty &apos;Properties&apos; on DomainClass &apos;CommandSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.CommandSettings/Properties.DisplayName" xml:space="preserve">
    <value>Properties</value>
    <comment>DisplayName for DomainProperty &apos;Properties&apos; on DomainClass &apos;CommandSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings.Description" xml:space="preserve">
    <value>Configures the settings for adding a context menu item for executing other automation on this element.</value>
    <comment>Description for DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings.DisplayName" xml:space="preserve">
    <value>ContextMenu Launch Point</value>
    <comment>DisplayName for DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/Conditions.Description" xml:space="preserve">
    <value>The conditions that must be satisfied in order to display the menu.</value>
    <comment>Description for DomainProperty &apos;Conditions&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/Conditions.DisplayName" xml:space="preserve">
    <value>Conditions</value>
    <comment>DisplayName for DomainProperty &apos;Conditions&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/Text.Description" xml:space="preserve">
    <value>The text that is displayed on the menu to the user.</value>
    <comment>Description for DomainProperty &apos;Text&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/Text.DisplayName" xml:space="preserve">
    <value>Menu Text</value>
    <comment>DisplayName for DomainProperty &apos;Text&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/Icon.Description" xml:space="preserve">
    <value>The icon that is displayed on the menu to the user.</value>
    <comment>Description for DomainProperty &apos;Icon&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/Icon.DisplayName" xml:space="preserve">
    <value>Icon</value>
    <comment>DisplayName for DomainProperty &apos;Icon&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/CommandId.Description" xml:space="preserve">
    <value>The command to execute when the menu is clicked.</value>
    <comment>Description for DomainProperty &apos;CommandId&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/CommandId.DisplayName" xml:space="preserve">
    <value>Command</value>
    <comment>DisplayName for DomainProperty &apos;CommandId&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/CustomStatus.Description" xml:space="preserve">
    <value>An optional type that provides dynamic menu status updates for this menu.</value>
    <comment>Description for DomainProperty &apos;CustomStatus&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/CustomStatus.DisplayName" xml:space="preserve">
    <value>Status Provider</value>
    <comment>DisplayName for DomainProperty &apos;CustomStatus&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/WizardId.Description" xml:space="preserve">
    <value>A wizard to gather input from the user, that configures the properties of this element, when the menu is clicked.</value>
    <comment>Description for DomainProperty &apos;WizardId&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/WizardId.DisplayName" xml:space="preserve">
    <value>Wizard</value>
    <comment>DisplayName for DomainProperty &apos;WizardId&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/SortOrder.Description" xml:space="preserve">
    <value>A number that orders this menu item with others on the context menu.</value>
    <comment>Description for DomainProperty &apos;SortOrder&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.MenuSettings/SortOrder.DisplayName" xml:space="preserve">
    <value>Menu Order</value>
    <comment>DisplayName for DomainProperty &apos;SortOrder&apos; on DomainClass &apos;MenuSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension.Description" xml:space="preserve">
    <value>Configures the settings for associating guidance to this element.</value>
    <comment>Description for DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension.DisplayName" xml:space="preserve">
    <value>Guidance Extension</value>
    <comment>DisplayName for DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/AssociatedGuidance.Description" xml:space="preserve">
    <value>Configures guidance associated to this element. Expand this property to configure.</value>
    <comment>Description for DomainProperty &apos;AssociatedGuidance&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/AssociatedGuidance.DisplayName" xml:space="preserve">
    <value>Associated Guidance</value>
    <comment>DisplayName for DomainProperty &apos;AssociatedGuidance&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/AssociatedGuidance.Category" xml:space="preserve">
    <value>Guidance</value>
    <comment>Category for DomainProperty &apos;AssociatedGuidance&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceInstanceName.Description" xml:space="preserve">
    <value>The name of the created guidance workflow in the Guidance Explorer. If left blank, the instance name is calculated from the configured default name of the feature extension.</value>
    <comment>Description for DomainProperty &apos;GuidanceInstanceName&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceInstanceName.DisplayName" xml:space="preserve">
    <value>Instance Name</value>
    <comment>DisplayName for DomainProperty &apos;GuidanceInstanceName&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceInstanceName.Category" xml:space="preserve">
    <value>Guidance</value>
    <comment>Category for DomainProperty &apos;GuidanceInstanceName&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceActivateOnCreation.Description" xml:space="preserve">
    <value>Whether to make this guidance the currently selected guidance in Guidance Explorer, when this element is created.</value>
    <comment>Description for DomainProperty &apos;GuidanceActivateOnCreation&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceActivateOnCreation.DisplayName" xml:space="preserve">
    <value>Activate On Creation</value>
    <comment>DisplayName for DomainProperty &apos;GuidanceActivateOnCreation&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceActivateOnCreation.Category" xml:space="preserve">
    <value>Guidance</value>
    <comment>Category for DomainProperty &apos;GuidanceActivateOnCreation&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceFeatureId.Description" xml:space="preserve">
    <value>The identifier of the feature extension associated to this element. This is the VSIX ID of the Feature Extension, found in the source.extension.vsixmanifest file in the feature extension project.</value>
    <comment>Description for DomainProperty &apos;GuidanceFeatureId&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceFeatureId.DisplayName" xml:space="preserve">
    <value>Feature Id</value>
    <comment>DisplayName for DomainProperty &apos;GuidanceFeatureId&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceFeatureId.Category" xml:space="preserve">
    <value>Guidance</value>
    <comment>Category for DomainProperty &apos;GuidanceFeatureId&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceSharedInstance.Description" xml:space="preserve">
    <value>Whether a single guidance instance is shared between all instances of this element, or a separate instance of guidance is created for each instance of this element.</value>
    <comment>Description for DomainProperty &apos;GuidanceSharedInstance&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceSharedInstance.DisplayName" xml:space="preserve">
    <value>Shared Instance</value>
    <comment>DisplayName for DomainProperty &apos;GuidanceSharedInstance&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.GuidanceExtension/GuidanceSharedInstance.Category" xml:space="preserve">
    <value>Guidance</value>
    <comment>Category for DomainProperty &apos;GuidanceSharedInstance&apos; on DomainClass &apos;GuidanceExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.WizardSettings.Description" xml:space="preserve">
    <value>Configures the settings for adding a wizard to gather and initialize data for properties on this element.</value>
    <comment>Description for DomainClass &apos;WizardSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.WizardSettings.DisplayName" xml:space="preserve">
    <value>Wizard</value>
    <comment>DisplayName for DomainClass &apos;WizardSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.WizardSettings/TypeName.Description" xml:space="preserve">
    <value>The type name of the wizard. </value>
    <comment>Description for DomainProperty &apos;TypeName&apos; on DomainClass &apos;WizardSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.WizardSettings/TypeName.DisplayName" xml:space="preserve">
    <value>Wizard Type</value>
    <comment>DisplayName for DomainProperty &apos;TypeName&apos; on DomainClass &apos;WizardSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension.Description" xml:space="preserve">
    <value>Configures settings for managing associated artifacts to this element.</value>
    <comment>Description for DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension.DisplayName" xml:space="preserve">
    <value>Artifact Extension</value>
    <comment>DisplayName for DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/AssociatedArtifacts.Description" xml:space="preserve">
    <value>Configures actions for working with solution items associated with this element. Expand this property to configure.</value>
    <comment>Description for DomainProperty &apos;AssociatedArtifacts&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/AssociatedArtifacts.DisplayName" xml:space="preserve">
    <value>Associated Solution Items</value>
    <comment>DisplayName for DomainProperty &apos;AssociatedArtifacts&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/AssociatedArtifacts.Category" xml:space="preserve">
    <value>Solution Items</value>
    <comment>Category for DomainProperty &apos;AssociatedArtifacts&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/OnArtifactActivation.Description" xml:space="preserve">
    <value>The action to perform on associated solution items, when this element is &apos;activated&apos; by the user (i.e. double-clicked). A value of &apos;Open&apos; will open the solution item in its default view, a value of &apos;Select&apos; will select the item in &apos;Solution Explorer&apos;.</value>
    <comment>Description for DomainProperty &apos;OnArtifactActivation&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/OnArtifactActivation.DisplayName" xml:space="preserve">
    <value>On Activation</value>
    <comment>DisplayName for DomainProperty &apos;OnArtifactActivation&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/OnArtifactActivation.Category" xml:space="preserve">
    <value>Solution Items</value>
    <comment>Category for DomainProperty &apos;OnArtifactActivation&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/OnArtifactDeletion.Description" xml:space="preserve">
    <value>The action to perform on associated solution items, when this element is &apos;deleted&apos; by the user. A value of &apos;DeleteAll&apos; will automatically delete all associated solution items, a value of &apos;PromptUser&apos; prompt the user to select which solution items to delete.</value>
    <comment>Description for DomainProperty &apos;OnArtifactDeletion&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/OnArtifactDeletion.DisplayName" xml:space="preserve">
    <value>On Deletion</value>
    <comment>DisplayName for DomainProperty &apos;OnArtifactDeletion&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactExtension/OnArtifactDeletion.Category" xml:space="preserve">
    <value>Solution Items</value>
    <comment>Category for DomainProperty &apos;OnArtifactDeletion&apos; on DomainClass &apos;ArtifactExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension.Description" xml:space="preserve">
    <value>Configures settings for managing validation of this element.</value>
    <comment>Description for DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension.DisplayName" xml:space="preserve">
    <value>Validation Extension</value>
    <comment>DisplayName for DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationExecution.Description" xml:space="preserve">
    <value>Configures actions for validating this element. Expand this property to configure.</value>
    <comment>Description for DomainProperty &apos;ValidationExecution&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationExecution.DisplayName" xml:space="preserve">
    <value>Validation Execution</value>
    <comment>DisplayName for DomainProperty &apos;ValidationExecution&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationExecution.Category" xml:space="preserve">
    <value>Validation</value>
    <comment>Category for DomainProperty &apos;ValidationExecution&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnBuild.Description" xml:space="preserve">
    <value>Whether to validate the current element and all its descendants on build of the solution. (OnBuildStarted event).</value>
    <comment>Description for DomainProperty &apos;ValidationOnBuild&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnBuild.DisplayName" xml:space="preserve">
    <value>On Build</value>
    <comment>DisplayName for DomainProperty &apos;ValidationOnBuild&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnBuild.Category" xml:space="preserve">
    <value>Validation</value>
    <comment>Category for DomainProperty &apos;ValidationOnBuild&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnSave.Description" xml:space="preserve">
    <value>Whether to validate the current element and all its descendants on save of the product. (OnProductStoreSaved event).</value>
    <comment>Description for DomainProperty &apos;ValidationOnSave&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnSave.DisplayName" xml:space="preserve">
    <value>On Save</value>
    <comment>DisplayName for DomainProperty &apos;ValidationOnSave&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnSave.Category" xml:space="preserve">
    <value>Validation</value>
    <comment>Category for DomainProperty &apos;ValidationOnSave&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnMenu.Description" xml:space="preserve">
    <value>Whether to provide a menu to execute validation on this element and all its descendants. (&apos;Validate All&apos; menu item).</value>
    <comment>Description for DomainProperty &apos;ValidationOnMenu&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnMenu.DisplayName" xml:space="preserve">
    <value>On Menu</value>
    <comment>DisplayName for DomainProperty &apos;ValidationOnMenu&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnMenu.Category" xml:space="preserve">
    <value>Validation</value>
    <comment>Category for DomainProperty &apos;ValidationOnMenu&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnCustomEvent.Description" xml:space="preserve">
    <value>A custom event to execute validation on the current element and all its descendants.</value>
    <comment>Description for DomainProperty &apos;ValidationOnCustomEvent&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnCustomEvent.DisplayName" xml:space="preserve">
    <value>On Custom Event</value>
    <comment>DisplayName for DomainProperty &apos;ValidationOnCustomEvent&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ValidationExtension/ValidationOnCustomEvent.Category" xml:space="preserve">
    <value>Validation</value>
    <comment>Category for DomainProperty &apos;ValidationOnCustomEvent&apos; on DomainClass &apos;ValidationExtension&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings.Description" xml:space="preserve">
    <value>Configures settings for handling a drag drop operations on this element.</value>
    <comment>Description for DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings.DisplayName" xml:space="preserve">
    <value>Drag Drop Launch Point</value>
    <comment>DisplayName for DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/CommandId.Description" xml:space="preserve">
    <value>The command to execute when valid data is dropped on instances of this element.</value>
    <comment>Description for DomainProperty &apos;CommandId&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/CommandId.DisplayName" xml:space="preserve">
    <value>Drop Command</value>
    <comment>DisplayName for DomainProperty &apos;CommandId&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/DropConditions.Description" xml:space="preserve">
    <value>The conditions that determine whether the data being dragged over instances of this element is permitted for dropping.</value>
    <comment>Description for DomainProperty &apos;DropConditions&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/DropConditions.DisplayName" xml:space="preserve">
    <value>Drop Conditions</value>
    <comment>DisplayName for DomainProperty &apos;DropConditions&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/WizardId.Description" xml:space="preserve">
    <value>A wizard to gather input from the user, that configures the properties of this element, when dragged data is dropped on instances of this element.</value>
    <comment>Description for DomainProperty &apos;WizardId&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/WizardId.DisplayName" xml:space="preserve">
    <value>Wizard</value>
    <comment>DisplayName for DomainProperty &apos;WizardId&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/StatusText.Description" xml:space="preserve">
    <value>Informative message to display in Visual Studio&apos;s status bar when data is being dragged over instances of this element.</value>
    <comment>Description for DomainProperty &apos;StatusText&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.DragDropSettings/StatusText.DisplayName" xml:space="preserve">
    <value>Status Text</value>
    <comment>DisplayName for DomainProperty &apos;StatusText&apos; on DomainClass &apos;DragDropSettings&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactActivatedAction/None.DisplayName" xml:space="preserve">
    <value>None</value>
    <comment>Display name for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;ArtifactActivatedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactActivatedAction/None.Description" xml:space="preserve">
    <value>No action is performed, activated items are neither opened nor selected.</value>
    <comment>Description for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;ArtifactActivatedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactActivatedAction/Open.DisplayName" xml:space="preserve">
    <value>Open</value>
    <comment>Display name for EnumerationLiteral &apos;Open&apos; on DomainEnumeration &apos;ArtifactActivatedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactActivatedAction/Open.Description" xml:space="preserve">
    <value>Associated artifacts are opened, in their default view.</value>
    <comment>Description for EnumerationLiteral &apos;Open&apos; on DomainEnumeration &apos;ArtifactActivatedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactActivatedAction/Select.DisplayName" xml:space="preserve">
    <value>Select</value>
    <comment>Display name for EnumerationLiteral &apos;Select&apos; on DomainEnumeration &apos;ArtifactActivatedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactActivatedAction/Select.Description" xml:space="preserve">
    <value>Associated artifacts are selected in Solution Explorer.</value>
    <comment>Description for EnumerationLiteral &apos;Select&apos; on DomainEnumeration &apos;ArtifactActivatedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactDeletedAction/None.DisplayName" xml:space="preserve">
    <value>None</value>
    <comment>Display name for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;ArtifactDeletedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactDeletedAction/None.Description" xml:space="preserve">
    <value>No action is performed, associated solution items are not deleted from the solution.</value>
    <comment>Description for EnumerationLiteral &apos;None&apos; on DomainEnumeration &apos;ArtifactDeletedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactDeletedAction/DeleteAll.DisplayName" xml:space="preserve">
    <value>DeleteAll</value>
    <comment>Display name for EnumerationLiteral &apos;DeleteAll&apos; on DomainEnumeration &apos;ArtifactDeletedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactDeletedAction/DeleteAll.Description" xml:space="preserve">
    <value>All associated solution items are deleted automatically.</value>
    <comment>Description for EnumerationLiteral &apos;DeleteAll&apos; on DomainEnumeration &apos;ArtifactDeletedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactDeletedAction/PromptUser.DisplayName" xml:space="preserve">
    <value>PromptUser</value>
    <comment>Display name for EnumerationLiteral &apos;PromptUser&apos; on DomainEnumeration &apos;ArtifactDeletedAction&apos;</comment>
  </data>
  <data name="NuPattern.Library.Automation.ArtifactDeletedAction/PromptUser.Description" xml:space="preserve">
    <value>The user is prompted to select which associated solution items to delete.</value>
    <comment>Description for EnumerationLiteral &apos;PromptUser&apos; on DomainEnumeration &apos;ArtifactDeletedAction&apos;</comment>
  </data>
  <data name="UnrecognizedElementType" xml:space="preserve">
    <value>ElementType {0} is not recognized as a type of domain class which belongs to this domain model.</value>
    <comment>Incorrect ElementType passed in to Model.CreateElement method</comment>
  </data>
  <data name="UnrecognizedElementLinkType" xml:space="preserve">
    <value>ElementLinkType {0} is not recognized as a type of domain relationship which belongs to this domain model.</value>
    <comment>Incorrect ElementLinkType passed in to Model.CreateElementLink method</comment>
  </data>
  <data name="AmbiguousSchema" xml:space="preserve">
    <value>More than one schema found for target namespace &apos;{0}&apos;, use the first one at &apos;{1}&apos;.</value>
    <comment>Serialization Warning: AmbiguousSchema</comment>
  </data>
  <data name="ExpectingFullFormRelationship" xml:space="preserve">
    <value>Element &apos;{0}&apos; is treated as the target role-player of a relationship &apos;{1}&apos; instance, which should be serialized in full-form.</value>
    <comment>Serialization Warning: ExpectingFullFormRelationship</comment>
  </data>
  <data name="ExpectingShortFormRelationship" xml:space="preserve">
    <value>Instances of relationship &apos;{0}&apos; should be serialized in short-form.</value>
    <comment>Serialization Warning: ExpectingShortFormRelationship</comment>
  </data>
  <data name="IgnoredPropertyValue" xml:space="preserve">
    <value>Invalid property value &apos;{0}&apos; for property &apos;{1}&apos; with type &apos;{2}&apos;, ignored.</value>
    <comment>Serialization Warning: IgnoredPropertyValue</comment>
  </data>
  <data name="MissingId" xml:space="preserve">
    <value>Missing &apos;Id&apos; attribute, a new Guid &apos;{0}&apos; is auto-generated.</value>
    <comment>Serialization Warning: MissingId</comment>
  </data>
  <data name="MonikerResolvedToDuplicateLink" xml:space="preserve">
    <value>Resolving moniker &apos;{0}&apos; causes a duplicate link to be created, so the link and the moniker are ignored.</value>
    <comment>Serialization Warning: MonikerResolvedToDuplicateLink</comment>
  </data>
  <data name="NoSchema" xml:space="preserve">
    <value>Cannot find a schema that defines target namespace &apos;{0}&apos;, schema validation skipped.</value>
    <comment>Serialization Warning: NoSchema</comment>
  </data>
  <data name="UnexpectedXmlElement" xml:space="preserve">
    <value>Unexpected XML element &apos;{0}&apos;, ignored.</value>
    <comment>Serialization Warning: UnexpectedXmlElement</comment>
  </data>
  <data name="AmbiguousMoniker" xml:space="preserve">
    <value>Ambiguous moniker &apos;{0}&apos; encountered. It is used for both &apos;{1}&apos; and &apos;{2}&apos;.</value>
    <comment>Serialization Error: AmbiguousMoniker</comment>
  </data>
  <data name="CannotMonikerizeElement" xml:space="preserve">
    <value>Instances of DomainClass &apos;{0}&apos; cannot be serialized as a moniker.
A DomainClass can be serialized as a moniker only if 
1) it has a defined/inherited DomainProperty marked as IsMonikerKey=true, or 
2) it is marked/inherited with SerializeId=true.</value>
    <comment>Serialization Error: CannotMonikerizeElement</comment>
  </data>
  <data name="CannotOpenDocument" xml:space="preserve">
    <value>Error encountered, check Error List window for details.</value>
    <comment>Serialization Error: CannotOpenDocument</comment>
  </data>
  <data name="CannotSaveDocument" xml:space="preserve">
    <value>Error encountered, check Error List window for details.</value>
    <comment>Serialization Error: CannotSaveDocument</comment>
  </data>
  <data name="DanglingRelationship" xml:space="preserve">
    <value>Relationship &apos;{0}&apos; instance is missing target role-player.</value>
    <comment>Serialization Error: DanglingRelationship</comment>
  </data>
  <data name="InvalidPropertyValue" xml:space="preserve">
    <value>Invalid property value &apos;{0}&apos; for property &apos;{1}&apos; with type &apos;{2}&apos;.</value>
    <comment>Serialization Error: InvalidPropertyValue</comment>
  </data>
  <data name="MissingMoniker" xml:space="preserve">
    <value>Missing moniker. A moniker is expected in attribute &apos;{0}&apos;.</value>
    <comment>Serialization Error: MissingMoniker</comment>
  </data>
  <data name="MissingTransaction" xml:space="preserve">
    <value>This must be called within the context of an active transaction.</value>
    <comment>Serialization Error: MissingTransaction</comment>
  </data>
  <data name="UnresolvedMoniker" xml:space="preserve">
    <value>Cannot resolve moniker &apos;{0}&apos;.</value>
    <comment>Serialization Error: UnresolvedMoniker</comment>
  </data>
  <data name="VersionMismatch" xml:space="preserve">
    <value>Unsupported version &apos;{0}&apos;, can only support &apos;{1}&apos;.</value>
    <comment>Serialization Error: VersionMismatch</comment>
  </data>
  <data name="CannotCloseExistingDiagramDocument" xml:space="preserve">
    <value>Diagram file &apos;{0}&apos; cannot be closed.</value>
    <comment>User cancel closing diagram file. Hence, the DSL model file cannot be opened</comment>
  </data>
  <data name="BindingErrorOccurred" xml:space="preserve">
    <value>Extensions for this designer may not be found as a MEF binding error has occurred. The error that occurred was:
{0}</value>
    <comment>MEF binding error occurred - exception message being logged in the error window so the user is aware.</comment>
  </data>
  <data name="InvalidSaveRootElementType" xml:space="preserve">
    <value>&apos;{0}&apos; is not a valid root element type.</value>
    <comment>Exception message used if an invalid root element type is passed to IDomainModelSerializer.SaveModel / SaveModelAndDiagram</comment>
  </data>
  <data name="InvalidSaveDiagramType" xml:space="preserve">
    <value>&apos;{0}&apos; is not a valid diagram type.</value>
    <comment>Exception message used if an invalid diagram type is passed to IDomainModelSerializer.SaveModelAndDiagram</comment>
  </data>
  <data name="MinimumMultiplicityMissingLink" xml:space="preserve">
    <value>{0} {1} has no {2}.</value>
    <comment>Multiplicity underflow validation.</comment>
  </data>
  <data name="SaveOperationCancelled" xml:space="preserve">
    <value>Save operation cancelled.</value>
    <comment>Message when save is cancelled on validation errors</comment>
  </data>
  <data name="SaveValidationFailed" xml:space="preserve">
    <value>There were validation errors, continue save?</value>
    <comment>Message when validation errors are found on save</comment>
  </data>
  <data name="UnloadableSaveValidationFailed" xml:space="preserve">
    <value>There were validation errors. Continuing to save may cause the file to become unloadable, do you want to continue?</value>
    <comment>Message when validation errors are found on save that will cause file to become unloadable</comment>
  </data>
</root>


