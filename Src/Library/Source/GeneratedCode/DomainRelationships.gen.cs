//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.VisualStudio.Patterning.Library.Automation
{
	/// <summary>
	/// DomainRelationship PropertySettingsHasValueProvider
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("da7276bc-f8a3-471d-9c13-2272264c49be")]
	public partial class PropertySettingsHasValueProvider : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PropertySettingsHasValueProvider domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda7276bc, 0xf8a3, 0x471d, 0x9c, 0x13, 0x22, 0x72, 0x26, 0x4c, 0x49, 0xbe);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PropertySettingsHasValueProvider link in the same Partition as the given PropertySettings
		/// </summary>
		/// <param name="source">PropertySettings to use as the source of the relationship.</param>
		/// <param name="target">ValueProviderSettings to use as the target of the relationship.</param>
		public PropertySettingsHasValueProvider(PropertySettings source, ValueProviderSettings target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PropertySettingsHasValueProvider.PropertySettingsDomainRoleId, source), new DslModeling::RoleAssignment(PropertySettingsHasValueProvider.ValueProviderSettingsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PropertySettingsHasValueProvider(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PropertySettingsHasValueProvider(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PropertySettingsHasValueProvider(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PropertySettingsHasValueProvider(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PropertySettings domain role code
		
		/// <summary>
		/// PropertySettings domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertySettingsDomainRoleId = new global::System.Guid(0xd6ca83ae, 0xf203, 0x48a8, 0xa5, 0xa0, 0x53, 0x4c, 0x7a, 0x88, 0x47, 0xcd);
		
		/// <summary>
		/// DomainRole PropertySettings
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.PropertySettings
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider/PropertySettings.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider/PropertySettings.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ValueProvider", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider/PropertySettings.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("d6ca83ae-f203-48a8-a5a0-534c7a8847cd")]
		public virtual PropertySettings PropertySettings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertySettings)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertySettingsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertySettingsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access OwnerProperty of a ValueProviderSettings
		/// <summary>
		/// Gets OwnerProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static PropertySettings GetOwnerProperty(ValueProviderSettings element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ValueProviderSettingsDomainRoleId) as PropertySettings;
		}
		
		/// <summary>
		/// Sets OwnerProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOwnerProperty(ValueProviderSettings element, PropertySettings newPropertySettings)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ValueProviderSettingsDomainRoleId, newPropertySettings);
		}
		#endregion
		#region ValueProviderSettings domain role code
		
		/// <summary>
		/// ValueProviderSettings domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueProviderSettingsDomainRoleId = new global::System.Guid(0x605c7185, 0x04d8, 0x4233, 0xa8, 0x65, 0x69, 0xf2, 0xe5, 0x21, 0x66, 0x7e);
		
		/// <summary>
		/// DomainRole ValueProviderSettings
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.ValueProviderSettings
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider/ValueProviderSettings.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider/ValueProviderSettings.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "OwnerProperty", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider/ValueProviderSettings.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("605c7185-04d8-4233-a865-69f2e521667e")]
		public virtual ValueProviderSettings ValueProviderSettings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueProviderSettings)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueProviderSettingsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueProviderSettingsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ValueProvider of a PropertySettings
		/// <summary>
		/// Gets ValueProvider.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueProviderSettings GetValueProvider(PropertySettings element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertySettingsDomainRoleId) as ValueProviderSettings;
		}
		
		/// <summary>
		/// Sets ValueProvider.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetValueProvider(PropertySettings element, ValueProviderSettings newValueProviderSettings)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertySettingsDomainRoleId, newValueProviderSettings);
		}
		#endregion
		#region PropertySettings link accessor
		/// <summary>
		/// Get the PropertySettingsHasValueProvider link to a PropertySettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider GetLinkToValueProvider (global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings propertySettingsInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider>(propertySettingsInstance, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.PropertySettingsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PropertySettings not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueProviderSettings link accessor
		/// <summary>
		/// Get the PropertySettingsHasValueProvider link to a ValueProviderSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider GetLinkToOwnerProperty (global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettings valueProviderSettingsInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider>(valueProviderSettingsInstance, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.ValueProviderSettingsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ValueProviderSettings not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PropertySettingsHasValueProvider instance accessors
		
		/// <summary>
		/// Get any PropertySettingsHasValueProvider links between a given PropertySettings and a ValueProviderSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider> GetLinks( global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings source, global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettings target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider>(source, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.PropertySettingsDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider link in links )
			{
				if ( target.Equals(link.ValueProviderSettings) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PropertySettingsHasValueProvider link between a given PropertySettingsand a ValueProviderSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider GetLink( global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings source, global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettings target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider>(source, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider.PropertySettingsDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettingsHasValueProvider link in links )
			{
				if ( target.Equals(link.ValueProviderSettings) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Library.Automation
{
	/// <summary>
	/// DomainRelationship ValueProviderSettingsReferencesProperties
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f1c21f7d-ff90-42a2-bacf-deef2c7411f0")]
	public partial class ValueProviderSettingsReferencesProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ValueProviderSettingsReferencesProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf1c21f7d, 0xff90, 0x42a2, 0xba, 0xcf, 0xde, 0xef, 0x2c, 0x74, 0x11, 0xf0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ValueProviderSettingsReferencesProperties link in the same Partition as the given ValueProviderSettings
		/// </summary>
		/// <param name="source">ValueProviderSettings to use as the source of the relationship.</param>
		/// <param name="target">PropertySettings to use as the target of the relationship.</param>
		public ValueProviderSettingsReferencesProperties(ValueProviderSettings source, PropertySettings target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ValueProviderSettingsReferencesProperties.ValueProviderSettingsDomainRoleId, source), new DslModeling::RoleAssignment(ValueProviderSettingsReferencesProperties.PropertySettingsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueProviderSettingsReferencesProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueProviderSettingsReferencesProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ValueProviderSettingsReferencesProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ValueProviderSettingsReferencesProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ValueProviderSettings domain role code
		
		/// <summary>
		/// ValueProviderSettings domain role Id.
		/// </summary>
		public static readonly global::System.Guid ValueProviderSettingsDomainRoleId = new global::System.Guid(0xf544718c, 0xe9c6, 0x49f6, 0xbc, 0x0e, 0xab, 0x01, 0x87, 0x8c, 0x0c, 0x2e);
		
		/// <summary>
		/// DomainRole ValueProviderSettings
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.ValueProviderSettings
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties/ValueProviderSettings.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties/ValueProviderSettings.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties/ValueProviderSettings.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f544718c-e9c6-49f6-bc0e-ab01878c0c2e")]
		public virtual ValueProviderSettings ValueProviderSettings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ValueProviderSettings)DslModeling::DomainRoleInfo.GetRolePlayer(this, ValueProviderSettingsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ValueProviderSettingsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ParentProvider of a PropertySettings
		/// <summary>
		/// Gets ParentProvider.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ValueProviderSettings GetParentProvider(PropertySettings element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertySettingsDomainRoleId) as ValueProviderSettings;
		}
		
		/// <summary>
		/// Sets ParentProvider.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetParentProvider(PropertySettings element, ValueProviderSettings newValueProviderSettings)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertySettingsDomainRoleId, newValueProviderSettings);
		}
		#endregion
		#region PropertySettings domain role code
		
		/// <summary>
		/// PropertySettings domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertySettingsDomainRoleId = new global::System.Guid(0xe1bda564, 0xc196, 0x48d6, 0xb8, 0xed, 0x0d, 0x0b, 0xb1, 0xdd, 0x82, 0xd9);
		
		/// <summary>
		/// DomainRole PropertySettings
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.PropertySettings
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties/PropertySettings.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties/PropertySettings.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ParentProvider", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties/PropertySettings.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("e1bda564-c196-48d6-b8ed-0d0bb1dd82d9")]
		public virtual PropertySettings PropertySettings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertySettings)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertySettingsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertySettingsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a ValueProviderSettings
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PropertySettings> GetProperties(ValueProviderSettings element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PropertySettings>, PropertySettings>(element, ValueProviderSettingsDomainRoleId);
		}
		#endregion
		#region ValueProviderSettings link accessor
		/// <summary>
		/// Get the list of ValueProviderSettingsReferencesProperties links to a ValueProviderSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties> GetLinksToProperties ( global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettings valueProviderSettingsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties>(valueProviderSettingsInstance, global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.ValueProviderSettingsDomainRoleId);
		}
		#endregion
		#region PropertySettings link accessor
		/// <summary>
		/// Get the ValueProviderSettingsReferencesProperties link to a PropertySettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties GetLinkToParentProvider (global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings propertySettingsInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties>(propertySettingsInstance, global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.PropertySettingsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PropertySettings not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ValueProviderSettingsReferencesProperties instance accessors
		
		/// <summary>
		/// Get any ValueProviderSettingsReferencesProperties links between a given ValueProviderSettings and a PropertySettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties> GetLinks( global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettings source, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties>(source, global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.ValueProviderSettingsDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties link in links )
			{
				if ( target.Equals(link.PropertySettings) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ValueProviderSettingsReferencesProperties link between a given ValueProviderSettingsand a PropertySettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties GetLink( global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettings source, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties>(source, global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties.ValueProviderSettingsDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Library.Automation.ValueProviderSettingsReferencesProperties link in links )
			{
				if ( target.Equals(link.PropertySettings) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Library.Automation
{
	/// <summary>
	/// DomainRelationship CommandSettingsHasProperties
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a6a80f96-3fb8-4523-b9f0-a57bcceda592")]
	public partial class CommandSettingsHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommandSettingsHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6a80f96, 0x3fb8, 0x4523, 0xb9, 0xf0, 0xa5, 0x7b, 0xcc, 0xed, 0xa5, 0x92);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommandSettingsHasProperties link in the same Partition as the given CommandSettings
		/// </summary>
		/// <param name="source">CommandSettings to use as the source of the relationship.</param>
		/// <param name="target">PropertySettings to use as the target of the relationship.</param>
		public CommandSettingsHasProperties(CommandSettings source, PropertySettings target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommandSettingsHasProperties.CommandSettingsDomainRoleId, source), new DslModeling::RoleAssignment(CommandSettingsHasProperties.PropertySettingsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandSettingsHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandSettingsHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandSettingsHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandSettingsHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CommandSettings domain role code
		
		/// <summary>
		/// CommandSettings domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandSettingsDomainRoleId = new global::System.Guid(0xb78a78b0, 0x9e86, 0x4825, 0x90, 0xd5, 0xc6, 0x7b, 0x36, 0xb1, 0x57, 0x52);
		
		/// <summary>
		/// DomainRole CommandSettings
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.CommandSettings
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties/CommandSettings.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties/CommandSettings.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties/CommandSettings.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b78a78b0-9e86-4825-90d5-c67b36b15752")]
		public virtual CommandSettings CommandSettings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CommandSettings)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandSettingsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandSettingsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CommandSettings of a PropertySettings
		/// <summary>
		/// Gets CommandSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CommandSettings GetCommandSettings(PropertySettings element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertySettingsDomainRoleId) as CommandSettings;
		}
		
		/// <summary>
		/// Sets CommandSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCommandSettings(PropertySettings element, CommandSettings newCommandSettings)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertySettingsDomainRoleId, newCommandSettings);
		}
		#endregion
		#region PropertySettings domain role code
		
		/// <summary>
		/// PropertySettings domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertySettingsDomainRoleId = new global::System.Guid(0x7e084d9a, 0xd60a, 0x45b2, 0x80, 0x7b, 0x5c, 0xfa, 0x2d, 0x8b, 0x72, 0x8a);
		
		/// <summary>
		/// DomainRole PropertySettings
		/// Description for
		/// Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.PropertySettings
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties/PropertySettings.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties/PropertySettings.Description", typeof(global::Microsoft.VisualStudio.Patterning.Library.Automation.LibraryDomainModel), "Microsoft.VisualStudio.Patterning.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CommandSettings", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties/PropertySettings.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7e084d9a-d60a-45b2-807b-5cfa2d8b728a")]
		public virtual PropertySettings PropertySettings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertySettings)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertySettingsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertySettingsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a CommandSettings
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<PropertySettings> GetProperties(CommandSettings element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PropertySettings>, PropertySettings>(element, CommandSettingsDomainRoleId);
		}
		#endregion
		#region CommandSettings link accessor
		/// <summary>
		/// Get the list of CommandSettingsHasProperties links to a CommandSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties> GetLinksToProperties ( global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettings commandSettingsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties>(commandSettingsInstance, global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.CommandSettingsDomainRoleId);
		}
		#endregion
		#region PropertySettings link accessor
		/// <summary>
		/// Get the CommandSettingsHasProperties link to a PropertySettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties GetLinkToCommandSettings (global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings propertySettingsInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties>(propertySettingsInstance, global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.PropertySettingsDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PropertySettings not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CommandSettingsHasProperties instance accessors
		
		/// <summary>
		/// Get any CommandSettingsHasProperties links between a given CommandSettings and a PropertySettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties> GetLinks( global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettings source, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties>(source, global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.CommandSettingsDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties link in links )
			{
				if ( target.Equals(link.PropertySettings) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommandSettingsHasProperties link between a given CommandSettingsand a PropertySettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties GetLink( global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettings source, global::Microsoft.VisualStudio.Patterning.Library.Automation.PropertySettings target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties>(source, global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties.CommandSettingsDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Library.Automation.CommandSettingsHasProperties link in links )
			{
				if ( target.Equals(link.PropertySettings) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
