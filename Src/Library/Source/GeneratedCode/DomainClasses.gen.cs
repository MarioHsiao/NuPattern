//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass TemplateSettings
	/// Configures the settings for adding a project or item template to unfold, and
	/// execute other automation on this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("1d522a01-5d23-4d87-8493-dfcbe3d05a9b")]
	internal partial class TemplateSettings : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TemplateSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1d522a01, 0x5d23, 0x4d87, 0x84, 0x93, 0xdf, 0xcb, 0xe3, 0xd0, 0x5a, 0x9b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TemplateSettings(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TemplateSettings(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TemplateUri domain property code
		
		/// <summary>
		/// TemplateUri domain property Id.
		/// </summary>
		public static readonly global::System.Guid TemplateUriDomainPropertyId = new global::System.Guid(0xcf977d69, 0xf13b, 0x4deb, 0xa6, 0xc7, 0x2a, 0x2e, 0x95, 0x46, 0x37, 0xdc);
		
		/// <summary>
		/// Storage for TemplateUri
		/// </summary>
		private global::System.String templateUriPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TemplateUri domain property.
		/// The project or item template to unfold.
		/// </summary>
		[System.ComponentModel.Editor(typeof(NuPattern.Library.Design.VsTemplateUriEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/TemplateUri.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/TemplateUri.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("cf977d69-f13b-4deb-a6c7-2a2e954637dc")]
		public global::System.String TemplateUri
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return templateUriPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TemplateUriPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.TemplateUri domain property.
		/// </summary>
		internal sealed partial class TemplateUriPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.String>
		{
		    private TemplateUriPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.TemplateUri domain property value handler.
		    /// </summary>
		    public static readonly TemplateUriPropertyHandler Instance = new TemplateUriPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.TemplateUri domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TemplateUriDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.templateUriPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.templateUriPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.TemplateUri);
		    }
		}
		
		#endregion
		#region CreateElementOnUnfold domain property code
		
		/// <summary>
		/// CreateElementOnUnfold domain property Id.
		/// </summary>
		public static readonly global::System.Guid CreateElementOnUnfoldDomainPropertyId = new global::System.Guid(0xcaa696ae, 0x7c70, 0x404b, 0x8b, 0x39, 0x5d, 0xad, 0xf7, 0x19, 0x77, 0x13);
		
		/// <summary>
		/// Storage for CreateElementOnUnfold
		/// </summary>
		private global::System.Boolean createElementOnUnfoldPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of CreateElementOnUnfold domain property.
		/// Whether to create the current element when the template is unfolded from the New
		/// Project/Item dialog in Visual Studio.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/CreateElementOnUnfold.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/CreateElementOnUnfold.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("caa696ae-7c70-404b-8b39-5dadf7197713")]
		public global::System.Boolean CreateElementOnUnfold
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return createElementOnUnfoldPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CreateElementOnUnfoldPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.CreateElementOnUnfold domain property.
		/// </summary>
		internal sealed partial class CreateElementOnUnfoldPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.Boolean>
		{
		    private CreateElementOnUnfoldPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.CreateElementOnUnfold domain property value handler.
		    /// </summary>
		    public static readonly CreateElementOnUnfoldPropertyHandler Instance = new CreateElementOnUnfoldPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.CreateElementOnUnfold domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CreateElementOnUnfoldDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.createElementOnUnfoldPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.createElementOnUnfoldPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.CreateElementOnUnfold);
		    }
		}
		
		#endregion
		#region UnfoldOnElementCreated domain property code
		
		/// <summary>
		/// UnfoldOnElementCreated domain property Id.
		/// </summary>
		public static readonly global::System.Guid UnfoldOnElementCreatedDomainPropertyId = new global::System.Guid(0xfc2057b9, 0xcfab, 0x4dc7, 0x89, 0xdc, 0x15, 0xf0, 0xa6, 0x83, 0x5b, 0x47);
		
		/// <summary>
		/// Storage for UnfoldOnElementCreated
		/// </summary>
		private global::System.Boolean unfoldOnElementCreatedPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of UnfoldOnElementCreated domain property.
		/// Whether to unfold the template when the element is created from the Solution
		/// Builder.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/UnfoldOnElementCreated.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/UnfoldOnElementCreated.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("fc2057b9-cfab-4dc7-89dc-15f0a6835b47")]
		public global::System.Boolean UnfoldOnElementCreated
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return unfoldOnElementCreatedPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        UnfoldOnElementCreatedPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.UnfoldOnElementCreated domain property.
		/// </summary>
		internal sealed partial class UnfoldOnElementCreatedPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.Boolean>
		{
		    private UnfoldOnElementCreatedPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.UnfoldOnElementCreated domain property value handler.
		    /// </summary>
		    public static readonly UnfoldOnElementCreatedPropertyHandler Instance = new UnfoldOnElementCreatedPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.UnfoldOnElementCreated domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return UnfoldOnElementCreatedDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.unfoldOnElementCreatedPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.unfoldOnElementCreatedPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.UnfoldOnElementCreated);
		    }
		}
		
		#endregion
		#region CommandId domain property code
		
		/// <summary>
		/// CommandId domain property Id.
		/// </summary>
		public static readonly global::System.Guid CommandIdDomainPropertyId = new global::System.Guid(0xdd6b1c06, 0xfd31, 0x4685, 0xaa, 0xa4, 0x59, 0xf4, 0xb6, 0x5e, 0xd7, 0xca);
		
		/// <summary>
		/// Storage for CommandId
		/// </summary>
		private global::System.Guid commandIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CommandId domain property.
		/// The command to execute after the template is unfolded.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/CommandId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/CommandId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("dd6b1c06-fd31-4685-aaa4-59f4b65ed7ca")]
		public global::System.Guid CommandId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return commandIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CommandIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.CommandId domain property.
		/// </summary>
		internal sealed partial class CommandIdPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.Guid>
		{
		    private CommandIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.CommandId domain property value handler.
		    /// </summary>
		    public static readonly CommandIdPropertyHandler Instance = new CommandIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.CommandId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CommandIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.commandIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.commandIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.CommandId);
		    }
		}
		
		#endregion
		#region WizardId domain property code
		
		/// <summary>
		/// WizardId domain property Id.
		/// </summary>
		public static readonly global::System.Guid WizardIdDomainPropertyId = new global::System.Guid(0xe3761cb0, 0xad30, 0x4c13, 0x99, 0xec, 0xf5, 0xd8, 0x60, 0x38, 0x28, 0x31);
		
		/// <summary>
		/// Storage for WizardId
		/// </summary>
		private global::System.Guid wizardIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of WizardId domain property.
		/// A wizard to gather input from the user, that configures the properties of this
		/// element, before the template is unfolded.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/WizardId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/WizardId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("e3761cb0-ad30-4c13-99ec-f5d860382831")]
		public global::System.Guid WizardId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return wizardIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        WizardIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.WizardId domain property.
		/// </summary>
		internal sealed partial class WizardIdPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.Guid>
		{
		    private WizardIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.WizardId domain property value handler.
		    /// </summary>
		    public static readonly WizardIdPropertyHandler Instance = new WizardIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.WizardId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return WizardIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.wizardIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.wizardIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.WizardId);
		    }
		}
		
		#endregion
		#region TemplateAuthoringUri domain property code
		
		/// <summary>
		/// TemplateAuthoringUri domain property Id.
		/// </summary>
		public static readonly global::System.Guid TemplateAuthoringUriDomainPropertyId = new global::System.Guid(0x56192f42, 0xcbaf, 0x48e9, 0xa2, 0xeb, 0xf4, 0x49, 0xec, 0x10, 0xe8, 0xff);
		
		/// <summary>
		/// Storage for TemplateAuthoringUri
		/// </summary>
		private global::System.String templateAuthoringUriPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TemplateAuthoringUri domain property.
		/// The Uri to resolve the referenced template at authoring time.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/TemplateAuthoringUri.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/TemplateAuthoringUri.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("56192f42-cbaf-48e9-a2eb-f449ec10e8ff")]
		public global::System.String TemplateAuthoringUri
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return templateAuthoringUriPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TemplateAuthoringUriPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.TemplateAuthoringUri domain property.
		/// </summary>
		internal sealed partial class TemplateAuthoringUriPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.String>
		{
		    private TemplateAuthoringUriPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.TemplateAuthoringUri domain property value handler.
		    /// </summary>
		    public static readonly TemplateAuthoringUriPropertyHandler Instance = new TemplateAuthoringUriPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.TemplateAuthoringUri domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TemplateAuthoringUriDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.templateAuthoringUriPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.templateAuthoringUriPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.TemplateAuthoringUri);
		    }
		}
		
		#endregion
		#region SyncName domain property code
		
		/// <summary>
		/// SyncName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SyncNameDomainPropertyId = new global::System.Guid(0x663a4280, 0x0b38, 0x457e, 0xa4, 0x0c, 0xa6, 0x9a, 0x70, 0xc4, 0xf4, 0x38);
		
		/// <summary>
		/// Storage for SyncName
		/// </summary>
		private global::System.Boolean syncNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SyncName domain property.
		/// Whether to keep in sync the name of the unfolded artifact with the name of the
		/// current element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/SyncName.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/SyncName.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("663a4280-0b38-457e-a40c-a69a70c4f438")]
		public global::System.Boolean SyncName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return syncNamePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        SyncNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.SyncName domain property.
		/// </summary>
		internal sealed partial class SyncNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.Boolean>
		{
		    private SyncNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.SyncName domain property value handler.
		    /// </summary>
		    public static readonly SyncNamePropertyHandler Instance = new SyncNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.SyncName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return SyncNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.syncNamePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.syncNamePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.SyncName);
		    }
		}
		
		#endregion
		#region SanitizeName domain property code
		
		/// <summary>
		/// SanitizeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SanitizeNameDomainPropertyId = new global::System.Guid(0x6e63b903, 0x3320, 0x406e, 0xa3, 0x07, 0x69, 0x6e, 0x4b, 0xb4, 0x8f, 0xa8);
		
		/// <summary>
		/// Storage for SanitizeName
		/// </summary>
		private global::System.Boolean sanitizeNamePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of SanitizeName domain property.
		/// Whether to remove spaces and other illegal characters from the name of the
		/// unfolded artifact.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/SanitizeName.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/SanitizeName.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("6e63b903-3320-406e-a307-696e4bb48fa8")]
		public global::System.Boolean SanitizeName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return sanitizeNamePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        SanitizeNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.SanitizeName domain property.
		/// </summary>
		internal sealed partial class SanitizeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.Boolean>
		{
		    private SanitizeNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.SanitizeName domain property value handler.
		    /// </summary>
		    public static readonly SanitizeNamePropertyHandler Instance = new SanitizeNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.SanitizeName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return SanitizeNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.sanitizeNamePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.sanitizeNamePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.SanitizeName);
		    }
		}
		
		#endregion
		#region RawTargetFileName domain property code
		
		/// <summary>
		/// RawTargetFileName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RawTargetFileNameDomainPropertyId = new global::System.Guid(0xd8c350bd, 0xff83, 0x4000, 0x95, 0xc4, 0x96, 0x1b, 0xef, 0xdb, 0x28, 0x9f);
		
		/// <summary>
		/// Storage for RawTargetFileName
		/// </summary>
		private global::System.String rawTargetFileNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RawTargetFileName domain property.
		/// The name of the unfolded artifact. For an item template, if no extension is
		/// provided, it is taken from the vstemplate file. This property supports property
		/// value substitution from properties on the current element. (e.g. {InstanceName}
		/// or {VariablePropertyName}). See guidance documentation for details.
		/// </summary>
		[NuPattern.ComponentModel.Design.PropertyDescriptor(typeof(NuPattern.Runtime.Bindings.PropertyBindingDescriptor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/RawTargetFileName.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/RawTargetFileName.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("d8c350bd-ff83-4000-95c4-961befdb289f")]
		public global::System.String RawTargetFileName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return rawTargetFileNamePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        RawTargetFileNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.RawTargetFileName domain property.
		/// </summary>
		internal sealed partial class RawTargetFileNamePropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.String>
		{
		    private RawTargetFileNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.RawTargetFileName domain property value handler.
		    /// </summary>
		    public static readonly RawTargetFileNamePropertyHandler Instance = new RawTargetFileNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.RawTargetFileName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return RawTargetFileNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.rawTargetFileNamePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.rawTargetFileNamePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.RawTargetFileName);
		    }
		}
		
		#endregion
		#region RawTargetPath domain property code
		
		/// <summary>
		/// RawTargetPath domain property Id.
		/// </summary>
		public static readonly global::System.Guid RawTargetPathDomainPropertyId = new global::System.Guid(0xe258cc61, 0xf5b7, 0x43fe, 0xa9, 0xa9, 0xe0, 0x8c, 0x73, 0x3c, 0x5c, 0x40);
		
		/// <summary>
		/// Storage for RawTargetPath
		/// </summary>
		private global::System.String rawTargetPathPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RawTargetPath domain property.
		/// The path to the target file, project, folder or solution folder in the current
		/// solution where the artifact is to be unfolded. Folders that don't currently
		/// exist are created automatically. i.e. ..\~\GeneratedCode, navigates up to the
		/// parent element, and traverses the first artifact link found on the parent
		/// element and into the 'GeneratedCode' sub-folder of that container (project or
		/// folder).  See guidance documentation for more example paths and details.
		/// </summary>
		[NuPattern.ComponentModel.Design.PropertyDescriptor(typeof(NuPattern.Runtime.Bindings.PropertyBindingDescriptor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/RawTargetPath.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/RawTargetPath.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("e258cc61-f5b7-43fe-a9a9-e08c733c5c40")]
		public global::System.String RawTargetPath
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return rawTargetPathPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        RawTargetPathPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.RawTargetPath domain property.
		/// </summary>
		internal sealed partial class RawTargetPathPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.String>
		{
		    private RawTargetPathPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.RawTargetPath domain property value handler.
		    /// </summary>
		    public static readonly RawTargetPathPropertyHandler Instance = new RawTargetPathPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.RawTargetPath domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return RawTargetPathDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.rawTargetPathPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.rawTargetPathPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.RawTargetPath);
		    }
		}
		
		#endregion
		#region Tag domain property code
		
		/// <summary>
		/// Tag domain property Id.
		/// </summary>
		public static readonly global::System.Guid TagDomainPropertyId = new global::System.Guid(0x7b2582b2, 0xce44, 0x470b, 0xb1, 0x79, 0xa2, 0xab, 0x92, 0xfd, 0x0e, 0x3b);
		
		/// <summary>
		/// Storage for Tag
		/// </summary>
		private global::System.String tagPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Tag domain property.
		/// An optional arbitrary text value to tag the generated solution item, that is
		/// used as an aid in resolving the artifact reference to the solution item.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.TemplateSettings/Tag.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.TemplateSettings/Tag.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("7b2582b2-ce44-470b-b179-a2ab92fd0e3b")]
		public global::System.String Tag
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return tagPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TagPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the TemplateSettings.Tag domain property.
		/// </summary>
		internal sealed partial class TagPropertyHandler : DslModeling::DomainPropertyValueHandler<TemplateSettings, global::System.String>
		{
		    private TagPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the TemplateSettings.Tag domain property value handler.
		    /// </summary>
		    public static readonly TagPropertyHandler Instance = new TagPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the TemplateSettings.Tag domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TagDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(TemplateSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.tagPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(TemplateSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(TemplateSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.tagPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<TemplateSettings>(x => x.Tag);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass EventSettings
	/// Configures the settings for handling an event for executing other automation on
	/// this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.EventSettings.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.EventSettings.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("d7fce310-a0b0-424c-b439-6e94222544e6")]
	internal partial class EventSettings : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EventSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd7fce310, 0xa0b0, 0x424c, 0xb4, 0x39, 0x6e, 0x94, 0x22, 0x25, 0x44, 0xe6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EventSettings(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EventSettings(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EventId domain property code
		
		/// <summary>
		/// EventId domain property Id.
		/// </summary>
		public static readonly global::System.Guid EventIdDomainPropertyId = new global::System.Guid(0x4564d86b, 0xcf9d, 0x4fa2, 0x9a, 0x11, 0x33, 0x95, 0x96, 0xbd, 0xf6, 0x5c);
		
		/// <summary>
		/// Storage for EventId
		/// </summary>
		private global::System.String eventIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EventId domain property.
		/// The type of event which triggers the command to execute when all conditions are
		/// met.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FeatureComponentTypeConverter<NuPattern.IObservableEvent>))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.EventSettings/EventId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.EventSettings/EventId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("4564d86b-cf9d-4fa2-9a11-339596bdf65c")]
		public global::System.String EventId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return eventIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        EventIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the EventSettings.EventId domain property.
		/// </summary>
		internal sealed partial class EventIdPropertyHandler : DslModeling::DomainPropertyValueHandler<EventSettings, global::System.String>
		{
		    private EventIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the EventSettings.EventId domain property value handler.
		    /// </summary>
		    public static readonly EventIdPropertyHandler Instance = new EventIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the EventSettings.EventId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return EventIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(EventSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.eventIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(EventSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(EventSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.eventIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<EventSettings>(x => x.EventId);
		    }
		}
		
		#endregion
		#region CommandId domain property code
		
		/// <summary>
		/// CommandId domain property Id.
		/// </summary>
		public static readonly global::System.Guid CommandIdDomainPropertyId = new global::System.Guid(0x518bf1de, 0x2542, 0x4099, 0x98, 0x96, 0xc7, 0xa3, 0xb4, 0xc5, 0xc8, 0x24);
		
		/// <summary>
		/// Storage for CommandId
		/// </summary>
		private global::System.Guid commandIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CommandId domain property.
		/// The command to execute on this event.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.EventSettings/CommandId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.EventSettings/CommandId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("518bf1de-2542-4099-9896-c7a3b4c5c824")]
		public global::System.Guid CommandId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return commandIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CommandIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the EventSettings.CommandId domain property.
		/// </summary>
		internal sealed partial class CommandIdPropertyHandler : DslModeling::DomainPropertyValueHandler<EventSettings, global::System.Guid>
		{
		    private CommandIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the EventSettings.CommandId domain property value handler.
		    /// </summary>
		    public static readonly CommandIdPropertyHandler Instance = new CommandIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the EventSettings.CommandId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CommandIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(EventSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.commandIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(EventSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(EventSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.commandIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<EventSettings>(x => x.CommandId);
		    }
		}
		
		#endregion
		#region Conditions domain property code
		
		/// <summary>
		/// Conditions domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionsDomainPropertyId = new global::System.Guid(0xbf026eb8, 0x785b, 0x468a, 0xae, 0x93, 0x3a, 0x41, 0xb1, 0x52, 0xaa, 0xd0);
		
		/// <summary>
		/// Storage for Conditions
		/// </summary>
		private global::System.String conditionsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Conditions domain property.
		/// The conditions that must be satisfied when the event is raised in order to
		/// execute the command.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.EventSettings/Conditions.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.EventSettings/Conditions.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("bf026eb8-785b-468a-ae93-3a41b152aad0")]
		public global::System.String Conditions
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return conditionsPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ConditionsPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the EventSettings.Conditions domain property.
		/// </summary>
		internal sealed partial class ConditionsPropertyHandler : DslModeling::DomainPropertyValueHandler<EventSettings, global::System.String>
		{
		    private ConditionsPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the EventSettings.Conditions domain property value handler.
		    /// </summary>
		    public static readonly ConditionsPropertyHandler Instance = new ConditionsPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the EventSettings.Conditions domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ConditionsDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(EventSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.conditionsPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(EventSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(EventSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.conditionsPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<EventSettings>(x => x.Conditions);
		    }
		}
		
		#endregion
		#region WizardId domain property code
		
		/// <summary>
		/// WizardId domain property Id.
		/// </summary>
		public static readonly global::System.Guid WizardIdDomainPropertyId = new global::System.Guid(0xdfaa6346, 0xfd67, 0x4861, 0x88, 0x14, 0xa1, 0x73, 0x11, 0x42, 0xae, 0xe5);
		
		/// <summary>
		/// Storage for WizardId
		/// </summary>
		private global::System.Guid wizardIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of WizardId domain property.
		/// A wizard to gather input from the user, that configures the properties of this
		/// element, when the event is raised.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.EventSettings/WizardId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.EventSettings/WizardId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("dfaa6346-fd67-4861-8814-a1731142aee5")]
		public global::System.Guid WizardId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return wizardIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        WizardIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the EventSettings.WizardId domain property.
		/// </summary>
		internal sealed partial class WizardIdPropertyHandler : DslModeling::DomainPropertyValueHandler<EventSettings, global::System.Guid>
		{
		    private WizardIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the EventSettings.WizardId domain property value handler.
		    /// </summary>
		    public static readonly WizardIdPropertyHandler Instance = new WizardIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the EventSettings.WizardId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return WizardIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(EventSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.wizardIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(EventSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(EventSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.wizardIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<EventSettings>(x => x.WizardId);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass CommandSettings
	/// Configures the settings for adding a command that can be executed on this
	/// element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.CommandSettings.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.CommandSettings.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("63e8eaf8-6f53-45ea-96f9-b6d8af7276e2")]
	internal partial class CommandSettings : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CommandSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x63e8eaf8, 0x6f53, 0x45ea, 0x96, 0xf9, 0xb6, 0xd8, 0xaf, 0x72, 0x76, 0xe2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommandSettings(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommandSettings(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TypeId domain property code
		
		/// <summary>
		/// TypeId domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeIdDomainPropertyId = new global::System.Guid(0xdc701988, 0xb2bd, 0x4576, 0x97, 0xb6, 0x93, 0x81, 0x30, 0x69, 0x62, 0x0f);
		
		/// <summary>
		/// Storage for TypeId
		/// </summary>
		private global::System.String typeIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TypeId domain property.
		/// The type of the command. Once selected, the specific properties of the selected
		/// command can be configured.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FeatureComponentTypeConverter<Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.IFeatureCommand>))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.CommandSettings/TypeId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.CommandSettings/TypeId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("dc701988-b2bd-4576-97b6-93813069620f")]
		public global::System.String TypeId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return typeIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TypeIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CommandSettings.TypeId domain property.
		/// </summary>
		internal sealed partial class TypeIdPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandSettings, global::System.String>
		{
		    private TypeIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CommandSettings.TypeId domain property value handler.
		    /// </summary>
		    public static readonly TypeIdPropertyHandler Instance = new TypeIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CommandSettings.TypeId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TypeIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CommandSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.typeIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CommandSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CommandSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.typeIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CommandSettings>(x => x.TypeId);
		    }
		}
		
		#endregion
		#region Properties domain property code
		
		/// <summary>
		/// Properties domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertiesDomainPropertyId = new global::System.Guid(0xec625787, 0xee50, 0x4604, 0x9b, 0x1e, 0xde, 0x6f, 0xb5, 0x88, 0x59, 0x8e);
		
		/// <summary>
		/// Storage for Properties
		/// </summary>
		private global::System.String propertiesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Properties domain property.
		/// The design-time properties of the command.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.CommandSettings/Properties.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.CommandSettings/Properties.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("ec625787-ee50-4604-9b1e-de6fb588598e")]
		public global::System.String Properties
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return propertiesPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        PropertiesPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CommandSettings.Properties domain property.
		/// </summary>
		internal sealed partial class PropertiesPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandSettings, global::System.String>
		{
		    private PropertiesPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CommandSettings.Properties domain property value handler.
		    /// </summary>
		    public static readonly PropertiesPropertyHandler Instance = new PropertiesPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CommandSettings.Properties domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return PropertiesDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CommandSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.propertiesPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CommandSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CommandSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.propertiesPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CommandSettings>(x => x.Properties);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass MenuSettings
	/// Configures the settings for adding a context menu item for executing other
	/// automation on this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("29b8619f-8cba-4cdc-98ec-7035d9d2c3f8")]
	internal partial class MenuSettings : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MenuSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x29b8619f, 0x8cba, 0x4cdc, 0x98, 0xec, 0x70, 0x35, 0xd9, 0xd2, 0xc3, 0xf8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MenuSettings(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MenuSettings(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Conditions domain property code
		
		/// <summary>
		/// Conditions domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionsDomainPropertyId = new global::System.Guid(0x42fb25c3, 0x8992, 0x450f, 0xb7, 0x64, 0x70, 0xbf, 0x4d, 0xc2, 0xc8, 0xe5);
		
		/// <summary>
		/// Storage for Conditions
		/// </summary>
		private global::System.String conditionsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Conditions domain property.
		/// The conditions that must be satisfied in order to display the menu.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings/Conditions.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings/Conditions.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("42fb25c3-8992-450f-b764-70bf4dc2c8e5")]
		public global::System.String Conditions
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return conditionsPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ConditionsPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the MenuSettings.Conditions domain property.
		/// </summary>
		internal sealed partial class ConditionsPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuSettings, global::System.String>
		{
		    private ConditionsPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the MenuSettings.Conditions domain property value handler.
		    /// </summary>
		    public static readonly ConditionsPropertyHandler Instance = new ConditionsPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the MenuSettings.Conditions domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ConditionsDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(MenuSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.conditionsPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(MenuSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(MenuSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.conditionsPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<MenuSettings>(x => x.Conditions);
		    }
		}
		
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x37c61fda, 0xacfd, 0x4129, 0xaf, 0x47, 0xff, 0x40, 0x10, 0xb9, 0x87, 0x52);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// The text that is displayed on the menu to the user.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings/Text.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings/Text.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("37c61fda-acfd-4129-af47-ff4010b98752")]
		public global::System.String Text
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return textPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TextPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the MenuSettings.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuSettings, global::System.String>
		{
		    private TextPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the MenuSettings.Text domain property value handler.
		    /// </summary>
		    public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the MenuSettings.Text domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TextDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(MenuSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.textPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(MenuSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(MenuSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.textPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<MenuSettings>(x => x.Text);
		    }
		}
		
		#endregion
		#region Icon domain property code
		
		/// <summary>
		/// Icon domain property Id.
		/// </summary>
		public static readonly global::System.Guid IconDomainPropertyId = new global::System.Guid(0x4b76d211, 0x4350, 0x4cc8, 0x8b, 0xde, 0xc4, 0x95, 0xbe, 0x23, 0x81, 0x13);
		
		/// <summary>
		/// Storage for Icon
		/// </summary>
		private global::System.String iconPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Icon domain property.
		/// The icon that is displayed on the menu to the user.
		/// </summary>
		[NuPattern.Runtime.Design.ImageFilter(NuPattern.Runtime.Design.ImageKind.Image )]
		[System.ComponentModel.Editor(typeof(NuPattern.Runtime.Design.ImageUriEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings/Icon.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings/Icon.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("4b76d211-4350-4cc8-8bde-c495be238113")]
		public global::System.String Icon
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return iconPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IconPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the MenuSettings.Icon domain property.
		/// </summary>
		internal sealed partial class IconPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuSettings, global::System.String>
		{
		    private IconPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the MenuSettings.Icon domain property value handler.
		    /// </summary>
		    public static readonly IconPropertyHandler Instance = new IconPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the MenuSettings.Icon domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IconDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(MenuSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.iconPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(MenuSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(MenuSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.iconPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<MenuSettings>(x => x.Icon);
		    }
		}
		
		#endregion
		#region CommandId domain property code
		
		/// <summary>
		/// CommandId domain property Id.
		/// </summary>
		public static readonly global::System.Guid CommandIdDomainPropertyId = new global::System.Guid(0x0e284967, 0x1ca7, 0x4da6, 0x81, 0xa6, 0xd8, 0x46, 0xa8, 0x7c, 0x67, 0xe4);
		
		/// <summary>
		/// Storage for CommandId
		/// </summary>
		private global::System.Guid commandIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CommandId domain property.
		/// The command to execute when the menu is clicked.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings/CommandId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings/CommandId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("0e284967-1ca7-4da6-81a6-d846a87c67e4")]
		public global::System.Guid CommandId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return commandIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CommandIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the MenuSettings.CommandId domain property.
		/// </summary>
		internal sealed partial class CommandIdPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuSettings, global::System.Guid>
		{
		    private CommandIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the MenuSettings.CommandId domain property value handler.
		    /// </summary>
		    public static readonly CommandIdPropertyHandler Instance = new CommandIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the MenuSettings.CommandId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CommandIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(MenuSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.commandIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(MenuSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(MenuSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.commandIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<MenuSettings>(x => x.CommandId);
		    }
		}
		
		#endregion
		#region CustomStatus domain property code
		
		/// <summary>
		/// CustomStatus domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomStatusDomainPropertyId = new global::System.Guid(0xcabcb4f4, 0xe363, 0x403e, 0x96, 0xda, 0xd0, 0xb6, 0x95, 0xb6, 0x7a, 0x6b);
		
		/// <summary>
		/// Storage for CustomStatus
		/// </summary>
		private global::System.String customStatusPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomStatus domain property.
		/// An optional type that provides dynamic menu status updates for this menu.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FeatureComponentTypeConverter<NuPattern.Runtime.UI.ICommandStatus>))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings/CustomStatus.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings/CustomStatus.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("cabcb4f4-e363-403e-96da-d0b695b67a6b")]
		public global::System.String CustomStatus
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return customStatusPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CustomStatusPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the MenuSettings.CustomStatus domain property.
		/// </summary>
		internal sealed partial class CustomStatusPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuSettings, global::System.String>
		{
		    private CustomStatusPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the MenuSettings.CustomStatus domain property value handler.
		    /// </summary>
		    public static readonly CustomStatusPropertyHandler Instance = new CustomStatusPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the MenuSettings.CustomStatus domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CustomStatusDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(MenuSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.customStatusPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(MenuSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(MenuSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.customStatusPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<MenuSettings>(x => x.CustomStatus);
		    }
		}
		
		#endregion
		#region WizardId domain property code
		
		/// <summary>
		/// WizardId domain property Id.
		/// </summary>
		public static readonly global::System.Guid WizardIdDomainPropertyId = new global::System.Guid(0xe6f5c565, 0x4e97, 0x4e4b, 0x90, 0x54, 0x49, 0xea, 0x14, 0x33, 0x93, 0x79);
		
		/// <summary>
		/// Storage for WizardId
		/// </summary>
		private global::System.Guid wizardIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of WizardId domain property.
		/// A wizard to gather input from the user, that configures the properties of this
		/// element, when the menu is clicked.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings/WizardId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings/WizardId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("e6f5c565-4e97-4e4b-9054-49ea14339379")]
		public global::System.Guid WizardId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return wizardIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        WizardIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the MenuSettings.WizardId domain property.
		/// </summary>
		internal sealed partial class WizardIdPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuSettings, global::System.Guid>
		{
		    private WizardIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the MenuSettings.WizardId domain property value handler.
		    /// </summary>
		    public static readonly WizardIdPropertyHandler Instance = new WizardIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the MenuSettings.WizardId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return WizardIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(MenuSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.wizardIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(MenuSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(MenuSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.wizardIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<MenuSettings>(x => x.WizardId);
		    }
		}
		
		#endregion
		#region SortOrder domain property code
		
		/// <summary>
		/// SortOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortOrderDomainPropertyId = new global::System.Guid(0x0ec79da4, 0xeb1e, 0x4935, 0x81, 0x41, 0x66, 0x83, 0xf4, 0x53, 0xcb, 0x41);
		
		/// <summary>
		/// Storage for SortOrder
		/// </summary>
		private global::System.Int32 sortOrderPropertyStorage = 100;
		
		/// <summary>
		/// Gets or sets the value of SortOrder domain property.
		/// A number that orders this menu item with others on the context menu.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.MenuSettings/SortOrder.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.MenuSettings/SortOrder.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(100)]
		[DslModeling::DomainObjectId("0ec79da4-eb1e-4935-8141-6683f453cb41")]
		public global::System.Int32 SortOrder
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return sortOrderPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        SortOrderPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the MenuSettings.SortOrder domain property.
		/// </summary>
		internal sealed partial class SortOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<MenuSettings, global::System.Int32>
		{
		    private SortOrderPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the MenuSettings.SortOrder domain property value handler.
		    /// </summary>
		    public static readonly SortOrderPropertyHandler Instance = new SortOrderPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the MenuSettings.SortOrder domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return SortOrderDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Int32 GetValue(MenuSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.sortOrderPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(MenuSettings element, global::System.Int32 newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Int32 oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(MenuSettings element, global::System.Int32 oldValue, global::System.Int32 newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.sortOrderPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<MenuSettings>(x => x.SortOrder);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass GuidanceExtension
	/// Configures the settings for associating guidance to this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.GuidanceExtension.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.GuidanceExtension.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("99460d09-2d87-47d5-a6b5-56cbf5d299fd")]
	internal partial class GuidanceExtension : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// GuidanceExtension domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99460d09, 0x2d87, 0x47d5, 0xa6, 0xb5, 0x56, 0xcb, 0xf5, 0xd2, 0x99, 0xfd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GuidanceExtension(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public GuidanceExtension(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AssociatedGuidance domain property code
		
		/// <summary>
		/// AssociatedGuidance domain property Id.
		/// </summary>
		public static readonly global::System.Guid AssociatedGuidanceDomainPropertyId = new global::System.Guid(0xf53044c0, 0xf655, 0x4bed, 0x91, 0x77, 0x4e, 0xe7, 0x1c, 0x65, 0xb4, 0xca);
		
		/// <summary>
		/// Storage for AssociatedGuidance
		/// </summary>
		private global::System.String associatedGuidancePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of AssociatedGuidance domain property.
		/// Configures guidance associated to this element. Expand this property to
		/// configure.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Library.Design.AssociatedGuidanceTypeConverter))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.GuidanceExtension/AssociatedGuidance.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.GuidanceExtension/AssociatedGuidance.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.GuidanceExtension/AssociatedGuidance.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("f53044c0-f655-4bed-9177-4ee71c65b4ca")]
		public global::System.String AssociatedGuidance
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return associatedGuidancePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        AssociatedGuidancePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the GuidanceExtension.AssociatedGuidance domain property.
		/// </summary>
		internal sealed partial class AssociatedGuidancePropertyHandler : DslModeling::DomainPropertyValueHandler<GuidanceExtension, global::System.String>
		{
		    private AssociatedGuidancePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the GuidanceExtension.AssociatedGuidance domain property value handler.
		    /// </summary>
		    public static readonly AssociatedGuidancePropertyHandler Instance = new AssociatedGuidancePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the GuidanceExtension.AssociatedGuidance domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return AssociatedGuidanceDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(GuidanceExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.associatedGuidancePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(GuidanceExtension element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(GuidanceExtension element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.associatedGuidancePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<GuidanceExtension>(x => x.AssociatedGuidance);
		    }
		}
		
		#endregion
		#region GuidanceInstanceName domain property code
		
		/// <summary>
		/// GuidanceInstanceName domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuidanceInstanceNameDomainPropertyId = new global::System.Guid(0x86fdc7a3, 0xd35e, 0x4934, 0x8b, 0xc1, 0xe5, 0x74, 0x37, 0x68, 0x36, 0xbc);
		
		/// <summary>
		/// Storage for GuidanceInstanceName
		/// </summary>
		private global::System.String guidanceInstanceNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of GuidanceInstanceName domain property.
		/// The name of the created guidance workflow in the Guidance Explorer. If left
		/// blank, the instance name is calculated from the configured default name of the
		/// feature extension.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceInstanceName.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceInstanceName.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceInstanceName.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("86fdc7a3-d35e-4934-8bc1-e574376836bc")]
		public global::System.String GuidanceInstanceName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return guidanceInstanceNamePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        GuidanceInstanceNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the GuidanceExtension.GuidanceInstanceName domain property.
		/// </summary>
		internal sealed partial class GuidanceInstanceNamePropertyHandler : DslModeling::DomainPropertyValueHandler<GuidanceExtension, global::System.String>
		{
		    private GuidanceInstanceNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the GuidanceExtension.GuidanceInstanceName domain property value handler.
		    /// </summary>
		    public static readonly GuidanceInstanceNamePropertyHandler Instance = new GuidanceInstanceNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the GuidanceExtension.GuidanceInstanceName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return GuidanceInstanceNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(GuidanceExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.guidanceInstanceNamePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(GuidanceExtension element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(GuidanceExtension element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.guidanceInstanceNamePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<GuidanceExtension>(x => x.GuidanceInstanceName);
		    }
		}
		
		#endregion
		#region GuidanceActivateOnCreation domain property code
		
		/// <summary>
		/// GuidanceActivateOnCreation domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuidanceActivateOnCreationDomainPropertyId = new global::System.Guid(0x3c4bfd70, 0x5fb4, 0x40f8, 0xa5, 0x0b, 0x93, 0xd6, 0x52, 0xef, 0xb3, 0x22);
		
		/// <summary>
		/// Storage for GuidanceActivateOnCreation
		/// </summary>
		private global::System.Boolean guidanceActivateOnCreationPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of GuidanceActivateOnCreation domain property.
		/// Whether to make this guidance the currently selected guidance in Guidance
		/// Explorer, when this element is created.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceActivateOnCreation.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceActivateOnCreation.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceActivateOnCreation.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("3c4bfd70-5fb4-40f8-a50b-93d652efb322")]
		public global::System.Boolean GuidanceActivateOnCreation
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return guidanceActivateOnCreationPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        GuidanceActivateOnCreationPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the GuidanceExtension.GuidanceActivateOnCreation domain property.
		/// </summary>
		internal sealed partial class GuidanceActivateOnCreationPropertyHandler : DslModeling::DomainPropertyValueHandler<GuidanceExtension, global::System.Boolean>
		{
		    private GuidanceActivateOnCreationPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the GuidanceExtension.GuidanceActivateOnCreation domain property value handler.
		    /// </summary>
		    public static readonly GuidanceActivateOnCreationPropertyHandler Instance = new GuidanceActivateOnCreationPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the GuidanceExtension.GuidanceActivateOnCreation domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return GuidanceActivateOnCreationDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(GuidanceExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.guidanceActivateOnCreationPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(GuidanceExtension element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(GuidanceExtension element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.guidanceActivateOnCreationPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<GuidanceExtension>(x => x.GuidanceActivateOnCreation);
		    }
		}
		
		#endregion
		#region GuidanceFeatureId domain property code
		
		/// <summary>
		/// GuidanceFeatureId domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuidanceFeatureIdDomainPropertyId = new global::System.Guid(0xc305b11e, 0x9e20, 0x4250, 0xac, 0x67, 0x1b, 0x25, 0xa5, 0xca, 0xab, 0x41);
		
		/// <summary>
		/// Storage for GuidanceFeatureId
		/// </summary>
		private global::System.String guidanceFeatureIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of GuidanceFeatureId domain property.
		/// The identifier of the feature extension associated to this element. This is the
		/// VSIX ID of the Feature Extension, found in the source.extension.vsixmanifest
		/// file in the feature extension project.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceFeatureId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceFeatureId.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceFeatureId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("c305b11e-9e20-4250-ac67-1b25a5caab41")]
		public global::System.String GuidanceFeatureId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return guidanceFeatureIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        GuidanceFeatureIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the GuidanceExtension.GuidanceFeatureId domain property.
		/// </summary>
		internal sealed partial class GuidanceFeatureIdPropertyHandler : DslModeling::DomainPropertyValueHandler<GuidanceExtension, global::System.String>
		{
		    private GuidanceFeatureIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the GuidanceExtension.GuidanceFeatureId domain property value handler.
		    /// </summary>
		    public static readonly GuidanceFeatureIdPropertyHandler Instance = new GuidanceFeatureIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the GuidanceExtension.GuidanceFeatureId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return GuidanceFeatureIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(GuidanceExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.guidanceFeatureIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(GuidanceExtension element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(GuidanceExtension element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.guidanceFeatureIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<GuidanceExtension>(x => x.GuidanceFeatureId);
		    }
		}
		
		#endregion
		#region GuidanceSharedInstance domain property code
		
		/// <summary>
		/// GuidanceSharedInstance domain property Id.
		/// </summary>
		public static readonly global::System.Guid GuidanceSharedInstanceDomainPropertyId = new global::System.Guid(0x6b911b72, 0x746b, 0x426d, 0xaf, 0x1d, 0xde, 0x4a, 0x2b, 0x5d, 0x2f, 0x38);
		
		/// <summary>
		/// Storage for GuidanceSharedInstance
		/// </summary>
		private global::System.Boolean guidanceSharedInstancePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GuidanceSharedInstance domain property.
		/// Whether a single guidance instance is shared between all instances of this
		/// element, or a separate instance of guidance is created for each instance of this
		/// element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceSharedInstance.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceSharedInstance.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.GuidanceExtension/GuidanceSharedInstance.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("6b911b72-746b-426d-af1d-de4a2b5d2f38")]
		public global::System.Boolean GuidanceSharedInstance
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return guidanceSharedInstancePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        GuidanceSharedInstancePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the GuidanceExtension.GuidanceSharedInstance domain property.
		/// </summary>
		internal sealed partial class GuidanceSharedInstancePropertyHandler : DslModeling::DomainPropertyValueHandler<GuidanceExtension, global::System.Boolean>
		{
		    private GuidanceSharedInstancePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the GuidanceExtension.GuidanceSharedInstance domain property value handler.
		    /// </summary>
		    public static readonly GuidanceSharedInstancePropertyHandler Instance = new GuidanceSharedInstancePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the GuidanceExtension.GuidanceSharedInstance domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return GuidanceSharedInstanceDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(GuidanceExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.guidanceSharedInstancePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(GuidanceExtension element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(GuidanceExtension element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.guidanceSharedInstancePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<GuidanceExtension>(x => x.GuidanceSharedInstance);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass WizardSettings
	/// Configures the settings for adding a wizard to gather and initialize data for
	/// properties on this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.WizardSettings.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.WizardSettings.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("765329ab-9384-4a2c-b5c2-e2c4b60912f5")]
	internal partial class WizardSettings : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// WizardSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x765329ab, 0x9384, 0x4a2c, 0xb5, 0xc2, 0xe2, 0xc4, 0xb6, 0x09, 0x12, 0xf5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WizardSettings(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WizardSettings(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TypeName domain property code
		
		/// <summary>
		/// TypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeNameDomainPropertyId = new global::System.Guid(0xa0d15274, 0x7041, 0x4b71, 0x9e, 0x11, 0x2b, 0xce, 0x1b, 0x7a, 0xc8, 0x41);
		
		/// <summary>
		/// Storage for TypeName
		/// </summary>
		private global::System.String typeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TypeName domain property.
		/// The type name of the wizard. 
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FullTypeTypeConverter<System.Windows.Window>))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.WizardSettings/TypeName.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.WizardSettings/TypeName.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("a0d15274-7041-4b71-9e11-2bce1b7ac841")]
		public global::System.String TypeName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return typeNamePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TypeNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the WizardSettings.TypeName domain property.
		/// </summary>
		internal sealed partial class TypeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<WizardSettings, global::System.String>
		{
		    private TypeNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the WizardSettings.TypeName domain property value handler.
		    /// </summary>
		    public static readonly TypeNamePropertyHandler Instance = new TypeNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the WizardSettings.TypeName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TypeNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(WizardSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.typeNamePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(WizardSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(WizardSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.typeNamePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<WizardSettings>(x => x.TypeName);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass ArtifactExtension
	/// Configures settings for managing associated artifacts to this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ArtifactExtension.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.ArtifactExtension.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("18f556f4-beef-476c-89dc-f7e63f9dbf48")]
	internal partial class ArtifactExtension : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ArtifactExtension domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18f556f4, 0xbeef, 0x476c, 0x89, 0xdc, 0xf7, 0xe6, 0x3f, 0x9d, 0xbf, 0x48);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ArtifactExtension(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ArtifactExtension(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AssociatedArtifacts domain property code
		
		/// <summary>
		/// AssociatedArtifacts domain property Id.
		/// </summary>
		public static readonly global::System.Guid AssociatedArtifactsDomainPropertyId = new global::System.Guid(0x41cbff0c, 0x4b29, 0x4540, 0xb9, 0xfd, 0xaf, 0x2e, 0x7c, 0x93, 0xa1, 0x85);
		
		/// <summary>
		/// Storage for AssociatedArtifacts
		/// </summary>
		private global::System.String associatedArtifactsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of AssociatedArtifacts domain property.
		/// Configures actions for working with solution items associated with this element.
		/// Expand this property to configure.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Library.Design.AssociatedArtifactsTypeConverter))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ArtifactExtension/AssociatedArtifacts.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ArtifactExtension/AssociatedArtifacts.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ArtifactExtension/AssociatedArtifacts.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("41cbff0c-4b29-4540-b9fd-af2e7c93a185")]
		public global::System.String AssociatedArtifacts
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return associatedArtifactsPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        AssociatedArtifactsPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ArtifactExtension.AssociatedArtifacts domain property.
		/// </summary>
		internal sealed partial class AssociatedArtifactsPropertyHandler : DslModeling::DomainPropertyValueHandler<ArtifactExtension, global::System.String>
		{
		    private AssociatedArtifactsPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ArtifactExtension.AssociatedArtifacts domain property value handler.
		    /// </summary>
		    public static readonly AssociatedArtifactsPropertyHandler Instance = new AssociatedArtifactsPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ArtifactExtension.AssociatedArtifacts domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return AssociatedArtifactsDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ArtifactExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.associatedArtifactsPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ArtifactExtension element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ArtifactExtension element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.associatedArtifactsPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ArtifactExtension>(x => x.AssociatedArtifacts);
		    }
		}
		
		#endregion
		#region OnArtifactActivation domain property code
		
		/// <summary>
		/// OnArtifactActivation domain property Id.
		/// </summary>
		public static readonly global::System.Guid OnArtifactActivationDomainPropertyId = new global::System.Guid(0x593016b6, 0xaa8b, 0x49ff, 0xa5, 0xe9, 0x26, 0xc7, 0xcf, 0xaf, 0xbb, 0xfb);
		
		/// <summary>
		/// Storage for OnArtifactActivation
		/// </summary>
		private ArtifactActivatedAction onArtifactActivationPropertyStorage = ArtifactActivatedAction.None;
		
		/// <summary>
		/// Gets or sets the value of OnArtifactActivation domain property.
		/// The action to perform on associated solution items, when this element is
		/// 'activated' by the user (i.e. double-clicked). A value of 'Open' will open the
		/// solution item in its default view, a value of 'Select' will select the item in
		/// 'Solution Explorer'.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ArtifactExtension/OnArtifactActivation.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ArtifactExtension/OnArtifactActivation.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ArtifactExtension/OnArtifactActivation.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(ArtifactActivatedAction.None)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("593016b6-aa8b-49ff-a5e9-26c7cfafbbfb")]
		public ArtifactActivatedAction OnArtifactActivation
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return onArtifactActivationPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        OnArtifactActivationPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ArtifactExtension.OnArtifactActivation domain property.
		/// </summary>
		internal sealed partial class OnArtifactActivationPropertyHandler : DslModeling::DomainPropertyValueHandler<ArtifactExtension, ArtifactActivatedAction>
		{
		    private OnArtifactActivationPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ArtifactExtension.OnArtifactActivation domain property value handler.
		    /// </summary>
		    public static readonly OnArtifactActivationPropertyHandler Instance = new OnArtifactActivationPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ArtifactExtension.OnArtifactActivation domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return OnArtifactActivationDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed ArtifactActivatedAction GetValue(ArtifactExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.onArtifactActivationPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ArtifactExtension element, ArtifactActivatedAction newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        ArtifactActivatedAction oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ArtifactExtension element, ArtifactActivatedAction oldValue, ArtifactActivatedAction newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.onArtifactActivationPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ArtifactExtension>(x => x.OnArtifactActivation);
		    }
		}
		
		#endregion
		#region OnArtifactDeletion domain property code
		
		/// <summary>
		/// OnArtifactDeletion domain property Id.
		/// </summary>
		public static readonly global::System.Guid OnArtifactDeletionDomainPropertyId = new global::System.Guid(0x7bcdb4f8, 0xc554, 0x4355, 0x9a, 0xe6, 0x6c, 0xbb, 0x0b, 0x97, 0xd8, 0x18);
		
		/// <summary>
		/// Storage for OnArtifactDeletion
		/// </summary>
		private ArtifactDeletedAction onArtifactDeletionPropertyStorage = ArtifactDeletedAction.None;
		
		/// <summary>
		/// Gets or sets the value of OnArtifactDeletion domain property.
		/// The action to perform on associated solution items, when this element is
		/// 'deleted' by the user. A value of 'DeleteAll' will automatically delete all
		/// associated solution items, a value of 'PromptUser' prompt the user to select
		/// which solution items to delete.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ArtifactExtension/OnArtifactDeletion.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ArtifactExtension/OnArtifactDeletion.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ArtifactExtension/OnArtifactDeletion.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(ArtifactDeletedAction.None)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("7bcdb4f8-c554-4355-9ae6-6cbb0b97d818")]
		public ArtifactDeletedAction OnArtifactDeletion
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return onArtifactDeletionPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        OnArtifactDeletionPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ArtifactExtension.OnArtifactDeletion domain property.
		/// </summary>
		internal sealed partial class OnArtifactDeletionPropertyHandler : DslModeling::DomainPropertyValueHandler<ArtifactExtension, ArtifactDeletedAction>
		{
		    private OnArtifactDeletionPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ArtifactExtension.OnArtifactDeletion domain property value handler.
		    /// </summary>
		    public static readonly OnArtifactDeletionPropertyHandler Instance = new OnArtifactDeletionPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ArtifactExtension.OnArtifactDeletion domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return OnArtifactDeletionDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed ArtifactDeletedAction GetValue(ArtifactExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.onArtifactDeletionPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ArtifactExtension element, ArtifactDeletedAction newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        ArtifactDeletedAction oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ArtifactExtension element, ArtifactDeletedAction oldValue, ArtifactDeletedAction newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.onArtifactDeletionPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ArtifactExtension>(x => x.OnArtifactDeletion);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass ValidationExtension
	/// Configures settings for managing validation of this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ValidationExtension.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.ValidationExtension.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("8aceddb6-1e3a-4d8b-9703-43348f695c8e")]
	internal partial class ValidationExtension : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ValidationExtension domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8aceddb6, 0x1e3a, 0x4d8b, 0x97, 0x03, 0x43, 0x34, 0x8f, 0x69, 0x5c, 0x8e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValidationExtension(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ValidationExtension(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValidationExecution domain property code
		
		/// <summary>
		/// ValidationExecution domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValidationExecutionDomainPropertyId = new global::System.Guid(0x8b912a8f, 0xe192, 0x43a5, 0x8e, 0x7b, 0x61, 0x66, 0x8b, 0xa3, 0x94, 0x4c);
		
		/// <summary>
		/// Storage for ValidationExecution
		/// </summary>
		private global::System.String validationExecutionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ValidationExecution domain property.
		/// Configures actions for validating this element. Expand this property to
		/// configure.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Library.Design.ValidationExecutionTypeConverter))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ValidationExtension/ValidationExecution.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ValidationExtension/ValidationExecution.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ValidationExtension/ValidationExecution.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("8b912a8f-e192-43a5-8e7b-61668ba3944c")]
		public global::System.String ValidationExecution
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return validationExecutionPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ValidationExecutionPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ValidationExtension.ValidationExecution domain property.
		/// </summary>
		internal sealed partial class ValidationExecutionPropertyHandler : DslModeling::DomainPropertyValueHandler<ValidationExtension, global::System.String>
		{
		    private ValidationExecutionPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ValidationExtension.ValidationExecution domain property value handler.
		    /// </summary>
		    public static readonly ValidationExecutionPropertyHandler Instance = new ValidationExecutionPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ValidationExtension.ValidationExecution domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ValidationExecutionDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ValidationExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.validationExecutionPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ValidationExtension element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ValidationExtension element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.validationExecutionPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ValidationExtension>(x => x.ValidationExecution);
		    }
		}
		
		#endregion
		#region ValidationOnBuild domain property code
		
		/// <summary>
		/// ValidationOnBuild domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValidationOnBuildDomainPropertyId = new global::System.Guid(0x074469a3, 0xdddc, 0x49dc, 0xa5, 0x54, 0x10, 0xc6, 0xa6, 0x6a, 0x69, 0x9a);
		
		/// <summary>
		/// Storage for ValidationOnBuild
		/// </summary>
		private global::System.Boolean validationOnBuildPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ValidationOnBuild domain property.
		/// Whether to validate the current element and all its descendants on build of the
		/// solution. (OnBuildStarted event).
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnBuild.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnBuild.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnBuild.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("074469a3-dddc-49dc-a554-10c6a66a699a")]
		public global::System.Boolean ValidationOnBuild
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return validationOnBuildPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ValidationOnBuildPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ValidationExtension.ValidationOnBuild domain property.
		/// </summary>
		internal sealed partial class ValidationOnBuildPropertyHandler : DslModeling::DomainPropertyValueHandler<ValidationExtension, global::System.Boolean>
		{
		    private ValidationOnBuildPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ValidationExtension.ValidationOnBuild domain property value handler.
		    /// </summary>
		    public static readonly ValidationOnBuildPropertyHandler Instance = new ValidationOnBuildPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ValidationExtension.ValidationOnBuild domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ValidationOnBuildDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(ValidationExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.validationOnBuildPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ValidationExtension element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ValidationExtension element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.validationOnBuildPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ValidationExtension>(x => x.ValidationOnBuild);
		    }
		}
		
		#endregion
		#region ValidationOnSave domain property code
		
		/// <summary>
		/// ValidationOnSave domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValidationOnSaveDomainPropertyId = new global::System.Guid(0x10a3b48a, 0x0e79, 0x4672, 0x97, 0x8d, 0xf2, 0xd6, 0x6a, 0x66, 0xa7, 0xad);
		
		/// <summary>
		/// Storage for ValidationOnSave
		/// </summary>
		private global::System.Boolean validationOnSavePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ValidationOnSave domain property.
		/// Whether to validate the current element and all its descendants on save of the
		/// product. (OnProductStoreSaved event).
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnSave.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnSave.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnSave.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("10a3b48a-0e79-4672-978d-f2d66a66a7ad")]
		public global::System.Boolean ValidationOnSave
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return validationOnSavePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ValidationOnSavePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ValidationExtension.ValidationOnSave domain property.
		/// </summary>
		internal sealed partial class ValidationOnSavePropertyHandler : DslModeling::DomainPropertyValueHandler<ValidationExtension, global::System.Boolean>
		{
		    private ValidationOnSavePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ValidationExtension.ValidationOnSave domain property value handler.
		    /// </summary>
		    public static readonly ValidationOnSavePropertyHandler Instance = new ValidationOnSavePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ValidationExtension.ValidationOnSave domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ValidationOnSaveDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(ValidationExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.validationOnSavePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ValidationExtension element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ValidationExtension element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.validationOnSavePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ValidationExtension>(x => x.ValidationOnSave);
		    }
		}
		
		#endregion
		#region ValidationOnMenu domain property code
		
		/// <summary>
		/// ValidationOnMenu domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValidationOnMenuDomainPropertyId = new global::System.Guid(0x6adb9635, 0x7468, 0x4574, 0xbd, 0x40, 0xc1, 0x75, 0xf3, 0xf3, 0xc6, 0x11);
		
		/// <summary>
		/// Storage for ValidationOnMenu
		/// </summary>
		private global::System.Boolean validationOnMenuPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ValidationOnMenu domain property.
		/// Whether to provide a menu to execute validation on this element and all its
		/// descendants. ('Validate All' menu item).
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnMenu.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnMenu.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnMenu.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("6adb9635-7468-4574-bd40-c175f3f3c611")]
		public global::System.Boolean ValidationOnMenu
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return validationOnMenuPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ValidationOnMenuPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ValidationExtension.ValidationOnMenu domain property.
		/// </summary>
		internal sealed partial class ValidationOnMenuPropertyHandler : DslModeling::DomainPropertyValueHandler<ValidationExtension, global::System.Boolean>
		{
		    private ValidationOnMenuPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ValidationExtension.ValidationOnMenu domain property value handler.
		    /// </summary>
		    public static readonly ValidationOnMenuPropertyHandler Instance = new ValidationOnMenuPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ValidationExtension.ValidationOnMenu domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ValidationOnMenuDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(ValidationExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.validationOnMenuPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ValidationExtension element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ValidationExtension element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.validationOnMenuPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ValidationExtension>(x => x.ValidationOnMenu);
		    }
		}
		
		#endregion
		#region ValidationOnCustomEvent domain property code
		
		/// <summary>
		/// ValidationOnCustomEvent domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValidationOnCustomEventDomainPropertyId = new global::System.Guid(0xec6131a2, 0x68e6, 0x40d2, 0xaf, 0x71, 0x6e, 0x05, 0x59, 0x45, 0xe9, 0x67);
		
		/// <summary>
		/// Storage for ValidationOnCustomEvent
		/// </summary>
		private global::System.String validationOnCustomEventPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ValidationOnCustomEvent domain property.
		/// A custom event to execute validation on the current element and all its
		/// descendants.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FeatureComponentTypeConverter<NuPattern.IObservableEvent>))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnCustomEvent.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnCustomEvent.Category", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.ValidationExtension/ValidationOnCustomEvent.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("ec6131a2-68e6-40d2-af71-6e055945e967")]
		public global::System.String ValidationOnCustomEvent
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return validationOnCustomEventPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ValidationOnCustomEventPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ValidationExtension.ValidationOnCustomEvent domain property.
		/// </summary>
		internal sealed partial class ValidationOnCustomEventPropertyHandler : DslModeling::DomainPropertyValueHandler<ValidationExtension, global::System.String>
		{
		    private ValidationOnCustomEventPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ValidationExtension.ValidationOnCustomEvent domain property value handler.
		    /// </summary>
		    public static readonly ValidationOnCustomEventPropertyHandler Instance = new ValidationOnCustomEventPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ValidationExtension.ValidationOnCustomEvent domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ValidationOnCustomEventDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ValidationExtension element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.validationOnCustomEventPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ValidationExtension element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ValidationExtension element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.validationOnCustomEventPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ValidationExtension>(x => x.ValidationOnCustomEvent);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Library.Automation
{
	/// <summary>
	/// DomainClass DragDropSettings
	/// Configures settings for handling a drag drop operations on this element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Library.Automation.DragDropSettings.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Library.Automation.DragDropSettings.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Library.Automation.LibraryDomainModel))]
	[DslModeling::DomainObjectId("4aed72c0-e518-4835-9d56-04f3d4e7bc58")]
	internal partial class DragDropSettings : global::Microsoft.VisualStudio.Modeling.ExtensionElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DragDropSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4aed72c0, 0xe518, 0x4835, 0x9d, 0x56, 0x04, 0xf3, 0xd4, 0xe7, 0xbc, 0x58);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DragDropSettings(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DragDropSettings(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CommandId domain property code
		
		/// <summary>
		/// CommandId domain property Id.
		/// </summary>
		public static readonly global::System.Guid CommandIdDomainPropertyId = new global::System.Guid(0x71e3a52c, 0x0b1d, 0x40e5, 0xb2, 0x9c, 0xc3, 0xf2, 0x89, 0x2a, 0x1f, 0x79);
		
		/// <summary>
		/// Storage for CommandId
		/// </summary>
		private global::System.Guid commandIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CommandId domain property.
		/// The command to execute when valid data is dropped on instances of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.DragDropSettings/CommandId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.DragDropSettings/CommandId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("71e3a52c-0b1d-40e5-b29c-c3f2892a1f79")]
		public global::System.Guid CommandId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return commandIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CommandIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the DragDropSettings.CommandId domain property.
		/// </summary>
		internal sealed partial class CommandIdPropertyHandler : DslModeling::DomainPropertyValueHandler<DragDropSettings, global::System.Guid>
		{
		    private CommandIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the DragDropSettings.CommandId domain property value handler.
		    /// </summary>
		    public static readonly CommandIdPropertyHandler Instance = new CommandIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the DragDropSettings.CommandId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CommandIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(DragDropSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.commandIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(DragDropSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(DragDropSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.commandIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<DragDropSettings>(x => x.CommandId);
		    }
		}
		
		#endregion
		#region DropConditions domain property code
		
		/// <summary>
		/// DropConditions domain property Id.
		/// </summary>
		public static readonly global::System.Guid DropConditionsDomainPropertyId = new global::System.Guid(0xae02b40d, 0x4128, 0x41fd, 0xb8, 0x02, 0x2c, 0x6d, 0xee, 0xcc, 0x65, 0xe2);
		
		/// <summary>
		/// Storage for DropConditions
		/// </summary>
		private global::System.String dropConditionsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DropConditions domain property.
		/// The conditions that determine whether the data being dragged over instances of
		/// this element is permitted for dropping.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.DragDropSettings/DropConditions.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.DragDropSettings/DropConditions.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("ae02b40d-4128-41fd-b802-2c6deecc65e2")]
		public global::System.String DropConditions
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return dropConditionsPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        DropConditionsPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the DragDropSettings.DropConditions domain property.
		/// </summary>
		internal sealed partial class DropConditionsPropertyHandler : DslModeling::DomainPropertyValueHandler<DragDropSettings, global::System.String>
		{
		    private DropConditionsPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the DragDropSettings.DropConditions domain property value handler.
		    /// </summary>
		    public static readonly DropConditionsPropertyHandler Instance = new DropConditionsPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the DragDropSettings.DropConditions domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DropConditionsDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(DragDropSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.dropConditionsPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(DragDropSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(DragDropSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.dropConditionsPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<DragDropSettings>(x => x.DropConditions);
		    }
		}
		
		#endregion
		#region WizardId domain property code
		
		/// <summary>
		/// WizardId domain property Id.
		/// </summary>
		public static readonly global::System.Guid WizardIdDomainPropertyId = new global::System.Guid(0xac8c7a32, 0x694c, 0x4304, 0xa5, 0xb2, 0x2e, 0xe3, 0xef, 0xe1, 0xc9, 0x22);
		
		/// <summary>
		/// Storage for WizardId
		/// </summary>
		private global::System.Guid wizardIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of WizardId domain property.
		/// A wizard to gather input from the user, that configures the properties of this
		/// element, when dragged data is dropped on instances of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.DragDropSettings/WizardId.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.DragDropSettings/WizardId.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("ac8c7a32-694c-4304-a5b2-2ee3efe1c922")]
		public global::System.Guid WizardId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return wizardIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        WizardIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the DragDropSettings.WizardId domain property.
		/// </summary>
		internal sealed partial class WizardIdPropertyHandler : DslModeling::DomainPropertyValueHandler<DragDropSettings, global::System.Guid>
		{
		    private WizardIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the DragDropSettings.WizardId domain property value handler.
		    /// </summary>
		    public static readonly WizardIdPropertyHandler Instance = new WizardIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the DragDropSettings.WizardId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return WizardIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Guid GetValue(DragDropSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.wizardIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(DragDropSettings element, global::System.Guid newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Guid oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(DragDropSettings element, global::System.Guid oldValue, global::System.Guid newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.wizardIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<DragDropSettings>(x => x.WizardId);
		    }
		}
		
		#endregion
		#region StatusText domain property code
		
		/// <summary>
		/// StatusText domain property Id.
		/// </summary>
		public static readonly global::System.Guid StatusTextDomainPropertyId = new global::System.Guid(0xb660dd15, 0x3b2c, 0x4542, 0x83, 0x7e, 0x27, 0x97, 0x85, 0x07, 0x1c, 0xe9);
		
		/// <summary>
		/// Storage for StatusText
		/// </summary>
		private global::System.String statusTextPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StatusText domain property.
		/// Informative message to display in Visual Studio's status bar when data is being
		/// dragged over instances of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Library.Automation.DragDropSettings/StatusText.DisplayName", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Library.Automation.DragDropSettings/StatusText.Description", typeof(global::NuPattern.Library.Automation.LibraryDomainModel), "NuPattern.Library.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("b660dd15-3b2c-4542-837e-279785071ce9")]
		public global::System.String StatusText
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return statusTextPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        StatusTextPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the DragDropSettings.StatusText domain property.
		/// </summary>
		internal sealed partial class StatusTextPropertyHandler : DslModeling::DomainPropertyValueHandler<DragDropSettings, global::System.String>
		{
		    private StatusTextPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the DragDropSettings.StatusText domain property value handler.
		    /// </summary>
		    public static readonly StatusTextPropertyHandler Instance = new StatusTextPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the DragDropSettings.StatusText domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return StatusTextDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(DragDropSettings element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.statusTextPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(DragDropSettings element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(DragDropSettings element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.statusTextPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<DragDropSettings>(x => x.StatusText);
		    }
		}
		
		#endregion
	}
}
