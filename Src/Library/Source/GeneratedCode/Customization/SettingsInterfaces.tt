<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" #>
<#@ output extension=".gen.cs" #>
<#@ Dsl processor="DslDirectiveProcessor"  requires="fileName='..\..\DslDefinition.dsl'" #>
<#@ Include File="..\..\..\..\Common\Helpers\Helpers.tt" #>
<#@ Include File="..\..\..\..\Common\Helpers\PropertyChangedInterface.tt" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq.Expressions;
using NuPattern.Runtime;

#pragma warning disable 0108

<#
// Skip the binding interfaces which are defined in Extensibility already.
foreach (var domainClass in this.DslLibrary.Classes.Where(dc => !HasSkipAnnotation(dc.Notes)))
{
    GenerateInterface(domainClass);
}
#>

#pragma warning restore 0108

<#+
private void GenerateInterface(DomainClass domainClass)
{
#>
namespace <#=this.DslLibrary.Namespace #>
{ <#+
PushIndent("    ");

GeneratePropertyChanged(domainClass, domainClass.Name);

var baseInterface = "";

var baseInterfaces = new List<string>();

if (domainClass.BaseClass == null || this.DslLibrary.Classes.Contains(domainClass.BaseClass))
{
    baseInterface = CodeGenerationUtilities.GetBaseClass(domainClass, baseInterface);

    if (!string.IsNullOrEmpty(baseInterface))
    {
        baseInterfaces.Add("I" + baseInterface);
    }
}
if ((domainClass.BaseClass != null && (domainClass.BaseClass.Name == "ExtensionElement" || domainClass.BaseClass.Name == "BindingSettings")) && domainClass.InheritanceModifier != InheritanceModifier.Abstract)
{
    if (domainClass.Notes.Equals("IsAutomationExtension=True", StringComparison.OrdinalIgnoreCase))
    {
        baseInterfaces.Add("IAutomationSettings");
    }
}
#>

/// <summary>
/// <#=domainClass.Description #>
/// </summary>
[GeneratedCode("<#=this.ToolName #>", "<#=this.DslVersion #>")]
partial interface I<#=domainClass.Name #> <#+if (baseInterfaces.Count > 0)
{ #> : <#=string.Join(", ", baseInterfaces.ToArray()) #><#+} #>

{ <#+
foreach (var property in domainClass.Properties)
{
    if (!HasSkipAnnotation(property.Notes))
    {
        GenerateProperty(property);
    }
}

foreach (var role in domainClass.RolesPlayed)
{
    GenerateProperty(role);
}
#>
}
<#+PopIndent(); #>
}
<#+
}
private void GenerateProperty(DomainProperty property)
{
    if (!PropertyHasGetter(property) && !PropertyHasSetter(property))
        return;

    PushIndent("    ");
#>

/// <summary>
/// <#=property.Description #>
/// </summary>
<#+
if (property.IsUIReadOnly)
{
    // UI readonly does not mean that we don't have API access, 
    // but rather that the setter is just not available via UI.
 #>
[System.ComponentModel.ReadOnly(true)]
<#+
}
#>
<#=CodeGenerationUtilities.GetDomainTypeFullName(property) #> <#=property.Name #> { <#+if (PropertyHasGetter(property))
{ #>get;<#+}
if (PropertyHasSetter(property))
{ #> set;<#+} #> }
<#+
PopIndent();
}

private bool PropertyHasSetter(DomainProperty property)
{
    if (property.Kind == PropertyKind.Calculated)
        return false;
    if (property.SetterAccessModifier != AccessModifier.Public)
        return false;

    return true;
}

private bool PropertyHasGetter(DomainProperty property)
{
    if (property.GetterAccessModifier != AccessModifier.Public)
        return false;

    return true;
}

private void GenerateProperty(DomainRole role)
{
    if (!role.IsPropertyGenerator)
    {
        return;
    }

    var opposite = role.Opposite;
    var castString = "";
    var annotations = GetAnnotations(opposite.RolePlayer.Notes);
    var propertyType = opposite.RolePlayer.GetRelativeName(role.RolePlayer.Namespace, true);
    var typeIdentifier = annotations.ContainsKey("Interface") ?
        annotations["Interface"] : propertyType;

    var typeRole = role;
    for (var current = role.BaseRole; current != null; current = current.BaseRole)
    {
        if (current != role && current.IsPropertyGenerator && current.PropertyName == role.PropertyName)
        {
            if ((current.Relationship.InheritanceModifier == InheritanceModifier.Abstract ||
                role.Relationship.InheritanceModifier == InheritanceModifier.Abstract) &&
                current.Relationship.InheritanceModifier != role.Relationship.InheritanceModifier)
            {
                break;
            }
            else
            {
                typeRole = current;
            }
        }
    }

    if (typeRole != role)
    {
        castString = "(" + propertyType + ")";
        annotations = GetAnnotations(typeRole.Opposite.RolePlayer.Notes);
        propertyType = typeRole.Opposite.RolePlayer.GetRelativeName(role.RolePlayer.Namespace, true);
        typeIdentifier = annotations.ContainsKey("Interface") ?
            annotations["Interface"] : propertyType;
    }

    // Determine collection type for the property.
    string linkedElementCollectionType;
    if (typeRole.CollectionType != null)
    {
        // If a custom collection type was specified, use it.
        linkedElementCollectionType = StripGenericSpecification(CodeGenerationUtilities.GetDomainTypeFullName(typeRole.CollectionType, role.RolePlayer.Namespace));
    }
    else
    {
        switch (typeRole.Relationship.InheritanceModifier)
        {
            case InheritanceModifier.Abstract:
                linkedElementCollectionType = "DslModeling::ReadOnlyLinkedElementCollection";
                break;
            case InheritanceModifier.None:
            case InheritanceModifier.Sealed:
                linkedElementCollectionType = "DslModeling::LinkedElementCollection";
                break;
            default:
                throw new NotSupportedException();
        }
    }
    PushIndent("    ");
#>

/// <summary>
/// <#=role.Description #>
/// </summary>
<#+
if (role.Multiplicity == Microsoft.VisualStudio.Modeling.DslDefinition.Multiplicity.One ||
    role.Multiplicity == Microsoft.VisualStudio.Modeling.DslDefinition.Multiplicity.ZeroOne)
{
#>
I<#=typeIdentifier ?? propertyType #> <#=role.PropertyName #> { get; set; }
<#+
}
else
{
#>
IEnumerable<I<#=typeIdentifier ?? propertyType #>> <#=role.PropertyName #> { get; }
<#+
}

GenerateCreate(opposite, propertyType, typeIdentifier);

PopIndent();
}

private void GenerateCreate(DomainRole opposite, string propertyType, string typeIdentifier = null)
{
    // Generate Create factory methods.
    if (opposite.IsEmbedded)
    {
        if (opposite.RolePlayer.InheritanceModifier != InheritanceModifier.Abstract)
        {
#>

/// <summary>
/// Creates an instance of a child <see cref="I<#=typeIdentifier ?? propertyType #>"/>, which is automatically added to the <see cref="<#=opposite.Opposite.PropertyName #>"/> collection.
/// </summary>
I<#=typeIdentifier ?? propertyType  #> Create<#=propertyType #>(Action<I<#=typeIdentifier ?? propertyType #>> initializer = null);
<#+
}

        foreach (var derived in opposite.RolePlayer.AllDescendants.Where(dc => dc.InheritanceModifier != InheritanceModifier.Abstract))
        {
            var derivedType = derived.GetRelativeName(derived.Namespace, true);
#>

/// <summary>
/// Creates an instance of a child <see cref="I<#=derivedType #>"/>, which is automatically added to the <see cref="<#=opposite.Opposite.PropertyName #>"/> collection.
/// </summary>
I<#=derivedType #> Create<#=derivedType #>(Action<I<#=derivedType #>> initializer = null);
<#+
}
    }
}

public Version DslVersion
{
    get { return new Version(this.DslLibrary.MajorVersion, this.DslLibrary.MinorVersion, this.DslLibrary.Build, this.DslLibrary.Revision); }
}

public string ToolName
{
    get { return "NuPattern"; }
}
#>