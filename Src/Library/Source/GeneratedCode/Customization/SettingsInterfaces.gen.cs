
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq.Expressions;
using NuPattern.Runtime;

#pragma warning disable 0108

namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures the settings for adding a project or item template to unfold, and execute other automation on this element.
	/// </summary>
	public partial interface ITemplateSettings : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<ITemplateSettings, object>> propertyExpression, Action<ITemplateSettings> callbackAction);
	}
	
	/// <summary>
	/// Configures the settings for adding a project or item template to unfold, and execute other automation on this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface ITemplateSettings  : IAutomationSettings
	{ 
		/// <summary>
		/// The project or item template to unfold.
		/// </summary>
		global::System.String TemplateUri { get; set; }
		
		/// <summary>
		/// Whether to create the current element when the template is unfolded from the New Project/Item dialog in Visual Studio.
		/// </summary>
		global::System.Boolean CreateElementOnUnfold { get; set; }
		
		/// <summary>
		/// Whether to unfold the template when the element is created from the Solution Builder.
		/// </summary>
		global::System.Boolean UnfoldOnElementCreated { get; set; }
		
		/// <summary>
		/// The command to execute after the template is unfolded.
		/// </summary>
		global::System.Guid CommandId { get; set; }
		
		/// <summary>
		/// A wizard to gather input from the user, that configures the properties of this element, before the template is unfolded.
		/// </summary>
		global::System.Guid WizardId { get; set; }
		
		/// <summary>
		/// The Uri to resolve the referenced template at authoring time.
		/// </summary>
		global::System.String TemplateAuthoringUri { get; set; }
		
		/// <summary>
		/// Whether to keep in sync the name of the unfolded artifact with the name of the current element.
		/// </summary>
		global::System.Boolean SyncName { get; set; }
		
		/// <summary>
		/// Whether to remove spaces and other illegal characters from the name of the unfolded artifact.
		/// </summary>
		global::System.Boolean SanitizeName { get; set; }
		
		/// <summary>
		/// The name of the unfolded artifact. For an item template, if no extension is provided, it is taken from the vstemplate file. This property supports property value substitution from properties on the current element. (e.g. {InstanceName} or {VariablePropertyName}). See guidance documentation for details.
		/// </summary>
		global::System.String RawTargetFileName { get; set; }
		
		/// <summary>
		/// The path to the target file, project, folder or solution folder in the current solution where the artifact is to be unfolded. Folders that don't currently exist are created automatically. i.e. ..\~\GeneratedCode, navigates up to the parent element, and traverses the first artifact link found on the parent element and into the 'GeneratedCode' sub-folder of that container (project or folder).  See guidance documentation for more example paths and details.
		/// </summary>
		global::System.String RawTargetPath { get; set; }
		
		/// <summary>
		/// An optional arbitrary text value to tag the generated solution item, that is used as an aid in resolving the artifact reference to the solution item.
		/// </summary>
		global::System.String Tag { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures the settings for handling an event for executing other automation on this element.
	/// </summary>
	public partial interface IEventSettings : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<IEventSettings, object>> propertyExpression, Action<IEventSettings> callbackAction);
	}
	
	/// <summary>
	/// Configures the settings for handling an event for executing other automation on this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface IEventSettings  : IAutomationSettings
	{ 
		/// <summary>
		/// The type of event which triggers the command to execute when all conditions are met.
		/// </summary>
		global::System.String EventId { get; set; }
		
		/// <summary>
		/// The command to execute on this event.
		/// </summary>
		global::System.Guid CommandId { get; set; }
		
		/// <summary>
		/// Whether to add a condition that filters the events to the current element only. Typically required for element instantiation and property change events types as examples.
		/// </summary>
		global::System.Boolean FilterForCurrentElement { get; set; }
		
		/// <summary>
		/// A wizard to gather input from the user, that configures the properties of this element, when the event is raised.
		/// </summary>
		global::System.Guid WizardId { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures the settings for adding a command that can be executed on this element.
	/// </summary>
	public partial interface ICommandSettings : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<ICommandSettings, object>> propertyExpression, Action<ICommandSettings> callbackAction);
	}
	
	/// <summary>
	/// Configures the settings for adding a command that can be executed on this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface ICommandSettings  : IAutomationSettings
	{ 
		/// <summary>
		/// The type of the command. Once selected, the specific properties of the selected command can be configured.
		/// </summary>
		global::System.String TypeId { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures the settings for adding a context menu item for executing other automation on this element.
	/// </summary>
	public partial interface IMenuSettings : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<IMenuSettings, object>> propertyExpression, Action<IMenuSettings> callbackAction);
	}
	
	/// <summary>
	/// Configures the settings for adding a context menu item for executing other automation on this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface IMenuSettings  : IAutomationSettings
	{ 
		/// <summary>
		/// The text that is displayed on the menu to the user.
		/// </summary>
		global::System.String Text { get; set; }
		
		/// <summary>
		/// The icon that is displayed on the menu to the user.
		/// </summary>
		global::System.String Icon { get; set; }
		
		/// <summary>
		/// The command to execute when the menu is clicked.
		/// </summary>
		global::System.Guid CommandId { get; set; }
		
		/// <summary>
		/// An optional type that provides dynamic menu status updates for this menu.
		/// </summary>
		global::System.String CustomStatus { get; set; }
		
		/// <summary>
		/// A wizard to gather input from the user, that configures the properties of this element, when the menu is clicked.
		/// </summary>
		global::System.Guid WizardId { get; set; }
		
		/// <summary>
		/// A number that orders this menu item with others on the context menu.
		/// </summary>
		global::System.Int32 SortOrder { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures the settings for associating guidance to this element.
	/// </summary>
	public partial interface IGuidanceExtension : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<IGuidanceExtension, object>> propertyExpression, Action<IGuidanceExtension> callbackAction);
	}
	
	/// <summary>
	/// Configures the settings for associating guidance to this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface IGuidanceExtension 
	{ 
		/// <summary>
		/// Configures guidance associated to this element. Expand this property to configure.
		/// </summary>
		global::System.String AssociatedGuidance { get; set; }
		
		/// <summary>
		/// The name of the created guidance workflow in the Guidance Explorer. If left blank, the instance name is calculated from the configured default name of the feature extension.
		/// </summary>
		global::System.String GuidanceInstanceName { get; set; }
		
		/// <summary>
		/// Whether to make this guidance the currently selected guidance in Guidance Explorer, when this element is created.
		/// </summary>
		global::System.Boolean GuidanceActivateOnCreation { get; set; }
		
		/// <summary>
		/// The identifier of the feature extension associated to this element. This is the VSIX ID of the Feature Extension, found in the source.extension.vsixmanifest file in the feature extension project.
		/// </summary>
		global::System.String GuidanceFeatureId { get; set; }
		
		/// <summary>
		/// Whether a single guidance instance is shared between all instances of this element, or a separate instance of guidance is created for each instance of this element.
		/// </summary>
		global::System.Boolean GuidanceSharedInstance { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures the settings for adding a wizard to gather and initialize data for properties on this element.
	/// </summary>
	public partial interface IWizardSettings : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<IWizardSettings, object>> propertyExpression, Action<IWizardSettings> callbackAction);
	}
	
	/// <summary>
	/// Configures the settings for adding a wizard to gather and initialize data for properties on this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface IWizardSettings  : IAutomationSettings
	{ 
		/// <summary>
		/// The type name of the wizard. 
		/// </summary>
		global::System.String TypeName { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures settings for managing associated artifacts to this element.
	/// </summary>
	public partial interface IArtifactExtension : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<IArtifactExtension, object>> propertyExpression, Action<IArtifactExtension> callbackAction);
	}
	
	/// <summary>
	/// Configures settings for managing associated artifacts to this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface IArtifactExtension 
	{ 
		/// <summary>
		/// Configures actions for working with solution items associated with this element. Expand this property to configure.
		/// </summary>
		global::System.String AssociatedArtifacts { get; set; }
		
		/// <summary>
		/// The action to perform on associated solution items, when this element is 'activated' by the user (i.e. double-clicked). A value of 'Open' will open the solution item in its default view, a value of 'Select' will select the item in 'Solution Explorer'.
		/// </summary>
		ArtifactActivatedAction OnArtifactActivation { get; set; }
		
		/// <summary>
		/// The action to perform on associated solution items, when this element is 'deleted' by the user. A value of 'DeleteAll' will automatically delete all associated solution items, a value of 'PromptUser' prompt the user to select which solution items to delete.
		/// </summary>
		ArtifactDeletedAction OnArtifactDeletion { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures settings for managing validation of this element.
	/// </summary>
	public partial interface IValidationExtension : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<IValidationExtension, object>> propertyExpression, Action<IValidationExtension> callbackAction);
	}
	
	/// <summary>
	/// Configures settings for managing validation of this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface IValidationExtension 
	{ 
		/// <summary>
		/// Configures actions for validating this element. Expand this property to configure.
		/// </summary>
		global::System.String ValidationExecution { get; set; }
		
		/// <summary>
		/// Whether to validate the current element and all its descendants on build of the solution. (OnBuildStarted event).
		/// </summary>
		global::System.Boolean ValidationOnBuild { get; set; }
		
		/// <summary>
		/// Whether to validate the current element and all its descendants on save of the product. (OnProductStoreSaved event).
		/// </summary>
		global::System.Boolean ValidationOnSave { get; set; }
		
		/// <summary>
		/// Whether to provide a menu to execute validation on this element and all its descendants. ('Validate All' menu item).
		/// </summary>
		global::System.Boolean ValidationOnMenu { get; set; }
		
		/// <summary>
		/// A custom event to execute validation on the current element and all its descendants.
		/// </summary>
		global::System.String ValidationOnCustomEvent { get; set; }
	}
}
namespace NuPattern.Library.Automation
{ 
	/// <summary>
	/// Configures settings for handling a drag drop operations on this element.
	/// </summary>
	public partial interface IDragDropSettings : INotifyPropertyChanged
	{
		/// <summary>
		/// Subscribes to changes in the property referenced in the given 
		/// <paramref name="propertyExpression"/> with the given 
		/// <paramref name="callbackAction"/> delegate.
		/// </summary>
		/// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
		/// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
		IDisposable SubscribeChanged(Expression<Func<IDragDropSettings, object>> propertyExpression, Action<IDragDropSettings> callbackAction);
	}
	
	/// <summary>
	/// Configures settings for handling a drag drop operations on this element.
	/// </summary>
	[GeneratedCode("NuPattern", "1.2.0.0")]
	public partial interface IDragDropSettings  : IAutomationSettings
	{ 
		/// <summary>
		/// The command to execute when valid data is dropped on instances of this element.
		/// </summary>
		global::System.Guid CommandId { get; set; }
		
		/// <summary>
		/// A wizard to gather input from the user, that configures the properties of this element, when dragged data is dropped on instances of this element.
		/// </summary>
		global::System.Guid WizardId { get; set; }
		
		/// <summary>
		/// Informative message to display in Visual Studio's status bar when data is being dragged over instances of this element.
		/// </summary>
		global::System.String StatusText { get; set; }
	}
}

#pragma warning restore 0108

