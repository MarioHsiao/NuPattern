<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentCanNotBeEmpty" xml:space="preserve">
    <value>Parameter cannot be empty.</value>
  </data>
  <data name="ArgumentCanNotBeNull" xml:space="preserve">
    <value>Parameter cannot be null.</value>
  </data>
  <data name="ArgumentTypeNotExpected" xml:space="preserve">
    <value>Parameter must be a {0}.</value>
  </data>
  <data name="ElementContainerExtensions_ViewInstanceNameFormat" xml:space="preserve">
    <value>{0} ({1})</value>
  </data>
  <data name="IProductElementExtensions_DisconnectedObject" xml:space="preserve">
    <value>The element must have an owner or a parent view.</value>
  </data>
  <data name="ObservableEvent_CantResolveEventExpression" xml:space="preserve">
    <value>Could not resolve event expression declaring type or assembly.</value>
  </data>
  <data name="ObservableEvent_InvalidEventExpression" xml:space="preserve">
    <value>Expression does not reference an event.</value>
  </data>
  <data name="ProductElementExtensions_CreateChildElement_InvalidType" xml:space="preserve">
    <value>Cannot create child element of given type. Only collections and elements supported.</value>
  </data>
  <data name="ProductElementExtensions_ErrorNotChildElement" xml:space="preserve">
    <value>'{0}' is not defined as having child elements named '{1}'.</value>
  </data>
  <data name="ProductElementExtensions_ErrorNotElementContainer" xml:space="preserve">
    <value>'{0}' does not allow creation of child elements '{1}'.</value>
  </data>
  <data name="ReferenceKindProvider_CanNotConvertFromString" xml:space="preserve">
    <value>The TypeConverter on this ReferenceKindProvider type does not support convert from System.String to of its declared type. The reference value cannot be read.</value>
  </data>
  <data name="ReferenceKindProvider_CanNotConvertString" xml:space="preserve">
    <value>The TypeConverter on this ReferenceKindProvider type {0} or its typed value {1} does not support convert of its declared type to and from System.String. The reference value cannot be set.</value>
  </data>
  <data name="ReferenceKindProvider_UnsupportedReferenceKind" xml:space="preserve">
    <value>Reference of kind {0} is not supported. Reference must be of type {1}.</value>
  </data>
  <data name="ResourcePack_Error_InvalidResourceType" xml:space="preserve">
    <value>Wrong resource type.</value>
  </data>
  <data name="ResourcePack_Error_UnknownResourceType" xml:space="preserve">
    <value>Unknown resource type.</value>
  </data>
  <data name="StoreEventBufferingScope_BufferingEvent" xml:space="preserve">
    <value>Buffering scope is active, event will be delayed until Dispose.</value>
  </data>
  <data name="StoreEventBufferingScope_CancelledScopeIgnoringEvent" xml:space="preserve">
    <value>Buffering scope is cancelled. Events will be ignored.</value>
  </data>
  <data name="StoreEventBufferingScope_CompleteEnqueingOnParent" xml:space="preserve">
    <value>Parent buffering scope is active. Events will be enqueued on parent scope until it's disposed.</value>
  </data>
  <data name="StoreEventBufferingScope_DisposingNonComplete" xml:space="preserve">
    <value>Current scope has not been marked as completed. Buffered events are being discarded.</value>
  </data>
  <data name="StoreEventBufferingScope_Initialized" xml:space="preserve">
    <value>Initialized new event buffering scope.</value>
  </data>
  <data name="StoreEventBufferingScope_MarkedCanceled" xml:space="preserve">
    <value>Scope marked as canceled. Events will not be raised on Dispose.</value>
  </data>
  <data name="StoreEventBufferingScope_MarkedCompleted" xml:space="preserve">
    <value>Scope marked as completed. Events will be raised on Dispose.</value>
  </data>
  <data name="StoreEventBufferingScope_RaisingEvents" xml:space="preserve">
    <value>Buffering scope is the topmost scope. Events firing now.</value>
  </data>
  <data name="ToolkitInterfaceLayer_InstancePropertyNotFound" xml:space="preserve">
    <value>The element of type '{0}' does not have a class property or variable property named '{1}'.</value>
  </data>
  <data name="ToolkitInterfaceLayer_InstanceTypeDoesNotHaveInterfaceLayer" xml:space="preserve">
    <value>The type {0} does not support a generated interface layer.</value>
  </data>
  <data name="ToolkitInterfaceLayer_InterfaceLayerNotFound" xml:space="preserve">
    <value>The type '{0}' is not a valid interface layer type.</value>
  </data>
  <data name="ToolkitInterfaceLayer_InvalidPropertyExpression" xml:space="preserve">
    <value>Expression must be of the form 'this.PropertyName'. Invalid expression '{0}'.</value>
  </data>
  <data name="ToolkitInterfaceLayer_PropertyNotFound" xml:space="preserve">
    <value>Interface '{0}' does not contain expected property '{1}'.</value>
  </data>
  <data name="ToolkitInterfaceLayer_ProxyImplementationConstructorMissing" xml:space="preserve">
    <value>Interface layer concrete implementation type '{0}' does not provide expected public constructor receiving exactly one argument of type '{1}'.</value>
  </data>
  <data name="ToolkitInterfaceLayer_ProxyMissingInterface" xml:space="preserve">
    <value>Interface layer concrete implementation '{0}' specified on interface '{1}' does not implement that interface.</value>
  </data>
  <data name="ToolkitInterfaceLayer_ServiceUnavailable" xml:space="preserve">
    <value>Cannot add interface layer because the service providing the available interfaces was not found.</value>
  </data>
  <data name="ToolkitInterfaceLayer_ViewNotFound" xml:space="preserve">
    <value>The product does not have a view named '{0}'.</value>
  </data>
  <data name="UnknownElementContainer" xml:space="preserve">
    <value>This element container is of an unknown type.</value>
  </data>
</root>