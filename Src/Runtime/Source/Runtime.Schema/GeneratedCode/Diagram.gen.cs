#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "NuPattern.Runtime.Schema.PatternModelSchemaDiagram")]

namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass PatternModelSchemaDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bbbccbe0-cf42-4307-b8a3-d9ac6b7169ff")]
	public abstract partial class PatternModelSchemaDiagramBase : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::NuPattern.Runtime.Schema.PatternModelToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Diagram styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Silver);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramBackground, backgroundBrush);
		
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Port shape support
		/// <summary>
		/// Indicates whether the diagram contains any ports.  Hit testing will not
		/// check for ports if this is false.
		/// </summary>
		public override bool SupportsPorts
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
			if (!subscribedCompartmentItemsEvents && this.Store != null)
			{
				subscribedCompartmentItemsEvents = true;
				this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
			}
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
			if (subscribedCompartmentItemsEvents)
			{
				this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
				this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
				this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
				this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
				this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
				subscribedCompartmentItemsEvents = false;
			}
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
			// If in Undo, Redo or Rollback the compartment item rules are not run so we must refresh the compartment list at this point if required
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemAddRule.ElementAdded(e, repaintOnly);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemDeleteRule.ElementDeleted(e, repaintOnly);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
			bool repaintOnly = !e.ModelElement.Store.InUndoRedoOrRollback;
			CompartmentItemChangeRule.ElementPropertyChanged(e, repaintOnly);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
			bool repaintOnly = !e.ElementLink.Store.InUndoRedoOrRollback;
			CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, repaintOnly);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
			bool repaintOnly = !e.Link.Store.InUndoRedoOrRollback;
			CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, repaintOnly);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
		/// mapped to an element link.
		/// </summary>
		public override bool IsConnectorMappedToLink(DslDiagrams::BinaryLinkShape connector)
		{
			#region Check Parameters
			global::System.Diagnostics.Debug.Assert(connector != null);
			if (connector == null)
				throw new global::System.ArgumentNullException("connector");
			#endregion
			if (connector.GetType() == typeof(global::NuPattern.Runtime.Schema.PatternElementConnector))
				return false;
			return base.IsConnectorMappedToLink(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::NuPattern.Runtime.Schema.ElementSchema)
			{
				global::NuPattern.Runtime.Schema.ElementShape newShape = new global::NuPattern.Runtime.Schema.ElementShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.CollectionSchema)
			{
				global::NuPattern.Runtime.Schema.CollectionShape newShape = new global::NuPattern.Runtime.Schema.CollectionShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.PatternSchema)
			{
				global::NuPattern.Runtime.Schema.PatternShape newShape = new global::NuPattern.Runtime.Schema.PatternShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.ExtensionPointSchema)
			{
				global::NuPattern.Runtime.Schema.ExtensionPointShape newShape = new global::NuPattern.Runtime.Schema.ExtensionPointShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.ViewSchema)
			{
				global::NuPattern.Runtime.Schema.ViewShape newShape = new global::NuPattern.Runtime.Schema.ViewShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.ViewHasElements)
			{
				global::NuPattern.Runtime.Schema.ViewHasElementsConnector newShape = new global::NuPattern.Runtime.Schema.ViewHasElementsConnector(this.Partition);
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.ElementHasElements)
			{
				global::NuPattern.Runtime.Schema.ElementHasElementsConnector newShape = new global::NuPattern.Runtime.Schema.ElementHasElementsConnector(this.Partition);
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.ElementHasExtensionPoints)
			{
				global::NuPattern.Runtime.Schema.ElementHasExtensionPointsConnector newShape = new global::NuPattern.Runtime.Schema.ElementHasExtensionPointsConnector(this.Partition);
				return newShape;
			}
			if(element is global::NuPattern.Runtime.Schema.ViewHasExtensionPoints)
			{
				global::NuPattern.Runtime.Schema.ViewHasExtensionPointsConnector newShape = new global::NuPattern.Runtime.Schema.ViewHasExtensionPointsConnector(this.Partition);
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::NuPattern.Runtime.Schema.PatternShape.DecoratorsInitialized += PatternShapeDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.ElementShape.DecoratorsInitialized += ElementShapeDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.CollectionShape.DecoratorsInitialized += CollectionShapeDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.ExtensionPointShape.DecoratorsInitialized += ExtensionPointShapeDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.ViewShape.DecoratorsInitialized += ViewShapeDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.ElementHasElementsConnector.DecoratorsInitialized += ElementHasElementsConnectorDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.ViewHasElementsConnector.DecoratorsInitialized += ViewHasElementsConnectorDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.ElementHasExtensionPointsConnector.DecoratorsInitialized += ElementHasExtensionPointsConnectorDecoratorMap.OnDecoratorsInitialized;
			global::NuPattern.Runtime.Schema.ViewHasExtensionPointsConnector.DecoratorsInitialized += ViewHasExtensionPointsConnectorDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for PatternShape.
		/// </summary>
		internal static partial class PatternShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for PatternShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				CustomizableElementShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.IsInheritedFromBaseDomainPropertyId);
				propertyInfo.FilteringValues.Add("True");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "InheritedFromBaseDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CustomizableElementShape.
		/// </summary>
		internal static partial class CustomizableElementShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CustomizableElementShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ElementShape.
		/// </summary>
		internal static partial class ElementShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ElementShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				CustomizableElementShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.IsInheritedFromBaseDomainPropertyId);
				propertyInfo.FilteringValues.Add("True");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "InheritedFromBaseDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CollectionShape.
		/// </summary>
		internal static partial class CollectionShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CollectionShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				CustomizableElementShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.IsInheritedFromBaseDomainPropertyId);
				propertyInfo.FilteringValues.Add("True");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "InheritedFromBaseDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ExtensionPointShape.
		/// </summary>
		internal static partial class ExtensionPointShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ExtensionPointShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				CustomizableElementShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.IsInheritedFromBaseDomainPropertyId);
				propertyInfo.FilteringValues.Add("True");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "InheritedFromBaseDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ViewShape.
		/// </summary>
		internal static partial class ViewShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ViewShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.NamedElementSchema.IsInheritedFromBaseDomainPropertyId);
				propertyInfo.FilteringValues.Add("True");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "InheritedFromBaseDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("FalseEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationFalseEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("InheritedEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationInheritedEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueDisabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueDisabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.CustomizableElementSchema.IsCustomizationEnabledStateDomainPropertyId);
				propertyInfo.FilteringValues.Add("TrueEnabled");
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CustomizationTrueEnabledDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ElementHasElementsConnector.
		/// </summary>
		internal static partial class ElementHasElementsConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ElementHasElementsConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ElementHasElements.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ElementHasElements.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ViewHasElementsConnector.
		/// </summary>
		internal static partial class ViewHasElementsConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ViewHasElementsConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ViewHasElements.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ViewHasElements.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ViewHasElements.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ViewHasElements.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ElementHasExtensionPointsConnector.
		/// </summary>
		internal static partial class ElementHasExtensionPointsConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ElementHasExtensionPointsConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ViewHasExtensionPointsConnector.
		/// </summary>
		internal static partial class ViewHasExtensionPointsConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ViewHasExtensionPointsConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.CardinalityCaptionDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "CardinalityDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Sticky Toolbox Support
		private string stickyToolboxItemId = null; // Id of the last-selected sticky toolbox item.
		
		/// <summary>
		/// Called when the selection on toolbox changed (through a single-click, or pressing up/down arrow keys).
		/// Base implementation does nothing.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">New toolbox item with selection. This can be null, if "Pointer" mode is selected.</param>
		public override void OnToolboxSelectionChanged(DslDesign::ModelingToolboxItem toolboxItem)
		{
			base.OnToolboxSelectionChanged(toolboxItem);
		
			// When a toolbox item is single-clicked, we need to turn off the sticky mode.
			this.stickyToolboxItemId = null;
			if (this.ActiveDiagramView != null)
			{
				DslDiagrams::CreateAction createAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::CreateAction;
				if (createAction != null)
				{
					createAction.StickyMode = false;
				}
				else
				{
					DslDiagrams::ConnectAction connectAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::ConnectAction;
					if (connectAction != null)
					{
						connectAction.StickyMode = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Called on selection of a ToolboxItem. (A selection is a double-click, or pressing Enter).
		/// The selection cannot be null; this method is not called when the "Pointer" mode is selected.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">Selected toolbox item.</param>
		public override bool OnToolboxItemSelected(DslDesign::ModelingToolboxItem toolboxItem)
		{
			// Save the current sticky item choice.
			this.stickyToolboxItemId = toolboxItem.Id;
			
			// Return true to indicate that the toolbox selection action is handled. Otherwise the old
			// behavior of creating new element on double-click will be carried out.
			return true;
		}
		#endregion
		
		#region Toolbox actions
		private bool changingMouseAction;
		private global::NuPattern.Runtime.Schema.CollectionCreateAction collectionCreateAction;
		private global::NuPattern.Runtime.Schema.ElementCreateAction elementCreateAction;
		private global::NuPattern.Runtime.Schema.ExtensionPointCreateAction extensionPointCreateAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				bool stickyMode = false;
				DslDesign::ModelingToolboxItem selectedToolboxItem = activeView.Toolbox.GetSelectedToolboxItem() as DslDesign::ModelingToolboxItem;
				if (selectedToolboxItem != null && selectedToolboxItem.Id == this.stickyToolboxItemId)
				{
					stickyMode = true;
				}
				else
				{
					stickyMode = false;
					this.stickyToolboxItemId = null;
				}
		
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::NuPattern.Runtime.Schema.PatternModelToolboxHelper.CollectionFilterString))
				{
					if (this.collectionCreateAction == null)
					{
						this.collectionCreateAction = new global::NuPattern.Runtime.Schema.CollectionCreateAction(this);
						this.collectionCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.collectionCreateAction.StickyMode = stickyMode;
					action = this.collectionCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::NuPattern.Runtime.Schema.PatternModelToolboxHelper.ElementFilterString))
				{
					if (this.elementCreateAction == null)
					{
						this.elementCreateAction = new global::NuPattern.Runtime.Schema.ElementCreateAction(this);
						this.elementCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.elementCreateAction.StickyMode = stickyMode;
					action = this.elementCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::NuPattern.Runtime.Schema.PatternModelToolboxHelper.ExtensionPointFilterString))
				{
					if (this.extensionPointCreateAction == null)
					{
						this.extensionPointCreateAction = new global::NuPattern.Runtime.Schema.ExtensionPointCreateAction(this);
						this.extensionPointCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.extensionPointCreateAction.StickyMode = stickyMode;
					action = this.extensionPointCreateAction;
				}
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom toolbox action.
		/// </summary>
		private void OnToolboxActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom toolbox action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.collectionCreateAction != null)
					{
						this.collectionCreateAction.Dispose();
						this.collectionCreateAction = null;
					}
					if(this.elementCreateAction != null)
					{
						this.elementCreateAction.Dispose();
						this.elementCreateAction = null;
					}
					if(this.extensionPointCreateAction != null)
					{
						this.extensionPointCreateAction.Dispose();
						this.extensionPointCreateAction = null;
					}
					this.UnsubscribeCompartmentItemsEvents();
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// PatternModelSchemaDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbbbccbe0, 0xcf42, 0x4307, 0xb8, 0xa3, 0xd9, 0xac, 0x6b, 0x71, 0x69, 0xff);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PatternModelSchemaDiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AuthoringGradientColor domain property code
		
		/// <summary>
		/// AuthoringGradientColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid AuthoringGradientColorDomainPropertyId = new global::System.Guid(0xdcf24a57, 0xf408, 0x4ebb, 0xa7, 0xe9, 0xba, 0x4a, 0xbd, 0x2e, 0xf5, 0x2e);
		
		/// <summary>
		/// Storage for AuthoringGradientColor
		/// </summary>
		private global::System.Drawing.Color authoringGradientColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("WhiteSmoke");
		
		/// <summary>
		/// Gets or sets the value of AuthoringGradientColor domain property.
		/// The color of the gradient in the title of the background.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/AuthoringGradientColor.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/AuthoringGradientColor.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "WhiteSmoke")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("dcf24a57-f408-4ebb-a7e9-ba4abd2ef52e")]
		internal global::System.Drawing.Color AuthoringGradientColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return authoringGradientColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AuthoringGradientColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternModelSchemaDiagram.AuthoringGradientColor domain property.
		/// </summary>
		internal sealed partial class AuthoringGradientColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaDiagramBase, global::System.Drawing.Color>
		{
			private AuthoringGradientColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternModelSchemaDiagram.AuthoringGradientColor domain property value handler.
			/// </summary>
			public static readonly AuthoringGradientColorPropertyHandler Instance = new AuthoringGradientColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternModelSchemaDiagram.AuthoringGradientColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AuthoringGradientColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternModelSchemaDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.authoringGradientColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternModelSchemaDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.authoringGradientColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AuthoringBackgroundColor domain property code
		
		/// <summary>
		/// AuthoringBackgroundColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid AuthoringBackgroundColorDomainPropertyId = new global::System.Guid(0x0e90079d, 0x12aa, 0x433b, 0x9e, 0x16, 0x3b, 0xb2, 0x29, 0xa6, 0xd5, 0xab);
		
		/// <summary>
		/// Storage for AuthoringBackgroundColor
		/// </summary>
		private global::System.Drawing.Color authoringBackgroundColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("White");
		
		/// <summary>
		/// Gets or sets the value of AuthoringBackgroundColor domain property.
		/// Description for NuPattern.Runtime.Schema.PatternModelSchemaDiagram.Authoring
		/// Background Color
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/AuthoringBackgroundColor.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/AuthoringBackgroundColor.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "White")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("0e90079d-12aa-433b-9e16-3bb229a6d5ab")]
		internal global::System.Drawing.Color AuthoringBackgroundColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return authoringBackgroundColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AuthoringBackgroundColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternModelSchemaDiagram.AuthoringBackgroundColor domain property.
		/// </summary>
		internal sealed partial class AuthoringBackgroundColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaDiagramBase, global::System.Drawing.Color>
		{
			private AuthoringBackgroundColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternModelSchemaDiagram.AuthoringBackgroundColor domain property value handler.
			/// </summary>
			public static readonly AuthoringBackgroundColorPropertyHandler Instance = new AuthoringBackgroundColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternModelSchemaDiagram.AuthoringBackgroundColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AuthoringBackgroundColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternModelSchemaDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.authoringBackgroundColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternModelSchemaDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.authoringBackgroundColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AuthoringTitleTextColor domain property code
		
		/// <summary>
		/// AuthoringTitleTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid AuthoringTitleTextColorDomainPropertyId = new global::System.Guid(0xe0c29222, 0x1979, 0x499b, 0x8b, 0x18, 0xff, 0x6c, 0xc4, 0x4d, 0x85, 0x4a);
		
		/// <summary>
		/// Storage for AuthoringTitleTextColor
		/// </summary>
		private global::System.Drawing.Color authoringTitleTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DarkGray");
		
		/// <summary>
		/// Gets or sets the value of AuthoringTitleTextColor domain property.
		/// The color of the text of the diagram title.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/AuthoringTitleTextColor.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/AuthoringTitleTextColor.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DarkGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e0c29222-1979-499b-8b18-ff6cc44d854a")]
		internal global::System.Drawing.Color AuthoringTitleTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return authoringTitleTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AuthoringTitleTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternModelSchemaDiagram.AuthoringTitleTextColor domain property.
		/// </summary>
		internal sealed partial class AuthoringTitleTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaDiagramBase, global::System.Drawing.Color>
		{
			private AuthoringTitleTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternModelSchemaDiagram.AuthoringTitleTextColor domain property value handler.
			/// </summary>
			public static readonly AuthoringTitleTextColorPropertyHandler Instance = new AuthoringTitleTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternModelSchemaDiagram.AuthoringTitleTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AuthoringTitleTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternModelSchemaDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.authoringTitleTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternModelSchemaDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.authoringTitleTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringGradientColor domain property code
		
		/// <summary>
		/// TailoringGradientColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringGradientColorDomainPropertyId = new global::System.Guid(0xe457ea9f, 0x5553, 0x4121, 0x9a, 0x97, 0xeb, 0xbf, 0x44, 0xb2, 0xa9, 0xef);
		
		/// <summary>
		/// Storage for TailoringGradientColor
		/// </summary>
		private global::System.Drawing.Color tailoringGradientColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("WhiteSmoke");
		
		/// <summary>
		/// Gets or sets the value of TailoringGradientColor domain property.
		/// The color of the gradient in the title of the background.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/TailoringGradientColor.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/TailoringGradientColor.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "WhiteSmoke")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e457ea9f-5553-4121-9a97-ebbf44b2a9ef")]
		internal global::System.Drawing.Color TailoringGradientColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringGradientColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringGradientColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternModelSchemaDiagram.TailoringGradientColor domain property.
		/// </summary>
		internal sealed partial class TailoringGradientColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaDiagramBase, global::System.Drawing.Color>
		{
			private TailoringGradientColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternModelSchemaDiagram.TailoringGradientColor domain property value handler.
			/// </summary>
			public static readonly TailoringGradientColorPropertyHandler Instance = new TailoringGradientColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternModelSchemaDiagram.TailoringGradientColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringGradientColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternModelSchemaDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringGradientColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternModelSchemaDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringGradientColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringBackgroundColor domain property code
		
		/// <summary>
		/// TailoringBackgroundColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringBackgroundColorDomainPropertyId = new global::System.Guid(0x42510b7f, 0x442b, 0x45fe, 0x99, 0x32, 0xda, 0xe5, 0x75, 0x60, 0x95, 0x22);
		
		/// <summary>
		/// Storage for TailoringBackgroundColor
		/// </summary>
		private global::System.Drawing.Color tailoringBackgroundColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("204, 204, 204");
		
		/// <summary>
		/// Gets or sets the value of TailoringBackgroundColor domain property.
		/// Description for NuPattern.Runtime.Schema.PatternModelSchemaDiagram.Tailoring
		/// Background Color
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/TailoringBackgroundColor.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/TailoringBackgroundColor.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "204, 204, 204")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("42510b7f-442b-45fe-9932-dae575609522")]
		internal global::System.Drawing.Color TailoringBackgroundColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringBackgroundColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringBackgroundColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternModelSchemaDiagram.TailoringBackgroundColor domain property.
		/// </summary>
		internal sealed partial class TailoringBackgroundColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaDiagramBase, global::System.Drawing.Color>
		{
			private TailoringBackgroundColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternModelSchemaDiagram.TailoringBackgroundColor domain property value handler.
			/// </summary>
			public static readonly TailoringBackgroundColorPropertyHandler Instance = new TailoringBackgroundColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternModelSchemaDiagram.TailoringBackgroundColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringBackgroundColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternModelSchemaDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringBackgroundColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternModelSchemaDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringBackgroundColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringTitleTextColor domain property code
		
		/// <summary>
		/// TailoringTitleTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringTitleTextColorDomainPropertyId = new global::System.Guid(0x0c72187e, 0x4118, 0x4888, 0xb3, 0xe7, 0x75, 0xdb, 0xd9, 0x23, 0x53, 0x7e);
		
		/// <summary>
		/// Storage for TailoringTitleTextColor
		/// </summary>
		private global::System.Drawing.Color tailoringTitleTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DarkGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringTitleTextColor domain property.
		/// The color of the text of the diagram title.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/TailoringTitleTextColor.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/TailoringTitleTextColor.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DarkGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("0c72187e-4118-4888-b3e7-75dbd923537e")]
		internal global::System.Drawing.Color TailoringTitleTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringTitleTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringTitleTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternModelSchemaDiagram.TailoringTitleTextColor domain property.
		/// </summary>
		internal sealed partial class TailoringTitleTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaDiagramBase, global::System.Drawing.Color>
		{
			private TailoringTitleTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternModelSchemaDiagram.TailoringTitleTextColor domain property value handler.
			/// </summary>
			public static readonly TailoringTitleTextColorPropertyHandler Instance = new TailoringTitleTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternModelSchemaDiagram.TailoringTitleTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringTitleTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternModelSchemaDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringTitleTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternModelSchemaDiagramBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringTitleTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowHiddenEntries domain property code
		
		/// <summary>
		/// ShowHiddenEntries domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowHiddenEntriesDomainPropertyId = new global::System.Guid(0x6c89c15a, 0x5ef2, 0x4026, 0x9c, 0x1f, 0x28, 0xb5, 0xc4, 0x15, 0xcf, 0xe1);
		
		/// <summary>
		/// Storage for ShowHiddenEntries
		/// </summary>
		private global::System.Boolean showHiddenEntriesPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShowHiddenEntries domain property.
		/// Whether to display the hidden items on this model.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/ShowHiddenEntries.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/ShowHiddenEntries.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchemaDiagram/ShowHiddenEntries.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("6c89c15a-5ef2-4026-9c1f-28b5c415cfe1")]
		public global::System.Boolean ShowHiddenEntries
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showHiddenEntriesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowHiddenEntriesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternModelSchemaDiagram.ShowHiddenEntries domain property.
		/// </summary>
		internal sealed partial class ShowHiddenEntriesPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaDiagramBase, global::System.Boolean>
		{
			private ShowHiddenEntriesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternModelSchemaDiagram.ShowHiddenEntries domain property value handler.
			/// </summary>
			public static readonly ShowHiddenEntriesPropertyHandler Instance = new ShowHiddenEntriesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternModelSchemaDiagram.ShowHiddenEntries domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowHiddenEntriesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PatternModelSchemaDiagramBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.showHiddenEntriesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternModelSchemaDiagramBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showHiddenEntriesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass PatternModelSchemaDiagram
	/// Description for NuPattern.Runtime.Schema.PatternModelSchemaDiagram
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class PatternModelSchemaDiagram : PatternModelSchemaDiagramBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternModelSchemaDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternModelSchemaDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.CollectionSchema), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ElementSchema), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ExtensionPointSchema), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternSchema), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ViewSchema), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority + 1, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ViewHasElements), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ElementHasElements), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::NuPattern.Runtime.Schema.CollectionSchema)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForCollectionSchema(CollectionSchema childElement)
					// {
					// }
					// must be implemented in a partial class of NuPattern.Runtime.Schema.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForCollectionSchema((global::NuPattern.Runtime.Schema.CollectionSchema)childElement);
				} else
				if(childElement is global::NuPattern.Runtime.Schema.ElementSchema)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForElementSchema(ElementSchema childElement)
					// {
					// }
					// must be implemented in a partial class of NuPattern.Runtime.Schema.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForElementSchema((global::NuPattern.Runtime.Schema.ElementSchema)childElement);
				} else
				if(childElement is global::NuPattern.Runtime.Schema.ExtensionPointSchema)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForExtensionPointSchema(ExtensionPointSchema childElement)
					// {
					// }
					// must be implemented in a partial class of NuPattern.Runtime.Schema.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForExtensionPointSchema((global::NuPattern.Runtime.Schema.ExtensionPointSchema)childElement);
				} else
				if(childElement is global::NuPattern.Runtime.Schema.PatternSchema)
				{
					parentElement = GetParentForPatternSchema((global::NuPattern.Runtime.Schema.PatternSchema)childElement);
				} else
				if(childElement is global::NuPattern.Runtime.Schema.ViewSchema)
				{
					parentElement = GetParentForViewSchema((global::NuPattern.Runtime.Schema.ViewSchema)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::NuPattern.Runtime.Schema.PatternModelSchema GetParentForPatternSchema( global::NuPattern.Runtime.Schema.PatternSchema root )
			{
				// Segments 0 and 1
				global::NuPattern.Runtime.Schema.PatternModelSchema result = root.PatternModel;
				if ( result == null ) return null;
				return result;
			}
			public static global::NuPattern.Runtime.Schema.PatternSchema GetParentForViewSchema( global::NuPattern.Runtime.Schema.ViewSchema root )
			{
				// Segments 0 and 1
				global::NuPattern.Runtime.Schema.PatternSchema result = root.Pattern;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
		/// <summary>
		/// Rule to update compartments when an item is added to the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemAddRule : DslModeling::AddRule
		{
			/// <summary>
			/// Called when an element is added. 
			/// </summary>
			/// <param name="e"></param>
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				ElementAdded(e, false);
			}
	
			internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if (e.ModelElement.IsDeleted)
					return;
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetPatternSchemaForPatternShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.IEnumerable elements = GetPatternSchemaForPatternShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.IEnumerable elements = GetPatternSchemaForPatternShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetElementSchemaForElementShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.IEnumerable elements = GetElementSchemaForElementShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.IEnumerable elements = GetElementSchemaForElementShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.IEnumerable elements = GetCollectionSchemaForCollectionShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetCollectionSchemaForCollectionShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.IEnumerable elements = GetCollectionSchemaForCollectionShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.IEnumerable elements = GetExtensionPointSchemaForExtensionPointShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ExtensionPointShape), "Properties", repaintOnly);
				}
			}
			
			#region static DomainPath traversal methods to get the list of compartments to update
			internal static global::System.Collections.ICollection GetPatternSchemaForPatternShapePropertiesFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasProperties root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetPatternSchemaForPatternShapeProperties(global::NuPattern.Runtime.Schema.PropertySchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetPatternSchemaForPatternShapeAutomationFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetPatternSchemaForPatternShapeAutomation(global::NuPattern.Runtime.Schema.AutomationSettingsSchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetPatternSchemaForPatternShapeLaunchPointsFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetPatternSchemaForPatternShapeLaunchPoints(global::NuPattern.Runtime.Schema.AutomationSettingsSchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetElementSchemaForElementShapePropertiesFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasProperties root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetElementSchemaForElementShapeProperties(global::NuPattern.Runtime.Schema.PropertySchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetElementSchemaForElementShapeAutomationFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetElementSchemaForElementShapeAutomation(global::NuPattern.Runtime.Schema.AutomationSettingsSchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetElementSchemaForElementShapeLaunchPointsFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetElementSchemaForElementShapeLaunchPoints(global::NuPattern.Runtime.Schema.AutomationSettingsSchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetCollectionSchemaForCollectionShapeLaunchPointsFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetCollectionSchemaForCollectionShapeLaunchPoints(global::NuPattern.Runtime.Schema.AutomationSettingsSchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetCollectionSchemaForCollectionShapePropertiesFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasProperties root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetCollectionSchemaForCollectionShapeProperties(global::NuPattern.Runtime.Schema.PropertySchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetCollectionSchemaForCollectionShapeAutomationFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetCollectionSchemaForCollectionShapeAutomation(global::NuPattern.Runtime.Schema.AutomationSettingsSchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetExtensionPointSchemaForExtensionPointShapePropertiesFromLastLink(global::NuPattern.Runtime.Schema.PatternElementHasProperties root)
			{
				// Segment 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.PatternElementSchema;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			internal static global::System.Collections.ICollection GetExtensionPointSchemaForExtensionPointShapeProperties(global::NuPattern.Runtime.Schema.PropertySchema root)
			{
				// Segments 1 and 0
				global::NuPattern.Runtime.Schema.PatternElementSchema result = root.Owner;
				if ( result == null ) return new DslModeling::ModelElement[0];
				return new DslModeling::ModelElement[] {result};
			}
			#endregion
	
			#region helper method to update compartments 
			/// <summary>
			/// Updates the compartments for the shapes associated to the given list of model elements
			/// </summary>
			/// <param name="elements">List of model elements</param>
			/// <param name="shapeType">The type of shape that needs updating</param>
			/// <param name="compartmentName">The name of the compartment to update</param>
			/// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
			internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly)
			{
				foreach (DslModeling::ModelElement element in elements)
				{
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
					foreach (DslDiagrams::PresentationElement pel in pels)
					{
						DslDiagrams::CompartmentShape compartmentShape = pel as DslDiagrams::CompartmentShape;
						if (compartmentShape != null && shapeType.IsAssignableFrom(compartmentShape.GetType()))
						{
							if (repaintOnly)
							{
								compartmentShape.Invalidate();
							}
							else
							{
								foreach(DslDiagrams::CompartmentMapping mapping in compartmentShape.GetCompartmentMappings())
								{
									if(mapping.CompartmentId==compartmentName)
									{
										mapping.InitializeCompartmentShape(compartmentShape);
										break;
									}
								}
							}
						}
					}
				}
			}
			#endregion
		}
		
		/// <summary>
		/// Rule to update compartments when an items is removed from the list
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
		{
			/// <summary>
			/// Called when an element is deleted
			/// </summary>
			/// <param name="e"></param>
			public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
			{
				ElementDeleted(e, false);
			}
			
			internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetElementSchemaForElementShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetElementSchemaForElementShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetElementSchemaForElementShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PatternElementHasProperties)
				{
					global::System.Collections.ICollection elements = CompartmentItemAddRule.GetExtensionPointSchemaForExtensionPointShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ExtensionPointShape), "Properties", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when the property on an item being displayed changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PropertySchema), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.AutomationSettingsSchema), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
		{
			/// <summary>
			/// Called when an element is changed
			/// </summary>
			/// <param name="e"></param>
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				ElementPropertyChanged(e, false);
			}
			
			internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PropertySchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.PropertySchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.AutomationSettingsSchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.AutomationSettingsSchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.AutomationSettingsSchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.AutomationSettingsSchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PropertySchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.PropertySchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.AutomationSettingsSchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.AutomationSettingsSchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.AutomationSettingsSchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.AutomationSettingsSchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.AutomationSettingsSchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.AutomationSettingsSchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "LaunchPoints", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PropertySchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.PropertySchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Properties", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.AutomationSettingsSchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.AutomationSettingsSchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Automation", repaintOnly);
				}
				if(e.ModelElement is global::NuPattern.Runtime.Schema.PropertySchema && e.DomainProperty.Id == global::NuPattern.Runtime.Schema.PropertySchema.NameDomainPropertyId)
				{
					global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetExtensionPointSchemaForExtensionPointShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.ModelElement);
					CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ExtensionPointShape), "Properties", repaintOnly);
				}
			}
		}
		
		/// <summary>
		/// Rule to update compartments when a roleplayer change happens
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
		{
			/// <summary>
			/// Called when the roleplayer on a link changes.
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				RolePlayerChanged(e, false);
			}
			
			internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetPatternSchemaForPatternShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PropertySchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.PatternShape compartmentShape = pel as global::NuPattern.Runtime.Schema.PatternShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.PatternShape compartmentShape = pel as global::NuPattern.Runtime.Schema.PatternShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Automation", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Automation", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.PatternShape compartmentShape = pel as global::NuPattern.Runtime.Schema.PatternShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[2].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "LaunchPoints", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "LaunchPoints", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetElementSchemaForElementShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PropertySchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.ElementShape compartmentShape = pel as global::NuPattern.Runtime.Schema.ElementShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetElementSchemaForElementShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.ElementShape compartmentShape = pel as global::NuPattern.Runtime.Schema.ElementShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Automation", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Automation", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetElementSchemaForElementShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.ElementShape compartmentShape = pel as global::NuPattern.Runtime.Schema.ElementShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[2].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "LaunchPoints", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "LaunchPoints", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.CollectionShape compartmentShape = pel as global::NuPattern.Runtime.Schema.CollectionShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeLaunchPointsFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "LaunchPoints", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "LaunchPoints", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PropertySchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.CollectionShape compartmentShape = pel as global::NuPattern.Runtime.Schema.CollectionShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[1].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.CollectionShape compartmentShape = pel as global::NuPattern.Runtime.Schema.CollectionShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[2].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeAutomationFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Automation", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Automation", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(e.DomainRole.IsSource)
					{
						//global::System.Collections.IEnumerable oldElements = CompartmentItemAddRule.GetExtensionPointSchemaForExtensionPointShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PropertySchema)e.OldRolePlayer);
						//foreach(DslModeling::ModelElement element in oldElements)
						//{
						//	DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element);
						//	foreach(DslDiagrams::PresentationElement pel in pels)
						//	{
						//		global::NuPattern.Runtime.Schema.ExtensionPointShape compartmentShape = pel as global::NuPattern.Runtime.Schema.ExtensionPointShape;
						//		if(compartmentShape != null)
						//		{
						//			compartmentShape.GetCompartmentMappings()[0].InitializeCompartmentShape(compartmentShape);
						//		}
						//	}
						//}
						
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetExtensionPointSchemaForExtensionPointShapePropertiesFromLastLink((global::NuPattern.Runtime.Schema.PatternElementHasProperties)e.ElementLink);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ExtensionPointShape), "Properties", repaintOnly);
					}
					else 
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetExtensionPointSchemaForExtensionPointShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.NewRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ExtensionPointShape), "Properties", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// Rule to update compartments when the order of items in the list changes.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
		internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
		{
			/// <summary>
			/// Called when the order of a roleplayer in a relationship changes
			/// </summary>
			/// <param name="e"></param>
			public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
			{
				RolePlayerPositionChanged(e, false);
			}
			
			internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
			{
				if(e==null) throw new global::System.ArgumentNullException("e");
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "Automation", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetPatternSchemaForPatternShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.PatternShape), "LaunchPoints", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "Automation", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetElementSchemaForElementShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ElementShape), "LaunchPoints", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeLaunchPoints((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "LaunchPoints", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Properties", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetCollectionSchemaForCollectionShapeAutomation((global::NuPattern.Runtime.Schema.AutomationSettingsSchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.CollectionShape), "Automation", repaintOnly);
					}
				}
				if(typeof(global::NuPattern.Runtime.Schema.PatternElementHasProperties).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
				{
					if(!e.CounterpartDomainRole.IsSource)
					{
						global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetExtensionPointSchemaForExtensionPointShapeProperties((global::NuPattern.Runtime.Schema.PropertySchema)e.CounterpartRolePlayer);
						CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::NuPattern.Runtime.Schema.ExtensionPointShape), "Properties", repaintOnly);
					}
				}
			}
		}
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ViewHasElements), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ElementHasElements), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::NuPattern.Runtime.Schema.ViewHasElements.CardinalityCaptionDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::NuPattern.Runtime.Schema.ViewHasElementsConnector.FindViewHasElementsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ViewHasElements.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ViewHasElementsConnector.FindViewHasElementsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ViewHasElements.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ViewHasElementsConnector.FindViewHasElementsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ViewHasElements.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ViewHasElementsConnector.FindViewHasElementsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ViewHasElements.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::NuPattern.Runtime.Schema.ElementHasElements.CardinalityCaptionDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::NuPattern.Runtime.Schema.ElementHasElementsConnector.FindElementHasElementsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ElementHasElements.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ElementHasElementsConnector.FindElementHasElementsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ElementHasElements.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.CardinalityCaptionDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::NuPattern.Runtime.Schema.ElementHasExtensionPointsConnector.FindElementHasExtensionPointsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ElementHasExtensionPointsConnector.FindElementHasExtensionPointsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ElementHasExtensionPointsConnector.FindElementHasExtensionPointsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ElementHasExtensionPointsConnector.FindElementHasExtensionPointsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.CardinalityCaptionDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::NuPattern.Runtime.Schema.ViewHasExtensionPointsConnector.FindViewHasExtensionPointsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ViewHasExtensionPointsConnector.FindViewHasExtensionPointsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.DomainClassId);
					}
					decorator = global::NuPattern.Runtime.Schema.ViewHasExtensionPointsConnector.FindViewHasExtensionPointsConnectorDecorator("CardinalityDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ViewHasElements), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ElementHasElements), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::NuPattern.Runtime.Schema.PatternModelSchemaDiagram diagram = linkShape.Diagram as global::NuPattern.Runtime.Schema.PatternModelSchemaDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
