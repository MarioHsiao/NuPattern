//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass PatternModelSchema
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("76e57dce-a400-4ed1-bbba-00e7d337f5ad")]
	public abstract partial class PatternModelSchemaBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PatternModelSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76e57dce, 0xa400, 0x4ed1, 0xbb, 0xba, 0x00, 0xe7, 0xd3, 0x37, 0xf5, 0xad);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PatternModelSchemaBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region BaseVersion domain property code
		
		/// <summary>
		/// BaseVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseVersionDomainPropertyId = new global::System.Guid(0xadc27259, 0x7812, 0x4979, 0xb3, 0x34, 0x3b, 0x49, 0x23, 0xfb, 0x77, 0x63);
		
		/// <summary>
		/// Storage for BaseVersion
		/// </summary>
		private global::System.String baseVersionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseVersion domain property.
		/// The version of the base pattern line that this pattern line derives from.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchema/BaseVersion.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PatternModelSchema/BaseVersion.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchema/BaseVersion.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("adc27259-7812-4979-b334-3b4923fb7763")]
		public global::System.String BaseVersion
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return baseVersionPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        BaseVersionPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PatternModelSchema.BaseVersion domain property.
		/// </summary>
		internal sealed partial class BaseVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaBase, global::System.String>
		{
		    private BaseVersionPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PatternModelSchema.BaseVersion domain property value handler.
		    /// </summary>
		    public static readonly BaseVersionPropertyHandler Instance = new BaseVersionPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PatternModelSchema.BaseVersion domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return BaseVersionDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PatternModelSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.baseVersionPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PatternModelSchemaBase element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PatternModelSchemaBase element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.baseVersionPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PatternModelSchemaBase>(x => x.BaseVersion);
		    }
		}
		
		#endregion
		#region BaseId domain property code
		
		/// <summary>
		/// BaseId domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseIdDomainPropertyId = new global::System.Guid(0xd02ca418, 0x3c63, 0x46b4, 0xa3, 0xed, 0x1c, 0xc3, 0x63, 0x22, 0xff, 0xcd);
		
		/// <summary>
		/// Storage for BaseId
		/// </summary>
		private global::System.String baseIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseId domain property.
		/// The unique identifier of the base pattern line that this pattern line derives
		/// from.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelSchema/BaseId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PatternModelSchema/BaseId.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelSchema/BaseId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("d02ca418-3c63-46b4-a3ed-1cc36322ffcd")]
		public global::System.String BaseId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return baseIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        BaseIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PatternModelSchema.BaseId domain property.
		/// </summary>
		internal sealed partial class BaseIdPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternModelSchemaBase, global::System.String>
		{
		    private BaseIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PatternModelSchema.BaseId domain property value handler.
		    /// </summary>
		    public static readonly BaseIdPropertyHandler Instance = new BaseIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PatternModelSchema.BaseId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return BaseIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PatternModelSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.baseIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PatternModelSchemaBase element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PatternModelSchemaBase element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.baseIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PatternModelSchemaBase>(x => x.BaseId);
		    }
		}
		
		#endregion
		#region Pattern opposite domain role accessor
		/// <summary>
		/// Gets or sets Pattern.
		/// The pattern in this definition.
		/// </summary>
		internal virtual PatternSchema Pattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternModelSchemaDomainRoleId) as PatternSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternModelSchemaDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.PatternSchema.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: PatternModelHasPattern.Pattern
					if (this.Pattern != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Schema.PatternSchema sourcePatternSchema1 = sourceElement as global::NuPattern.Runtime.Schema.PatternSchema;
			if (sourcePatternSchema1 != null)
			{
				// Create link for path PatternModelHasPattern.Pattern
				this.Pattern = sourcePatternSchema1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Schema.PatternSchema sourcePatternSchema1 = sourceElement as global::NuPattern.Runtime.Schema.PatternSchema;
			if (sourcePatternSchema1 != null)
			{
				// Delete link for path PatternModelHasPattern.Pattern
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.PatternModelHasPattern.GetLinks((global::NuPattern.Runtime.Schema.PatternModelSchema)this, sourcePatternSchema1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternModelSchemaDomainRoleId, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternSchemaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass PatternModelSchema
	/// The definition of the pattern in this toolkit.
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class PatternModelSchema : PatternModelSchemaBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternModelSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternModelSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass PatternSchema
	/// The definition of the pattern.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("15a27251-8feb-4fae-b6d8-703a5697d3eb")]
	internal partial class PatternSchema : PatternElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PatternSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x15a27251, 0x8feb, 0x4fae, 0xb6, 0xd8, 0x70, 0x3a, 0x56, 0x97, 0xd3, 0xeb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExtensionId domain property code
		
		/// <summary>
		/// ExtensionId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionIdDomainPropertyId = new global::System.Guid(0x1ac193fd, 0x0b29, 0x439b, 0x80, 0x09, 0xfc, 0x6d, 0x6f, 0x50, 0xec, 0x0c);
		
		/// <summary>
		/// Gets or sets the value of ExtensionId domain property.
		/// The identifier of the Visual Studio extension that deploys this pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternSchema/ExtensionId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PatternSchema/ExtensionId.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternSchema/ExtensionId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("1ac193fd-0b29-439b-8009-fc6d6f50ec0c")]
		public global::System.String ExtensionId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return ExtensionIdPropertyHandler.Instance.GetValue(this);
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        ExtensionIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PatternSchema.ExtensionId domain property.
		/// </summary>
		internal sealed partial class ExtensionIdPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternSchema, global::System.String>
		{
		    private ExtensionIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PatternSchema.ExtensionId domain property value handler.
		    /// </summary>
		    public static readonly ExtensionIdPropertyHandler Instance = new ExtensionIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PatternSchema.ExtensionId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ExtensionIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PatternSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for ExtensionId because its Kind is
		        // set to CustomStorage. Please provide the GetExtensionIdValue()
		        // method on the domain class.
		        return element.GetExtensionIdValue();
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PatternSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PatternSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        // There is no storage for ExtensionId because its Kind is
		        // set to CustomStorage. Please provide the SetExtensionIdValue()
		        // method on the domain class.
		        element.SetExtensionIdValue(newValue);
		        ValueChanged(element, oldValue, GetValue(element));
		        element.PropertyChanges.NotifyChanged<PatternSchema>(x => x.ExtensionId);
		    }
		}
		
		#endregion
		#region CurrentDiagramId domain property code
		
		/// <summary>
		/// CurrentDiagramId domain property Id.
		/// </summary>
		public static readonly global::System.Guid CurrentDiagramIdDomainPropertyId = new global::System.Guid(0x1678920d, 0xc2ac, 0x4160, 0x8a, 0xe6, 0xbb, 0x64, 0x3e, 0x52, 0xf2, 0xcd);
		
		/// <summary>
		/// Storage for CurrentDiagramId
		/// </summary>
		private global::System.String currentDiagramIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CurrentDiagramId domain property.
		/// Gets the currently opened diagram identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternSchema/CurrentDiagramId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternSchema/CurrentDiagramId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("1678920d-c2ac-4160-8ae6-bb643e52f2cd")]
		public global::System.String CurrentDiagramId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return currentDiagramIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CurrentDiagramIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PatternSchema.CurrentDiagramId domain property.
		/// </summary>
		internal sealed partial class CurrentDiagramIdPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternSchema, global::System.String>
		{
		    private CurrentDiagramIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PatternSchema.CurrentDiagramId domain property value handler.
		    /// </summary>
		    public static readonly CurrentDiagramIdPropertyHandler Instance = new CurrentDiagramIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PatternSchema.CurrentDiagramId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CurrentDiagramIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PatternSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.currentDiagramIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PatternSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PatternSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.currentDiagramIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PatternSchema>(x => x.CurrentDiagramId);
		    }
		}
		
		#endregion
		#region PatternLink domain property code
		
		/// <summary>
		/// PatternLink domain property Id.
		/// </summary>
		public static readonly global::System.Guid PatternLinkDomainPropertyId = new global::System.Guid(0x97c8fce3, 0x87a7, 0x45d6, 0x8c, 0x3b, 0xdb, 0xb0, 0xd6, 0x8b, 0x0f, 0x1f);
		
		/// <summary>
		/// Storage for PatternLink
		/// </summary>
		private global::System.String patternLinkPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PatternLink domain property.
		/// The identifier of the instance of this pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternSchema/PatternLink.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternSchema/PatternLink.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("97c8fce3-87a7-45d6-8c3b-dbb0d68b0f1f")]
		public global::System.String PatternLink
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return patternLinkPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    internal set
		    {
		        PatternLinkPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PatternSchema.PatternLink domain property.
		/// </summary>
		internal sealed partial class PatternLinkPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternSchema, global::System.String>
		{
		    private PatternLinkPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PatternSchema.PatternLink domain property value handler.
		    /// </summary>
		    public static readonly PatternLinkPropertyHandler Instance = new PatternLinkPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PatternSchema.PatternLink domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return PatternLinkDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PatternSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.patternLinkPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PatternSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PatternSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.patternLinkPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PatternSchema>(x => x.PatternLink);
		    }
		}
		
		#endregion
		#region PatternModel opposite domain role accessor
		/// <summary>
		/// Gets or sets PatternModel.
		/// The definition of the pattern.
		/// </summary>
		public virtual PatternModelSchema PatternModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternSchemaDomainRoleId) as PatternModelSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternSchemaDomainRoleId, value);
			}
		}
		#endregion
		#region Views opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Views.
		/// The views of this pattern.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ViewSchema> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ViewSchema>, ViewSchema>(global::NuPattern.Runtime.Schema.PatternHasViews.PatternSchemaDomainRoleId);
			}
		}
		#endregion
		#region ProvidedExtensionPoints opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProvidedExtensionPoints.
		/// The extension points of other patterns that this pattern extends.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProvidedExtensionPointSchema> ProvidedExtensionPoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProvidedExtensionPointSchema>, ProvidedExtensionPointSchema>(global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.PatternSchemaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.ViewSchema.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Schema.ViewSchema sourceViewSchema1 = sourceElement as global::NuPattern.Runtime.Schema.ViewSchema;
			if (sourceViewSchema1 != null)
			{
				// Create link for path PatternHasViews.Views
				this.Views.Add(sourceViewSchema1);

				return;
			}
				
			global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema sourceProvidedExtensionPointSchema2 = sourceElement as global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema;
			if (sourceProvidedExtensionPointSchema2 != null)
			{
				// Create link for path PatternHasProvidedExtensionPoints.ProvidedExtensionPoints
				this.ProvidedExtensionPoints.Add(sourceProvidedExtensionPointSchema2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Schema.ViewSchema sourceViewSchema1 = sourceElement as global::NuPattern.Runtime.Schema.ViewSchema;
			if (sourceViewSchema1 != null)
			{
				// Delete link for path PatternHasViews.Views
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.PatternHasViews.GetLinks((global::NuPattern.Runtime.Schema.PatternSchema)this, sourceViewSchema1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.PatternHasViews.PatternSchemaDomainRoleId, global::NuPattern.Runtime.Schema.PatternHasViews.ViewSchemaDomainRoleId);
				}

				return;
			}
				
			global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema sourceProvidedExtensionPointSchema2 = sourceElement as global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema;
			if (sourceProvidedExtensionPointSchema2 != null)
			{
				// Delete link for path PatternHasProvidedExtensionPoints.ProvidedExtensionPoints
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.GetLinks((global::NuPattern.Runtime.Schema.PatternSchema)this, sourceProvidedExtensionPointSchema2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.PatternSchemaDomainRoleId, global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.ProvidedExtensionPointSchemaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass NamedElementSchema
	/// An element that has a unique name.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("50bd80bb-6516-4bfc-a5e5-8ce26fc23224")]
	internal abstract partial class NamedElementSchema : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElementSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x50bd80bb, 0x6516, 0x4bfc, 0xa5, 0xe5, 0x8c, 0xe2, 0x6f, 0xc2, 0x32, 0x24);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElementSchema(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3e893411, 0xe795, 0x45d4, 0x89, 0xb4, 0x1d, 0x6d, 0x8b, 0xee, 0xf0, 0xec);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The well-known name of this item in this model.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/Name.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/Name.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/Name.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::ElementName(typeof(NamedElementSchemaNameProvider))]
		[DslModeling::DomainObjectId("3e893411-e795-45d4-89b4-1d6d8beef0ec")]
		public global::System.String Name
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return namePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        NamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
		    private NamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.Name domain property value handler.
		    /// </summary>
		    public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.Name domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return NameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.namePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.namePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.Name);
		    }
		}
		
		#endregion
		#region BaseId domain property code
		
		/// <summary>
		/// BaseId domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseIdDomainPropertyId = new global::System.Guid(0x143d5d67, 0x86e6, 0x4506, 0x93, 0x70, 0xe9, 0xf0, 0x5f, 0xbc, 0xfd, 0x9f);
		
		/// <summary>
		/// Storage for BaseId
		/// </summary>
		private global::System.String baseIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of BaseId domain property.
		/// The identifier of the inherited variability model.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/BaseId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/BaseId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("143d5d67-86e6-4506-9370-e9f05fbcfd9f")]
		public global::System.String BaseId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return baseIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    internal set
		    {
		        BaseIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.BaseId domain property.
		/// </summary>
		internal sealed partial class BaseIdPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
		    private BaseIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.BaseId domain property value handler.
		    /// </summary>
		    public static readonly BaseIdPropertyHandler Instance = new BaseIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.BaseId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return BaseIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.baseIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.baseIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.BaseId);
		    }
		}
		
		#endregion
		#region DisplayName domain property code
		
		/// <summary>
		/// DisplayName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayNameDomainPropertyId = new global::System.Guid(0x3cf4da77, 0x3984, 0x4048, 0x91, 0x3f, 0x10, 0x14, 0x11, 0x8c, 0xee, 0x9f);
		
		/// <summary>
		/// Gets or sets the value of DisplayName domain property.
		/// The name used for instances of this item, as seen by the user. Also used to name
		/// associated artifacts/configuration created for this item.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/DisplayName.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/DisplayName.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/DisplayName.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("3cf4da77-3984-4048-913f-1014118cee9f")]
		public global::System.String DisplayName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return DisplayNamePropertyHandler.Instance.GetValue(this);
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        DisplayNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.DisplayName domain property.
		/// </summary>
		internal sealed partial class DisplayNamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
		    private DisplayNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.DisplayName domain property value handler.
		    /// </summary>
		    public static readonly DisplayNamePropertyHandler Instance = new DisplayNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.DisplayName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DisplayNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for DisplayName because its Kind is
		        // set to CustomStorage. Please provide the GetDisplayNameValue()
		        // method on the domain class.
		        return element.GetDisplayNameValue();
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        // There is no storage for DisplayName because its Kind is
		        // set to CustomStorage. Please provide the SetDisplayNameValue()
		        // method on the domain class.
		        element.SetDisplayNameValue(newValue);
		        ValueChanged(element, oldValue, GetValue(element));
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.DisplayName);
		    }
		}
		
		#endregion
		#region IsDisplayNameTracking domain property code
		
		/// <summary>
		/// IsDisplayNameTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDisplayNameTrackingDomainPropertyId = new global::System.Guid(0x8e1985e3, 0x334e, 0x4e0c, 0x9b, 0x12, 0x78, 0x26, 0x0e, 0xb8, 0xa4, 0x03);
		
		/// <summary>
		/// Storage for IsDisplayNameTracking
		/// </summary>
		private global::System.Boolean isDisplayNameTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDisplayNameTracking domain property.
		/// Used to track whether the user changed the display name manually.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/IsDisplayNameTracking.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/IsDisplayNameTracking.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/IsDisplayNameTracking.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("8e1985e3-334e-4e0c-9b12-78260eb8a403")]
		internal global::System.Boolean IsDisplayNameTracking
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isDisplayNameTrackingPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        IsDisplayNameTrackingPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.IsDisplayNameTracking domain property.
		/// </summary>
		internal sealed partial class IsDisplayNameTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.Boolean>
		{
		    private IsDisplayNameTrackingPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.IsDisplayNameTracking domain property value handler.
		    /// </summary>
		    public static readonly IsDisplayNameTrackingPropertyHandler Instance = new IsDisplayNameTrackingPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.IsDisplayNameTracking domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsDisplayNameTrackingDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isDisplayNameTrackingPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isDisplayNameTrackingPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.IsDisplayNameTracking);
		    }
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xd60b22b2, 0x540e, 0x4024, 0x9a, 0x15, 0x6a, 0x66, 0xfc, 0x37, 0x19, 0xba);
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The description of this item displayed to the user.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/Description.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/Description.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/Description.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("d60b22b2-540e-4024-9a15-6a66fc3719ba")]
		public global::System.String Description
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return DescriptionPropertyHandler.Instance.GetValue(this);
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        DescriptionPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
		    private DescriptionPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.Description domain property value handler.
		    /// </summary>
		    public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.Description domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DescriptionDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for Description because its Kind is
		        // set to CustomStorage. Please provide the GetDescriptionValue()
		        // method on the domain class.
		        return element.GetDescriptionValue();
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        // There is no storage for Description because its Kind is
		        // set to CustomStorage. Please provide the SetDescriptionValue()
		        // method on the domain class.
		        element.SetDescriptionValue(newValue);
		        ValueChanged(element, oldValue, GetValue(element));
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.Description);
		    }
		}
		
		#endregion
		#region IsDescriptionTracking domain property code
		
		/// <summary>
		/// IsDescriptionTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDescriptionTrackingDomainPropertyId = new global::System.Guid(0x465a9853, 0x9f76, 0x45d1, 0x81, 0x96, 0x10, 0xca, 0x1c, 0x3f, 0x3e, 0xd3);
		
		/// <summary>
		/// Storage for IsDescriptionTracking
		/// </summary>
		private global::System.Boolean isDescriptionTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDescriptionTracking domain property.
		/// Used to track whether the user changed the description manually.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/IsDescriptionTracking.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/IsDescriptionTracking.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/IsDescriptionTracking.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("465a9853-9f76-45d1-8196-10ca1c3f3ed3")]
		internal global::System.Boolean IsDescriptionTracking
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isDescriptionTrackingPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        IsDescriptionTrackingPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.IsDescriptionTracking domain property.
		/// </summary>
		internal sealed partial class IsDescriptionTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.Boolean>
		{
		    private IsDescriptionTrackingPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.IsDescriptionTracking domain property value handler.
		    /// </summary>
		    public static readonly IsDescriptionTrackingPropertyHandler Instance = new IsDescriptionTrackingPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.IsDescriptionTracking domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsDescriptionTrackingDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isDescriptionTrackingPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isDescriptionTrackingPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.IsDescriptionTracking);
		    }
		}
		
		#endregion
		#region IsInheritedFromBase domain property code
		
		/// <summary>
		/// IsInheritedFromBase domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInheritedFromBaseDomainPropertyId = new global::System.Guid(0xeabb729a, 0x4396, 0x4bfb, 0xa4, 0x20, 0xcc, 0xa5, 0x52, 0x4b, 0xf8, 0x3c);
		
		/// <summary>
		/// Gets or sets the value of IsInheritedFromBase domain property.
		/// Whether the element is derived from a base variability model definition.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/IsInheritedFromBase.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/IsInheritedFromBase.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("eabb729a-4396-4bfb-a420-cca5524bf83c")]
		public global::System.Boolean IsInheritedFromBase
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return IsInheritedFromBasePropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.IsInheritedFromBase domain property.
		/// </summary>
		internal sealed partial class IsInheritedFromBasePropertyHandler : DslModeling::CalculatedPropertyValueHandler<NamedElementSchema, global::System.Boolean>
		{
		    private IsInheritedFromBasePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.IsInheritedFromBase domain property value handler.
		    /// </summary>
		    public static readonly IsInheritedFromBasePropertyHandler Instance = new IsInheritedFromBasePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.IsInheritedFromBase domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsInheritedFromBaseDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for IsInheritedFromBase because its Kind is
		        // set to Calculated. Please provide the GetIsInheritedFromBaseValue()
		        // method on the domain class.
		        return element.GetIsInheritedFromBaseValue();
		    }
		
		}
		
		#endregion
		#region SchemaPath domain property code
		
		/// <summary>
		/// SchemaPath domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaPathDomainPropertyId = new global::System.Guid(0x08aa5eae, 0x38da, 0x48fe, 0x81, 0x06, 0x02, 0x2b, 0xb0, 0x53, 0x31, 0x90);
		
		/// <summary>
		/// Gets or sets the value of SchemaPath domain property.
		/// The path of this element in the variability model.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/SchemaPath.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/SchemaPath.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/SchemaPath.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("08aa5eae-38da-48fe-8106-022bb0533190")]
		internal global::System.String SchemaPath
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return SchemaPathPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.SchemaPath domain property.
		/// </summary>
		internal sealed partial class SchemaPathPropertyHandler : DslModeling::CalculatedPropertyValueHandler<NamedElementSchema, global::System.String>
		{
		    private SchemaPathPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.SchemaPath domain property value handler.
		    /// </summary>
		    public static readonly SchemaPathPropertyHandler Instance = new SchemaPathPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.SchemaPath domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return SchemaPathDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for SchemaPath because its Kind is
		        // set to Calculated. Please provide the GetSchemaPathValue()
		        // method on the domain class.
		        return element.GetSchemaPathValue();
		    }
		
		}
		
		#endregion
		#region IsSystem domain property code
		
		/// <summary>
		/// IsSystem domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsSystemDomainPropertyId = new global::System.Guid(0xd749fd5a, 0x8b9d, 0x4925, 0xac, 0xb6, 0x2e, 0xea, 0x03, 0xc3, 0xb6, 0xd0);
		
		/// <summary>
		/// Storage for IsSystem
		/// </summary>
		private global::System.Boolean isSystemPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsSystem domain property.
		/// Whether this element is hidden from the design-view. Used by automation
		/// extensions.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/IsSystem.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/IsSystem.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/IsSystem.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d749fd5a-8b9d-4925-acb6-2eea03c3b6d0")]
		public global::System.Boolean IsSystem
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isSystemPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IsSystemPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.IsSystem domain property.
		/// </summary>
		internal sealed partial class IsSystemPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.Boolean>
		{
		    private IsSystemPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.IsSystem domain property value handler.
		    /// </summary>
		    public static readonly IsSystemPropertyHandler Instance = new IsSystemPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.IsSystem domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsSystemDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isSystemPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isSystemPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.IsSystem);
		    }
		}
		
		#endregion
		#region CodeIdentifier domain property code
		
		/// <summary>
		/// CodeIdentifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeIdentifierDomainPropertyId = new global::System.Guid(0x048d7d20, 0x3602, 0x4ada, 0x85, 0x7c, 0x37, 0x09, 0xe6, 0x70, 0x14, 0x60);
		
		/// <summary>
		/// Gets or sets the value of CodeIdentifier domain property.
		/// The identifier used for naming generating code artifacts that represent this
		/// element. This identifier must be unique across the whole model.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/CodeIdentifier.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.NamedElementSchema/CodeIdentifier.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/CodeIdentifier.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("048d7d20-3602-4ada-857c-3709e6701460")]
		public global::System.String CodeIdentifier
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return CodeIdentifierPropertyHandler.Instance.GetValue(this);
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CodeIdentifierPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.CodeIdentifier domain property.
		/// </summary>
		internal sealed partial class CodeIdentifierPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.String>
		{
		    private CodeIdentifierPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.CodeIdentifier domain property value handler.
		    /// </summary>
		    public static readonly CodeIdentifierPropertyHandler Instance = new CodeIdentifierPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.CodeIdentifier domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CodeIdentifierDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for CodeIdentifier because its Kind is
		        // set to CustomStorage. Please provide the GetCodeIdentifierValue()
		        // method on the domain class.
		        return element.GetCodeIdentifierValue();
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        // There is no storage for CodeIdentifier because its Kind is
		        // set to CustomStorage. Please provide the SetCodeIdentifierValue()
		        // method on the domain class.
		        element.SetCodeIdentifierValue(newValue);
		        ValueChanged(element, oldValue, GetValue(element));
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.CodeIdentifier);
		    }
		}
		
		#endregion
		#region IsCodeIdentifierTracking domain property code
		
		/// <summary>
		/// IsCodeIdentifierTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCodeIdentifierTrackingDomainPropertyId = new global::System.Guid(0xf1112098, 0x59a1, 0x467d, 0xb0, 0x34, 0xdc, 0x1f, 0x35, 0x8b, 0x5e, 0x3b);
		
		/// <summary>
		/// Storage for IsCodeIdentifierTracking
		/// </summary>
		private global::System.Boolean isCodeIdentifierTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsCodeIdentifierTracking domain property.
		/// Used to track whether the user changed the  code identifier manually.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.NamedElementSchema/IsCodeIdentifierTracking.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.NamedElementSchema/IsCodeIdentifierTracking.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("f1112098-59a1-467d-b034-dc1f358b5e3b")]
		internal global::System.Boolean IsCodeIdentifierTracking
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isCodeIdentifierTrackingPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        IsCodeIdentifierTrackingPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the NamedElementSchema.IsCodeIdentifierTracking domain property.
		/// </summary>
		internal sealed partial class IsCodeIdentifierTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElementSchema, global::System.Boolean>
		{
		    private IsCodeIdentifierTrackingPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the NamedElementSchema.IsCodeIdentifierTracking domain property value handler.
		    /// </summary>
		    public static readonly IsCodeIdentifierTrackingPropertyHandler Instance = new IsCodeIdentifierTrackingPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the NamedElementSchema.IsCodeIdentifierTracking domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsCodeIdentifierTrackingDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(NamedElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isCodeIdentifierTrackingPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(NamedElementSchema element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(NamedElementSchema element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isCodeIdentifierTrackingPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<NamedElementSchema>(x => x.IsCodeIdentifierTracking);
		    }
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass PatternElementSchema
	/// A container of properties and automation.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("dbe13a31-7dcd-4fbd-a601-18ca765e264e")]
	internal abstract partial class PatternElementSchema : CustomizableElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PatternElementSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdbe13a31, 0x7dcd, 0x4fbd, 0xa6, 0x01, 0x18, 0xca, 0x76, 0x5e, 0x26, 0x4e);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PatternElementSchema(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValidationRules domain property code
		
		/// <summary>
		/// ValidationRules domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValidationRulesDomainPropertyId = new global::System.Guid(0x009e8fbb, 0x1e3a, 0x4fd4, 0x98, 0xba, 0x3e, 0x20, 0xe2, 0x50, 0x74, 0x28);
		
		/// <summary>
		/// Storage for ValidationRules
		/// </summary>
		private global::System.String validationRulesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ValidationRules domain property.
		/// The validation rules applied to this element.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementSchema/ValidationRules.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PatternElementSchema/ValidationRules.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementSchema/ValidationRules.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("009e8fbb-1e3a-4fd4-98ba-3e20e2507428")]
		public global::System.String ValidationRules
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return validationRulesPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ValidationRulesPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PatternElementSchema.ValidationRules domain property.
		/// </summary>
		internal sealed partial class ValidationRulesPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternElementSchema, global::System.String>
		{
		    private ValidationRulesPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PatternElementSchema.ValidationRules domain property value handler.
		    /// </summary>
		    public static readonly ValidationRulesPropertyHandler Instance = new ValidationRulesPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PatternElementSchema.ValidationRules domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ValidationRulesDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PatternElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.validationRulesPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PatternElementSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PatternElementSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.validationRulesPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PatternElementSchema>(x => x.ValidationRules);
		    }
		}
		
		#endregion
		#region Icon domain property code
		
		/// <summary>
		/// Icon domain property Id.
		/// </summary>
		public static readonly global::System.Guid IconDomainPropertyId = new global::System.Guid(0x036d59f2, 0x87d1, 0x49f3, 0xae, 0xe4, 0x4e, 0x73, 0xb3, 0x56, 0x6b, 0x2e);
		
		/// <summary>
		/// Storage for Icon
		/// </summary>
		private global::System.String iconPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Icon domain property.
		/// The icon for this item displayed to the user.
		/// </summary>
		[NuPattern.Runtime.Design.ImageFilter(NuPattern.Runtime.Design.ImageKind.Image )]
		[System.ComponentModel.Editor(typeof(NuPattern.Runtime.Design.ImageUriEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementSchema/Icon.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PatternElementSchema/Icon.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementSchema/Icon.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("036d59f2-87d1-49f3-aee4-4e73b3566b2e")]
		public global::System.String Icon
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return iconPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IconPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PatternElementSchema.Icon domain property.
		/// </summary>
		internal sealed partial class IconPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternElementSchema, global::System.String>
		{
		    private IconPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PatternElementSchema.Icon domain property value handler.
		    /// </summary>
		    public static readonly IconPropertyHandler Instance = new IconPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PatternElementSchema.Icon domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IconDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PatternElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.iconPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PatternElementSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PatternElementSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.iconPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PatternElementSchema>(x => x.Icon);
		    }
		}
		
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// The properties of this element.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PropertySchema> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PropertySchema>, PropertySchema>(global::NuPattern.Runtime.Schema.PatternElementHasProperties.PatternElementSchemaDomainRoleId);
			}
		}
		#endregion
		#region AutomationSettings opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AutomationSettings.
		/// The automation settings of this element.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AutomationSettingsSchema> AutomationSettings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AutomationSettingsSchema>, AutomationSettingsSchema>(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.PatternElementSchemaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.AutomationSettingsSchema.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.PropertySchema.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Schema.AutomationSettingsSchema sourceAutomationSettingsSchema1 = sourceElement as global::NuPattern.Runtime.Schema.AutomationSettingsSchema;
			if (sourceAutomationSettingsSchema1 != null)
			{
				// Create link for path PatternElementHasAutomationSettings.AutomationSettings
				this.AutomationSettings.Add(sourceAutomationSettingsSchema1);

				return;
			}
				
			global::NuPattern.Runtime.Schema.PropertySchema sourcePropertySchema2 = sourceElement as global::NuPattern.Runtime.Schema.PropertySchema;
			if (sourcePropertySchema2 != null)
			{
				// Create link for path PatternElementHasProperties.Properties
				this.Properties.Add(sourcePropertySchema2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Schema.AutomationSettingsSchema sourceAutomationSettingsSchema1 = sourceElement as global::NuPattern.Runtime.Schema.AutomationSettingsSchema;
			if (sourceAutomationSettingsSchema1 != null)
			{
				// Delete link for path PatternElementHasAutomationSettings.AutomationSettings
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.GetLinks((global::NuPattern.Runtime.Schema.PatternElementSchema)this, sourceAutomationSettingsSchema1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.PatternElementSchemaDomainRoleId, global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.AutomationSettingsSchemaDomainRoleId);
				}

				return;
			}
				
			global::NuPattern.Runtime.Schema.PropertySchema sourcePropertySchema2 = sourceElement as global::NuPattern.Runtime.Schema.PropertySchema;
			if (sourcePropertySchema2 != null)
			{
				// Delete link for path PatternElementHasProperties.Properties
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.PatternElementHasProperties.GetLinks((global::NuPattern.Runtime.Schema.PatternElementSchema)this, sourcePropertySchema2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.PatternElementHasProperties.PatternElementSchemaDomainRoleId, global::NuPattern.Runtime.Schema.PatternElementHasProperties.PropertySchemaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass PropertySchema
	/// A property of an element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("079a705a-0fc2-4c40-b0ba-c8b76fc60f7c")]
	internal partial class PropertySchema : CustomizableElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PropertySchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x079a705a, 0x0fc2, 0x4c40, 0xb0, 0xba, 0xc8, 0xb7, 0x6f, 0xc6, 0x0f, 0x7c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PropertySchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PropertySchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RawDefaultValue domain property code
		
		/// <summary>
		/// RawDefaultValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid RawDefaultValueDomainPropertyId = new global::System.Guid(0xdf11ede4, 0x3da1, 0x4416, 0x9f, 0x7d, 0xcf, 0xb8, 0x40, 0xe2, 0x8b, 0xb3);
		
		/// <summary>
		/// Storage for RawDefaultValue
		/// </summary>
		private global::System.String rawDefaultValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RawDefaultValue domain property.
		/// The initial value of this property when created.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/RawDefaultValue.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/RawDefaultValue.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/RawDefaultValue.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("df11ede4-3da1-4416-9f7d-cfb840e28bb3")]
		public global::System.String RawDefaultValue
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return rawDefaultValuePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    internal set
		    {
		        RawDefaultValuePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.RawDefaultValue domain property.
		/// </summary>
		internal sealed partial class RawDefaultValuePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.String>
		{
		    private RawDefaultValuePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.RawDefaultValue domain property value handler.
		    /// </summary>
		    public static readonly RawDefaultValuePropertyHandler Instance = new RawDefaultValuePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.RawDefaultValue domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return RawDefaultValueDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.rawDefaultValuePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.rawDefaultValuePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.RawDefaultValue);
		    }
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x112c82d2, 0x866f, 0x4f9f, 0x8f, 0x32, 0x9c, 0xb0, 0xcc, 0x63, 0x6f, 0xac);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = "System.String";
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// The data type of this property, which determines the type of its value.
		/// </summary>
		[System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/Type.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/Type.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/Type.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("System.String")]
		[DslModeling::DomainObjectId("112c82d2-866f-4f9f-8f32-9cb0cc636fac")]
		public global::System.String Type
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return typePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TypePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.String>
		{
		    private TypePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.Type domain property value handler.
		    /// </summary>
		    public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.Type domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TypeDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.typePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.typePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.Type);
		    }
		}
		
		#endregion
		#region IsVisible domain property code
		
		/// <summary>
		/// IsVisible domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsVisibleDomainPropertyId = new global::System.Guid(0x97ced30c, 0x61bc, 0x44ad, 0x90, 0x41, 0x00, 0x94, 0x50, 0x76, 0xd3, 0x7d);
		
		/// <summary>
		/// Storage for IsVisible
		/// </summary>
		private global::System.Boolean isVisiblePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsVisible domain property.
		/// Whether this property is shown to the user.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/IsVisible.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/IsVisible.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/IsVisible.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("97ced30c-61bc-44ad-9041-00945076d37d")]
		public global::System.Boolean IsVisible
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isVisiblePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IsVisiblePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.IsVisible domain property.
		/// </summary>
		internal sealed partial class IsVisiblePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.Boolean>
		{
		    private IsVisiblePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.IsVisible domain property value handler.
		    /// </summary>
		    public static readonly IsVisiblePropertyHandler Instance = new IsVisiblePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.IsVisible domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsVisibleDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isVisiblePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isVisiblePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.IsVisible);
		    }
		}
		
		#endregion
		#region IsReadOnly domain property code
		
		/// <summary>
		/// IsReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsReadOnlyDomainPropertyId = new global::System.Guid(0x452d1740, 0x162b, 0x4911, 0x87, 0x4a, 0xa4, 0x5c, 0xa1, 0x01, 0x8e, 0x97);
		
		/// <summary>
		/// Storage for IsReadOnly
		/// </summary>
		private global::System.Boolean isReadOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsReadOnly domain property.
		/// Whether this property is read-only to the user.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/IsReadOnly.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/IsReadOnly.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/IsReadOnly.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("452d1740-162b-4911-874a-a45ca1018e97")]
		public global::System.Boolean IsReadOnly
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isReadOnlyPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IsReadOnlyPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.IsReadOnly domain property.
		/// </summary>
		internal sealed partial class IsReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.Boolean>
		{
		    private IsReadOnlyPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.IsReadOnly domain property value handler.
		    /// </summary>
		    public static readonly IsReadOnlyPropertyHandler Instance = new IsReadOnlyPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.IsReadOnly domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsReadOnlyDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isReadOnlyPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isReadOnlyPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.IsReadOnly);
		    }
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x93af01ae, 0x05ca, 0x44fd, 0x9e, 0x8b, 0x82, 0x30, 0xc5, 0x66, 0x24, 0x15);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = "General";
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// The category for this property, used to organize similar properties shown in the
		/// Properties Window.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/Category.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/Category.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/Category.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("General")]
		[DslModeling::DomainObjectId("93af01ae-05ca-44fd-9e8b-8230c5662415")]
		public global::System.String Category
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return categoryPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        CategoryPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.String>
		{
		    private CategoryPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.Category domain property value handler.
		    /// </summary>
		    public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.Category domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CategoryDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.categoryPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.categoryPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.Category);
		    }
		}
		
		#endregion
		#region PropertyUsage domain property code
		
		/// <summary>
		/// PropertyUsage domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyUsageDomainPropertyId = new global::System.Guid(0xb6c1c888, 0x82c5, 0x4619, 0x8e, 0x2b, 0xe6, 0x9e, 0x1c, 0xf9, 0x75, 0xaa);
		
		/// <summary>
		/// Storage for PropertyUsage
		/// </summary>
		private global::NuPattern.Runtime.PropertyUsages propertyUsagePropertyStorage = DslModeling::SerializationUtilities.GetValue<global::NuPattern.Runtime.PropertyUsages>("General");
		
		/// <summary>
		/// Gets or sets the value of PropertyUsage domain property.
		/// The primary usage of this property,
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/PropertyUsage.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/PropertyUsage.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/PropertyUsage.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.PropertyUsages), "General")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b6c1c888-82c5-4619-8e2b-e69e1cf975aa")]
		public global::NuPattern.Runtime.PropertyUsages PropertyUsage
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return propertyUsagePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    internal set
		    {
		        PropertyUsagePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.PropertyUsage domain property.
		/// </summary>
		internal sealed partial class PropertyUsagePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::NuPattern.Runtime.PropertyUsages>
		{
		    private PropertyUsagePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.PropertyUsage domain property value handler.
		    /// </summary>
		    public static readonly PropertyUsagePropertyHandler Instance = new PropertyUsagePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.PropertyUsage domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return PropertyUsageDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::NuPattern.Runtime.PropertyUsages GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.propertyUsagePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::NuPattern.Runtime.PropertyUsages newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::NuPattern.Runtime.PropertyUsages oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::NuPattern.Runtime.PropertyUsages oldValue, global::NuPattern.Runtime.PropertyUsages newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.propertyUsagePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.PropertyUsage);
		    }
		}
		
		#endregion
		#region TypeConverterTypeName domain property code
		
		/// <summary>
		/// TypeConverterTypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeConverterTypeNameDomainPropertyId = new global::System.Guid(0x19df1177, 0xf0a6, 0x4540, 0xbd, 0x5b, 0x7b, 0x35, 0x04, 0x41, 0xbe, 0xe6);
		
		/// <summary>
		/// Storage for TypeConverterTypeName
		/// </summary>
		private global::System.String typeConverterTypeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TypeConverterTypeName domain property.
		/// A System.ComponentModel.TypeConverter that converts from the string value of
		/// this property, that the user enters, to an instance of the Type of this property
		/// (and visa-versa). This Type Converter can also be used to provide a list of
		/// acceptable values.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FullTypeTypeConverter<System.ComponentModel.TypeConverter>))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/TypeConverterTypeName.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/TypeConverterTypeName.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/TypeConverterTypeName.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("19df1177-f0a6-4540-bd5b-7b350441bee6")]
		public global::System.String TypeConverterTypeName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return typeConverterTypeNamePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        TypeConverterTypeNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.TypeConverterTypeName domain property.
		/// </summary>
		internal sealed partial class TypeConverterTypeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.String>
		{
		    private TypeConverterTypeNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.TypeConverterTypeName domain property value handler.
		    /// </summary>
		    public static readonly TypeConverterTypeNamePropertyHandler Instance = new TypeConverterTypeNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.TypeConverterTypeName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return TypeConverterTypeNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.typeConverterTypeNamePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.typeConverterTypeNamePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.TypeConverterTypeName);
		    }
		}
		
		#endregion
		#region EditorTypeName domain property code
		
		/// <summary>
		/// EditorTypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EditorTypeNameDomainPropertyId = new global::System.Guid(0x377771ed, 0xe31c, 0x4d13, 0xbd, 0x13, 0x92, 0x0a, 0x33, 0xd7, 0xc0, 0xb0);
		
		/// <summary>
		/// Storage for EditorTypeName
		/// </summary>
		private global::System.String editorTypeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EditorTypeName domain property.
		/// A System.Drawing.Design.UITypeEditor that provides a custom UI for editing the
		/// value of this property.
		/// </summary>
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FullTypeTypeConverter<System.Drawing.Design.UITypeEditor>))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/EditorTypeName.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/EditorTypeName.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/EditorTypeName.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("377771ed-e31c-4d13-bd13-920a33d7c0b0")]
		public global::System.String EditorTypeName
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return editorTypeNamePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        EditorTypeNamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.EditorTypeName domain property.
		/// </summary>
		internal sealed partial class EditorTypeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.String>
		{
		    private EditorTypeNamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.EditorTypeName domain property value handler.
		    /// </summary>
		    public static readonly EditorTypeNamePropertyHandler Instance = new EditorTypeNamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.EditorTypeName domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return EditorTypeNameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.editorTypeNamePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.editorTypeNamePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.EditorTypeName);
		    }
		}
		
		#endregion
		#region RawValidationRules domain property code
		
		/// <summary>
		/// RawValidationRules domain property Id.
		/// </summary>
		public static readonly global::System.Guid RawValidationRulesDomainPropertyId = new global::System.Guid(0xe9070cd0, 0x3aa5, 0x4e07, 0x85, 0x04, 0xa7, 0x35, 0xf4, 0x0a, 0x8b, 0xe4);
		
		/// <summary>
		/// Storage for RawValidationRules
		/// </summary>
		private global::System.String rawValidationRulesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RawValidationRules domain property.
		/// The validation rules applied to this element.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/RawValidationRules.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/RawValidationRules.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/RawValidationRules.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("e9070cd0-3aa5-4e07-8504-a735f40a8be4")]
		public global::System.String RawValidationRules
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return rawValidationRulesPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        RawValidationRulesPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.RawValidationRules domain property.
		/// </summary>
		internal sealed partial class RawValidationRulesPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.String>
		{
		    private RawValidationRulesPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.RawValidationRules domain property value handler.
		    /// </summary>
		    public static readonly RawValidationRulesPropertyHandler Instance = new RawValidationRulesPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.RawValidationRules domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return RawValidationRulesDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.rawValidationRulesPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.rawValidationRulesPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.RawValidationRules);
		    }
		}
		
		#endregion
		#region RawValueProvider domain property code
		
		/// <summary>
		/// RawValueProvider domain property Id.
		/// </summary>
		public static readonly global::System.Guid RawValueProviderDomainPropertyId = new global::System.Guid(0xe6d6779f, 0xb6b9, 0x4db4, 0x9b, 0xf3, 0x04, 0xe8, 0x64, 0xa4, 0xc5, 0x8e);
		
		/// <summary>
		/// Storage for RawValueProvider
		/// </summary>
		private global::System.String rawValueProviderPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RawValueProvider domain property.
		/// A value provider that calculates the value of this property dynamically.
		/// </summary>
		[NuPattern.ComponentModel.Design.PropertyDescriptor(typeof(NuPattern.Runtime.Bindings.BindingPropertyDescriptor<Microsoft.VisualStudio.TeamArchitect.PowerTools.Features.IValueProvider>))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PropertySchema/RawValueProvider.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.PropertySchema/RawValueProvider.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PropertySchema/RawValueProvider.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("e6d6779f-b6b9-4db4-9bf3-04e864a4c58e")]
		public global::System.String RawValueProvider
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return rawValueProviderPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        RawValueProviderPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the PropertySchema.RawValueProvider domain property.
		/// </summary>
		internal sealed partial class RawValueProviderPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertySchema, global::System.String>
		{
		    private RawValueProviderPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the PropertySchema.RawValueProvider domain property value handler.
		    /// </summary>
		    public static readonly RawValueProviderPropertyHandler Instance = new RawValueProviderPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the PropertySchema.RawValueProvider domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return RawValueProviderDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(PropertySchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.rawValueProviderPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(PropertySchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(PropertySchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.rawValueProviderPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<PropertySchema>(x => x.RawValueProvider);
		    }
		}
		
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual PatternElementSchema Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternElementHasProperties.PropertySchemaDomainRoleId) as PatternElementSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternElementHasProperties.PropertySchemaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass ViewSchema
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("14b6f5ec-0468-4380-9210-07c2fdbda012")]
	internal abstract partial class ViewSchemaBase : CustomizableElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ViewSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14b6f5ec, 0x0468, 0x4380, 0x92, 0x10, 0x07, 0xc2, 0xfd, 0xbd, 0xa0, 0x12);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ViewSchemaBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsVisible domain property code
		
		/// <summary>
		/// IsVisible domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsVisibleDomainPropertyId = new global::System.Guid(0x5812d2f0, 0x206f, 0x4356, 0xa1, 0x2f, 0xb2, 0x41, 0x9c, 0xc1, 0x10, 0x82);
		
		/// <summary>
		/// Storage for IsVisible
		/// </summary>
		private global::System.Boolean isVisiblePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsVisible domain property.
		/// Whether this view is shown to the user.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewSchema/IsVisible.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewSchema/IsVisible.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewSchema/IsVisible.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("5812d2f0-206f-4356-a12f-b2419cc11082")]
		public global::System.Boolean IsVisible
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isVisiblePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IsVisiblePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ViewSchema.IsVisible domain property.
		/// </summary>
		internal sealed partial class IsVisiblePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewSchemaBase, global::System.Boolean>
		{
		    private IsVisiblePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ViewSchema.IsVisible domain property value handler.
		    /// </summary>
		    public static readonly IsVisiblePropertyHandler Instance = new IsVisiblePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ViewSchema.IsVisible domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsVisibleDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(ViewSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isVisiblePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ViewSchemaBase element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ViewSchemaBase element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isVisiblePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ViewSchemaBase>(x => x.IsVisible);
		    }
		}
		
		#endregion
		#region IsDefault domain property code
		
		/// <summary>
		/// IsDefault domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDefaultDomainPropertyId = new global::System.Guid(0x0e03dbb8, 0x03d7, 0x44b6, 0x95, 0x83, 0x6c, 0xe6, 0x2b, 0x8d, 0xf5, 0x19);
		
		/// <summary>
		/// Storage for IsDefault
		/// </summary>
		private global::System.Boolean isDefaultPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsDefault domain property.
		/// Whether this is the default view
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewSchema/IsDefault.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewSchema/IsDefault.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewSchema/IsDefault.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("0e03dbb8-03d7-44b6-9583-6ce62b8df519")]
		public global::System.Boolean IsDefault
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isDefaultPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IsDefaultPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ViewSchema.IsDefault domain property.
		/// </summary>
		internal sealed partial class IsDefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewSchemaBase, global::System.Boolean>
		{
		    private IsDefaultPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ViewSchema.IsDefault domain property value handler.
		    /// </summary>
		    public static readonly IsDefaultPropertyHandler Instance = new IsDefaultPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ViewSchema.IsDefault domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsDefaultDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(ViewSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isDefaultPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ViewSchemaBase element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ViewSchemaBase element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isDefaultPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ViewSchemaBase>(x => x.IsDefault);
		    }
		}
		
		#endregion
		#region DiagramId domain property code
		
		/// <summary>
		/// DiagramId domain property Id.
		/// </summary>
		public static readonly global::System.Guid DiagramIdDomainPropertyId = new global::System.Guid(0x2eb831f0, 0x0ef8, 0x46a7, 0x93, 0x7b, 0x0c, 0x6c, 0x6d, 0x64, 0xa7, 0x7b);
		
		/// <summary>
		/// Storage for DiagramId
		/// </summary>
		private global::System.String diagramIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DiagramId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewSchema/DiagramId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewSchema/DiagramId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("2eb831f0-0ef8-46a7-937b-0c6c6d64a77b")]
		public global::System.String DiagramId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return diagramIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        DiagramIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ViewSchema.DiagramId domain property.
		/// </summary>
		internal sealed partial class DiagramIdPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewSchemaBase, global::System.String>
		{
		    private DiagramIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ViewSchema.DiagramId domain property value handler.
		    /// </summary>
		    public static readonly DiagramIdPropertyHandler Instance = new DiagramIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ViewSchema.DiagramId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DiagramIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ViewSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.diagramIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ViewSchemaBase element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ViewSchemaBase element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.diagramIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ViewSchemaBase>(x => x.DiagramId);
		    }
		}
		
		#endregion
		#region Caption domain property code
		
		/// <summary>
		/// Caption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CaptionDomainPropertyId = new global::System.Guid(0x8d050866, 0xc6e3, 0x4231, 0xb5, 0xd5, 0xf1, 0xe9, 0xcc, 0x8b, 0x1e, 0xdb);
		
		/// <summary>
		/// Gets or sets the value of Caption domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewSchema/Caption.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewSchema/Caption.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewSchema/Caption.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("8d050866-c6e3-4231-b5d5-f1e9cc8b1edb")]
		public global::System.String Caption
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return CaptionPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the ViewSchema.Caption domain property.
		/// </summary>
		internal sealed partial class CaptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ViewSchemaBase, global::System.String>
		{
		    private CaptionPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ViewSchema.Caption domain property value handler.
		    /// </summary>
		    public static readonly CaptionPropertyHandler Instance = new CaptionPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ViewSchema.Caption domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CaptionDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ViewSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for Caption because its Kind is
		        // set to Calculated. Please provide the GetCaptionValue()
		        // method on the domain class.
		        return element.GetCaptionValue();
		    }
		
		}
		
		#endregion
		#region Pattern opposite domain role accessor
		/// <summary>
		/// Gets or sets Pattern.
		/// The owning pattern.
		/// </summary>
		internal virtual PatternSchema Pattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternHasViews.ViewSchemaDomainRoleId) as PatternSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternHasViews.ViewSchemaDomainRoleId, value);
			}
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// The child elements of the view.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractElementSchema> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElementSchema>, AbstractElementSchema>(global::NuPattern.Runtime.Schema.ViewHasElements.ViewSchemaDomainRoleId);
			}
		}
		#endregion
		#region ExtensionPoints opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExtensionPoints.
		/// The child extension points of the view.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExtensionPointSchema> ExtensionPoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ExtensionPointSchema>, ExtensionPointSchema>(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ViewSchemaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.ExtensionPointSchema.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.AbstractElementSchema.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Schema.ExtensionPointSchema sourceExtensionPointSchema1 = sourceElement as global::NuPattern.Runtime.Schema.ExtensionPointSchema;
			if (sourceExtensionPointSchema1 != null)
			{
				// Create link for path ViewHasExtensionPoints.ExtensionPoints
				this.ExtensionPoints.Add(sourceExtensionPointSchema1);

				return;
			}
				
			global::NuPattern.Runtime.Schema.AbstractElementSchema sourceAbstractElementSchema2 = sourceElement as global::NuPattern.Runtime.Schema.AbstractElementSchema;
			if (sourceAbstractElementSchema2 != null)
			{
				// Create link for path ViewHasElements.Elements
				this.Elements.Add(sourceAbstractElementSchema2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Schema.ExtensionPointSchema sourceExtensionPointSchema1 = sourceElement as global::NuPattern.Runtime.Schema.ExtensionPointSchema;
			if (sourceExtensionPointSchema1 != null)
			{
				// Delete link for path ViewHasExtensionPoints.ExtensionPoints
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.GetLinks((global::NuPattern.Runtime.Schema.ViewSchema)this, sourceExtensionPointSchema1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ViewSchemaDomainRoleId, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ExtensionPointSchemaDomainRoleId);
				}

				return;
			}
				
			global::NuPattern.Runtime.Schema.AbstractElementSchema sourceAbstractElementSchema2 = sourceElement as global::NuPattern.Runtime.Schema.AbstractElementSchema;
			if (sourceAbstractElementSchema2 != null)
			{
				// Delete link for path ViewHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.ViewHasElements.GetLinks((global::NuPattern.Runtime.Schema.ViewSchema)this, sourceAbstractElementSchema2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.ViewHasElements.ViewSchemaDomainRoleId, global::NuPattern.Runtime.Schema.ViewHasElements.AbstractElementSchemaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass ViewSchema
	/// A distinct view of the pattern.
	/// </summary>
			
	internal partial class ViewSchema : ViewSchemaBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ViewSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ViewSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass CollectionSchema
	/// A child collection element.
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CollectionSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CollectionSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("5c399883-85a3-4863-90dd-470b20576f61")]
	internal partial class CollectionSchema : AbstractElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CollectionSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5c399883, 0x85a3, 0x4863, 0x90, 0xdd, 0x47, 0x0b, 0x20, 0x57, 0x6f, 0x61);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CollectionSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CollectionSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass ElementSchema
	/// A child element.
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("18de646e-e001-4e6b-b78b-59086f74d429")]
	internal partial class ElementSchema : AbstractElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18de646e, 0xe001, 0x4e6b, 0xb7, 0x8b, 0x59, 0x08, 0x6f, 0x74, 0xd4, 0x29);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass CustomizableElementSchema
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("129120e9-f7e2-4154-805e-16bf6890f67a")]
	internal abstract partial class CustomizableElementSchemaBase : NamedElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomizableElementSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x129120e9, 0xf7e2, 0x4154, 0x80, 0x5e, 0x16, 0xbf, 0x68, 0x90, 0xf6, 0x7a);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CustomizableElementSchemaBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsCustomizable domain property code
		
		/// <summary>
		/// IsCustomizable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCustomizableDomainPropertyId = new global::System.Guid(0x0bc1eb0c, 0xb224, 0x4d81, 0x87, 0x1c, 0xbf, 0xda, 0x75, 0xe9, 0x4b, 0xa5);
		
		/// <summary>
		/// Gets or sets the value of IsCustomizable domain property.
		/// Whether customization is permitted for this element, all its policy settings,
		/// and any child elements.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizable.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizable.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizable.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.CustomizationState), "Inherited")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("0bc1eb0c-b224-4d81-871c-bfda75e94ba5")]
		public global::NuPattern.Runtime.CustomizationState IsCustomizable
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return IsCustomizablePropertyHandler.Instance.GetValue(this);
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IsCustomizablePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableElementSchema.IsCustomizable domain property.
		/// </summary>
		internal sealed partial class IsCustomizablePropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableElementSchemaBase, global::NuPattern.Runtime.CustomizationState>
		{
		    private IsCustomizablePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableElementSchema.IsCustomizable domain property value handler.
		    /// </summary>
		    public static readonly IsCustomizablePropertyHandler Instance = new IsCustomizablePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableElementSchema.IsCustomizable domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsCustomizableDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::NuPattern.Runtime.CustomizationState GetValue(CustomizableElementSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for IsCustomizable because its Kind is
		        // set to CustomStorage. Please provide the GetIsCustomizableValue()
		        // method on the domain class.
		        return element.GetIsCustomizableValue();
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableElementSchemaBase element, global::NuPattern.Runtime.CustomizationState newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::NuPattern.Runtime.CustomizationState oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableElementSchemaBase element, global::NuPattern.Runtime.CustomizationState oldValue, global::NuPattern.Runtime.CustomizationState newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        // There is no storage for IsCustomizable because its Kind is
		        // set to CustomStorage. Please provide the SetIsCustomizableValue()
		        // method on the domain class.
		        element.SetIsCustomizableValue(newValue);
		        ValueChanged(element, oldValue, GetValue(element));
		        element.PropertyChanges.NotifyChanged<CustomizableElementSchemaBase>(x => x.IsCustomizable);
		    }
		}
		
		#endregion
		#region IsCustomizationEnabled domain property code
		
		/// <summary>
		/// IsCustomizationEnabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCustomizationEnabledDomainPropertyId = new global::System.Guid(0xf6025928, 0xbb14, 0x41d8, 0x86, 0xfc, 0xaf, 0x24, 0xd6, 0xf0, 0x54, 0x24);
		
		/// <summary>
		/// Storage for IsCustomizationEnabled
		/// </summary>
		private global::System.Boolean isCustomizationEnabledPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsCustomizationEnabled domain property.
		/// Whether customization is enabled for the tailor.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationEnabled.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationEnabled.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationEnabled.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("f6025928-bb14-41d8-86fc-af24d6f05424")]
		public global::System.Boolean IsCustomizationEnabled
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isCustomizationEnabledPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        IsCustomizationEnabledPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableElementSchema.IsCustomizationEnabled domain property.
		/// </summary>
		internal sealed partial class IsCustomizationEnabledPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableElementSchemaBase, global::System.Boolean>
		{
		    private IsCustomizationEnabledPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableElementSchema.IsCustomizationEnabled domain property value handler.
		    /// </summary>
		    public static readonly IsCustomizationEnabledPropertyHandler Instance = new IsCustomizationEnabledPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableElementSchema.IsCustomizationEnabled domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsCustomizationEnabledDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(CustomizableElementSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isCustomizationEnabledPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableElementSchemaBase element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableElementSchemaBase element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isCustomizationEnabledPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CustomizableElementSchemaBase>(x => x.IsCustomizationEnabled);
		    }
		}
		
		#endregion
		#region IsCustomizationPolicyModifyable domain property code
		
		/// <summary>
		/// IsCustomizationPolicyModifyable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCustomizationPolicyModifyableDomainPropertyId = new global::System.Guid(0xe6037ef6, 0xb825, 0x4b9d, 0x82, 0xcd, 0xe8, 0x51, 0xc4, 0x11, 0x22, 0xa2);
		
		/// <summary>
		/// Gets or sets the value of IsCustomizationPolicyModifyable domain property.
		/// Whether the policy can be modified.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationPolicyModifyable.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationPolicyModifyable.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationPolicyModifyable.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("e6037ef6-b825-4b9d-82cd-e851c41122a2")]
		public global::System.Boolean IsCustomizationPolicyModifyable
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return IsCustomizationPolicyModifyablePropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableElementSchema.IsCustomizationPolicyModifyable domain property.
		/// </summary>
		internal sealed partial class IsCustomizationPolicyModifyablePropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizableElementSchemaBase, global::System.Boolean>
		{
		    private IsCustomizationPolicyModifyablePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableElementSchema.IsCustomizationPolicyModifyable domain property value handler.
		    /// </summary>
		    public static readonly IsCustomizationPolicyModifyablePropertyHandler Instance = new IsCustomizationPolicyModifyablePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableElementSchema.IsCustomizationPolicyModifyable domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsCustomizationPolicyModifyableDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(CustomizableElementSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for IsCustomizationPolicyModifyable because its Kind is
		        // set to Calculated. Please provide the GetIsCustomizationPolicyModifyableValue()
		        // method on the domain class.
		        return element.GetIsCustomizationPolicyModifyableValue();
		    }
		
		}
		
		#endregion
		#region IsCustomizationEnabledState domain property code
		
		/// <summary>
		/// IsCustomizationEnabledState domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCustomizationEnabledStateDomainPropertyId = new global::System.Guid(0x8c6962aa, 0xdf4f, 0x4bf9, 0xba, 0xf0, 0xd1, 0x5c, 0x0c, 0xf6, 0x09, 0x9f);
		
		/// <summary>
		/// Gets or sets the value of IsCustomizationEnabledState domain property.
		/// The combined state of IsEnabled and IsCustomizable state of the element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationEnabledState.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationEnabledState.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementSchema/IsCustomizationEnabledState.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("8c6962aa-df4f-4bf9-baf0-d15c0cf6099f")]
		internal CustomizationEnabledState IsCustomizationEnabledState
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return IsCustomizationEnabledStatePropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableElementSchema.IsCustomizationEnabledState domain property.
		/// </summary>
		internal sealed partial class IsCustomizationEnabledStatePropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizableElementSchemaBase, CustomizationEnabledState>
		{
		    private IsCustomizationEnabledStatePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableElementSchema.IsCustomizationEnabledState domain property value handler.
		    /// </summary>
		    public static readonly IsCustomizationEnabledStatePropertyHandler Instance = new IsCustomizationEnabledStatePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableElementSchema.IsCustomizationEnabledState domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsCustomizationEnabledStateDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed CustomizationEnabledState GetValue(CustomizableElementSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for IsCustomizationEnabledState because its Kind is
		        // set to Calculated. Please provide the GetIsCustomizationEnabledStateValue()
		        // method on the domain class.
		        return element.GetIsCustomizationEnabledStateValue();
		    }
		
		}
		
		#endregion
		#region Policy opposite domain role accessor
		/// <summary>
		/// Gets or sets Policy.
		/// The customization policy that applies to the element.
		/// </summary>
		internal virtual CustomizationPolicySchema Policy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizableElementSchemaDomainRoleId) as CustomizationPolicySchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizableElementSchemaDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.CustomizationPolicySchema.DomainClassId)) 
				{
					// Check that creating a link with this path doesn't cause multiplicity overflow: CustomizableElementHasPolicy.Policy
					if (this.Policy != null)
					{
						return false;
					}
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Schema.CustomizationPolicySchema sourceCustomizationPolicySchema1 = sourceElement as global::NuPattern.Runtime.Schema.CustomizationPolicySchema;
			if (sourceCustomizationPolicySchema1 != null)
			{
				// Create link for path CustomizableElementHasPolicy.Policy
				this.Policy = sourceCustomizationPolicySchema1;

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Schema.CustomizationPolicySchema sourceCustomizationPolicySchema1 = sourceElement as global::NuPattern.Runtime.Schema.CustomizationPolicySchema;
			if (sourceCustomizationPolicySchema1 != null)
			{
				// Delete link for path CustomizableElementHasPolicy.Policy
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.GetLinks((global::NuPattern.Runtime.Schema.CustomizableElementSchema)this, sourceCustomizationPolicySchema1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizableElementSchemaDomainRoleId, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizationPolicySchemaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass CustomizableElementSchema
	/// An element that supports customization of its properties.
	/// </summary>
			
	internal abstract partial class CustomizableElementSchema : CustomizableElementSchemaBase
	{
		#region Constructors
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CustomizableElementSchema(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass AbstractElementSchema
	/// A child element or collection of the pattern.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.AbstractElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.AbstractElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("a022a552-666a-4f23-b829-4edf1cea0971")]
	internal abstract partial class AbstractElementSchema : PatternElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AbstractElementSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa022a552, 0x666a, 0x4f23, 0xb8, 0x29, 0x4e, 0xdf, 0x1c, 0xea, 0x09, 0x71);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected AbstractElementSchema(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsVisible domain property code
		
		/// <summary>
		/// IsVisible domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsVisibleDomainPropertyId = new global::System.Guid(0x18d96656, 0x8bab, 0x4ce0, 0xb8, 0xfa, 0x2e, 0xb9, 0xed, 0xaf, 0x26, 0xcc);
		
		/// <summary>
		/// Storage for IsVisible
		/// </summary>
		private global::System.Boolean isVisiblePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsVisible domain property.
		/// Whether this item is shown to the user.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.AbstractElementSchema/IsVisible.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.AbstractElementSchema/IsVisible.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.AbstractElementSchema/IsVisible.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("18d96656-8bab-4ce0-b8fa-2eb9edaf26cc")]
		public global::System.Boolean IsVisible
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isVisiblePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        IsVisiblePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the AbstractElementSchema.IsVisible domain property.
		/// </summary>
		internal sealed partial class IsVisiblePropertyHandler : DslModeling::DomainPropertyValueHandler<AbstractElementSchema, global::System.Boolean>
		{
		    private IsVisiblePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the AbstractElementSchema.IsVisible domain property value handler.
		    /// </summary>
		    public static readonly IsVisiblePropertyHandler Instance = new IsVisiblePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the AbstractElementSchema.IsVisible domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsVisibleDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(AbstractElementSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isVisiblePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(AbstractElementSchema element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(AbstractElementSchema element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isVisiblePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<AbstractElementSchema>(x => x.IsVisible);
		    }
		}
		
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// The owning view.
		/// </summary>
		internal virtual ViewSchema View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.ViewHasElements.AbstractElementSchemaDomainRoleId) as ViewSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.ViewHasElements.AbstractElementSchemaDomainRoleId, value);
			}
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// The child elemets of this element.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractElementSchema> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElementSchema>, AbstractElementSchema>(global::NuPattern.Runtime.Schema.ElementHasElements.ParentElementDomainRoleId);
			}
		}
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual AbstractElementSchema Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.ElementHasElements.ChildElementDomainRoleId) as AbstractElementSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.ElementHasElements.ChildElementDomainRoleId, value);
			}
		}
		#endregion
		#region ExtensionPoints opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExtensionPoints.
		/// The child extension points of this element.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExtensionPointSchema> ExtensionPoints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ExtensionPointSchema>, ExtensionPointSchema>(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ParentElementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.ExtensionPointSchema.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.AbstractElementSchema.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Schema.ExtensionPointSchema sourceExtensionPointSchema1 = sourceElement as global::NuPattern.Runtime.Schema.ExtensionPointSchema;
			if (sourceExtensionPointSchema1 != null)
			{
				// Create link for path ElementHasExtensionPoints.ExtensionPoints
				this.ExtensionPoints.Add(sourceExtensionPointSchema1);

				return;
			}
				
			global::NuPattern.Runtime.Schema.AbstractElementSchema sourceAbstractElementSchema2 = sourceElement as global::NuPattern.Runtime.Schema.AbstractElementSchema;
			if (sourceAbstractElementSchema2 != null)
			{
				// Create link for path ElementHasElements.Elements
				this.Elements.Add(sourceAbstractElementSchema2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Schema.ExtensionPointSchema sourceExtensionPointSchema1 = sourceElement as global::NuPattern.Runtime.Schema.ExtensionPointSchema;
			if (sourceExtensionPointSchema1 != null)
			{
				// Delete link for path ElementHasExtensionPoints.ExtensionPoints
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.GetLinks((global::NuPattern.Runtime.Schema.AbstractElementSchema)this, sourceExtensionPointSchema1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ParentElementDomainRoleId, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ChildElementDomainRoleId);
				}

				return;
			}
				
			global::NuPattern.Runtime.Schema.AbstractElementSchema sourceAbstractElementSchema2 = sourceElement as global::NuPattern.Runtime.Schema.AbstractElementSchema;
			if (sourceAbstractElementSchema2 != null)
			{
				// Delete link for path ElementHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.ElementHasElements.GetLinks((global::NuPattern.Runtime.Schema.AbstractElementSchema)this, sourceAbstractElementSchema2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.ElementHasElements.ParentElementDomainRoleId, global::NuPattern.Runtime.Schema.ElementHasElements.ChildElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass CustomizationPolicySchema
	/// </summary>
	[NuPattern.ComponentModel.Design.CategoryResource("CustomizationCategory", typeof(NuPattern.Runtime.Schema.Properties.Resources))]
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizationPolicySchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizationPolicySchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("c9fbbae3-628d-46f1-860e-5e80fc1b6211")]
	internal abstract partial class CustomizationPolicySchemaBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomizationPolicySchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc9fbbae3, 0x628d, 0x46f1, 0x86, 0x0e, 0x5e, 0x80, 0xfc, 0x1b, 0x62, 0x11);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CustomizationPolicySchemaBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsModified domain property code
		
		/// <summary>
		/// IsModified domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsModifiedDomainPropertyId = new global::System.Guid(0xb59b2925, 0x1a2c, 0x44bd, 0xba, 0x9e, 0x90, 0x3f, 0xf5, 0xfd, 0x45, 0xb2);
		
		/// <summary>
		/// Gets or sets the value of IsModified domain property.
		/// Whether any of the settings in the policy have been modified from their default
		/// values.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/IsModified.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/IsModified.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/IsModified.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("b59b2925-1a2c-44bd-ba9e-903ff5fd45b2")]
		public global::System.Boolean IsModified
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return IsModifiedPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizationPolicySchema.IsModified domain property.
		/// </summary>
		internal sealed partial class IsModifiedPropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizationPolicySchemaBase, global::System.Boolean>
		{
		    private IsModifiedPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizationPolicySchema.IsModified domain property value handler.
		    /// </summary>
		    public static readonly IsModifiedPropertyHandler Instance = new IsModifiedPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizationPolicySchema.IsModified domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsModifiedDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(CustomizationPolicySchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for IsModified because its Kind is
		        // set to Calculated. Please provide the GetIsModifiedValue()
		        // method on the domain class.
		        return element.GetIsModifiedValue();
		    }
		
		}
		
		#endregion
		#region CustomizationLevel domain property code
		
		/// <summary>
		/// CustomizationLevel domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomizationLevelDomainPropertyId = new global::System.Guid(0x9c519261, 0xd0f9, 0x4433, 0xbc, 0xb4, 0x75, 0x93, 0xc4, 0xca, 0x65, 0x48);
		
		/// <summary>
		/// Gets or sets the value of CustomizationLevel domain property.
		/// The extent to which settings have been customized.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/CustomizationLevel.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/CustomizationLevel.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/CustomizationLevel.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.CustomizedLevel), "None")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("9c519261-d0f9-4433-bcb4-7593c4ca6548")]
		public global::NuPattern.Runtime.CustomizedLevel CustomizationLevel
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return CustomizationLevelPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizationPolicySchema.CustomizationLevel domain property.
		/// </summary>
		internal sealed partial class CustomizationLevelPropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizationPolicySchemaBase, global::NuPattern.Runtime.CustomizedLevel>
		{
		    private CustomizationLevelPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizationPolicySchema.CustomizationLevel domain property value handler.
		    /// </summary>
		    public static readonly CustomizationLevelPropertyHandler Instance = new CustomizationLevelPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizationPolicySchema.CustomizationLevel domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CustomizationLevelDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::NuPattern.Runtime.CustomizedLevel GetValue(CustomizationPolicySchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for CustomizationLevel because its Kind is
		        // set to Calculated. Please provide the GetCustomizationLevelValue()
		        // method on the domain class.
		        return element.GetCustomizationLevelValue();
		    }
		
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x29a60577, 0x5540, 0x4a0b, 0xa1, 0xd2, 0xe5, 0x49, 0x6f, 0xd9, 0xec, 0xd5);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for NuPattern.Runtime.Schema.CustomizationPolicySchema.Name
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/Name.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizationPolicySchema/Name.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("29a60577-5540-4a0b-a1d2-e5496fd9ecd5")]
		private global::System.String Name
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return namePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        NamePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizationPolicySchema.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizationPolicySchemaBase, global::System.String>
		{
		    private NamePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizationPolicySchema.Name domain property value handler.
		    /// </summary>
		    public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizationPolicySchema.Name domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return NameDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CustomizationPolicySchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.namePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizationPolicySchemaBase element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizationPolicySchemaBase element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.namePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CustomizationPolicySchemaBase>(x => x.Name);
		    }
		}
		
		#endregion
		#region Settings opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Settings.
		/// The individual settings of the customization policy
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CustomizableSettingSchema> Settings
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CustomizableSettingSchema>, CustomizableSettingSchema>(global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizationPolicySchemaDomainRoleId);
			}
		}
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual CustomizableElementSchema Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizationPolicySchemaDomainRoleId) as CustomizableElementSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizationPolicySchemaDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Schema.CustomizableSettingSchema.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Schema.CustomizableSettingSchema sourceCustomizableSettingSchema1 = sourceElement as global::NuPattern.Runtime.Schema.CustomizableSettingSchema;
			if (sourceCustomizableSettingSchema1 != null)
			{
				// Create link for path PolicyHasSettings.Settings
				this.Settings.Add(sourceCustomizableSettingSchema1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Schema.CustomizableSettingSchema sourceCustomizableSettingSchema1 = sourceElement as global::NuPattern.Runtime.Schema.CustomizableSettingSchema;
			if (sourceCustomizableSettingSchema1 != null)
			{
				// Delete link for path PolicyHasSettings.Settings
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Schema.PolicyHasSettings.GetLinks((global::NuPattern.Runtime.Schema.CustomizationPolicySchema)this, sourceCustomizableSettingSchema1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizationPolicySchemaDomainRoleId, global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizableSettingSchemaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass CustomizationPolicySchema
	/// The policy that controls what properties are customizable on an element.
	/// </summary>
			
	internal partial class CustomizationPolicySchema : CustomizationPolicySchemaBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomizationPolicySchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomizationPolicySchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass CustomizableSettingSchema
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("a8991222-7d76-4467-b4d4-663daec5050d")]
	internal abstract partial class CustomizableSettingSchemaBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomizableSettingSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa8991222, 0x7d76, 0x4467, 0xb4, 0xd4, 0x66, 0x3d, 0xae, 0xc5, 0x05, 0x0d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CustomizableSettingSchemaBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsEnabled domain property code
		
		/// <summary>
		/// IsEnabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEnabledDomainPropertyId = new global::System.Guid(0xc85e8df3, 0x5cfc, 0x4f0e, 0x87, 0x98, 0x9f, 0x9e, 0xfa, 0xc8, 0x99, 0xe1);
		
		/// <summary>
		/// Storage for IsEnabled
		/// </summary>
		private global::System.Boolean isEnabledPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsEnabled domain property.
		/// Whether this setting can be further customized by a tailor.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/IsEnabled.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/IsEnabled.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/IsEnabled.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("c85e8df3-5cfc-4f0e-8798-9f9efac899e1")]
		public global::System.Boolean IsEnabled
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return isEnabledPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        IsEnabledPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.IsEnabled domain property.
		/// </summary>
		internal sealed partial class IsEnabledPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableSettingSchemaBase, global::System.Boolean>
		{
		    private IsEnabledPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.IsEnabled domain property value handler.
		    /// </summary>
		    public static readonly IsEnabledPropertyHandler Instance = new IsEnabledPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.IsEnabled domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsEnabledDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.isEnabledPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableSettingSchemaBase element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableSettingSchemaBase element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.isEnabledPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CustomizableSettingSchemaBase>(x => x.IsEnabled);
		    }
		}
		
		#endregion
		#region Caption domain property code
		
		/// <summary>
		/// Caption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CaptionDomainPropertyId = new global::System.Guid(0x9cf11c58, 0xd5a3, 0x4791, 0xb2, 0x8a, 0x6d, 0x36, 0x78, 0x70, 0x5c, 0xc9);
		
		/// <summary>
		/// Gets or sets the value of Caption domain property.
		/// The displayed caption shown to the user.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Caption.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Caption.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Caption.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("9cf11c58-d5a3-4791-b28a-6d3678705cc9")]
		public global::System.String Caption
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return CaptionPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.Caption domain property.
		/// </summary>
		internal sealed partial class CaptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizableSettingSchemaBase, global::System.String>
		{
		    private CaptionPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.Caption domain property value handler.
		    /// </summary>
		    public static readonly CaptionPropertyHandler Instance = new CaptionPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.Caption domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CaptionDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for Caption because its Kind is
		        // set to Calculated. Please provide the GetCaptionValue()
		        // method on the domain class.
		        return element.GetCaptionValue();
		    }
		
		}
		
		#endregion
		#region CaptionFormatter domain property code
		
		/// <summary>
		/// CaptionFormatter domain property Id.
		/// </summary>
		public static readonly global::System.Guid CaptionFormatterDomainPropertyId = new global::System.Guid(0x5b0bba18, 0xb966, 0x4cc1, 0x9e, 0x51, 0x58, 0xf7, 0x22, 0x42, 0xbe, 0x36);
		
		/// <summary>
		/// Storage for CaptionFormatter
		/// </summary>
		private global::System.String captionFormatterPropertyStorage = "Modify '{0}'";
		
		/// <summary>
		/// Gets or sets the value of CaptionFormatter domain property.
		/// The formatter used for the caption.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/CaptionFormatter.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/CaptionFormatter.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/CaptionFormatter.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("Modify '{0}'")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("5b0bba18-b966-4cc1-9e51-58f72242be36")]
		public global::System.String CaptionFormatter
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return captionFormatterPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        CaptionFormatterPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.CaptionFormatter domain property.
		/// </summary>
		internal sealed partial class CaptionFormatterPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableSettingSchemaBase, global::System.String>
		{
		    private CaptionFormatterPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.CaptionFormatter domain property value handler.
		    /// </summary>
		    public static readonly CaptionFormatterPropertyHandler Instance = new CaptionFormatterPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.CaptionFormatter domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return CaptionFormatterDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.captionFormatterPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableSettingSchemaBase element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableSettingSchemaBase element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.captionFormatterPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CustomizableSettingSchemaBase>(x => x.CaptionFormatter);
		    }
		}
		
		#endregion
		#region IsModified domain property code
		
		/// <summary>
		/// IsModified domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsModifiedDomainPropertyId = new global::System.Guid(0xba6a5b29, 0x9ac7, 0x4280, 0x98, 0xaa, 0x04, 0xd8, 0xba, 0xb7, 0xcd, 0xb7);
		
		/// <summary>
		/// Gets or sets the value of IsModified domain property.
		/// Whether the settings has been modified from its default value.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/IsModified.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/IsModified.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/IsModified.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("ba6a5b29-9ac7-4280-98aa-04d8bab7cdb7")]
		public global::System.Boolean IsModified
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return IsModifiedPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.IsModified domain property.
		/// </summary>
		internal sealed partial class IsModifiedPropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizableSettingSchemaBase, global::System.Boolean>
		{
		    private IsModifiedPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.IsModified domain property value handler.
		    /// </summary>
		    public static readonly IsModifiedPropertyHandler Instance = new IsModifiedPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.IsModified domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return IsModifiedDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for IsModified because its Kind is
		        // set to Calculated. Please provide the GetIsModifiedValue()
		        // method on the domain class.
		        return element.GetIsModifiedValue();
		    }
		
		}
		
		#endregion
		#region DefaultValue domain property code
		
		/// <summary>
		/// DefaultValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultValueDomainPropertyId = new global::System.Guid(0x14621c1b, 0x4dd9, 0x4a7f, 0x99, 0x13, 0x2f, 0xa6, 0x1e, 0x0e, 0x41, 0xfe);
		
		/// <summary>
		/// Gets or sets the value of DefaultValue domain property.
		/// Whether this setting can be customized by a tailor by default.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DefaultValue.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DefaultValue.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DefaultValue.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("14621c1b-4dd9-4a7f-9913-2fa61e0e41fe")]
		public global::System.Boolean DefaultValue
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return DefaultValuePropertyHandler.Instance.GetValue(this);
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        DefaultValuePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.DefaultValue domain property.
		/// </summary>
		internal sealed partial class DefaultValuePropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableSettingSchemaBase, global::System.Boolean>
		{
		    private DefaultValuePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.DefaultValue domain property value handler.
		    /// </summary>
		    public static readonly DefaultValuePropertyHandler Instance = new DefaultValuePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.DefaultValue domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DefaultValueDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for DefaultValue because its Kind is
		        // set to CustomStorage. Please provide the GetDefaultValueValue()
		        // method on the domain class.
		        return element.GetDefaultValueValue();
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableSettingSchemaBase element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableSettingSchemaBase element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        // There is no storage for DefaultValue because its Kind is
		        // set to CustomStorage. Please provide the SetDefaultValueValue()
		        // method on the domain class.
		        element.SetDefaultValueValue(newValue);
		        ValueChanged(element, oldValue, GetValue(element));
		        element.PropertyChanges.NotifyChanged<CustomizableSettingSchemaBase>(x => x.DefaultValue);
		    }
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x6a4707d5, 0x4843, 0x412f, 0x9f, 0xd2, 0x14, 0x19, 0x16, 0xc0, 0x4e, 0x91);
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// Whether this setting can be customized by a tailor.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Value.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Value.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Value.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6a4707d5-4843-412f-9fd2-141916c04e91")]
		public global::System.Boolean Value
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return ValuePropertyHandler.Instance.GetValue(this);
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ValuePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableSettingSchemaBase, global::System.Boolean>
		{
		    private ValuePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.Value domain property value handler.
		    /// </summary>
		    public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.Value domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ValueDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.Boolean GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for Value because its Kind is
		        // set to CustomStorage. Please provide the GetValueValue()
		        // method on the domain class.
		        return element.GetValueValue();
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableSettingSchemaBase element, global::System.Boolean newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.Boolean oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableSettingSchemaBase element, global::System.Boolean oldValue, global::System.Boolean newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        // There is no storage for Value because its Kind is
		        // set to CustomStorage. Please provide the SetValueValue()
		        // method on the domain class.
		        element.SetValueValue(newValue);
		        ValueChanged(element, oldValue, GetValue(element));
		        element.PropertyChanges.NotifyChanged<CustomizableSettingSchemaBase>(x => x.Value);
		    }
		}
		
		#endregion
		#region PropertyId domain property code
		
		/// <summary>
		/// PropertyId domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyIdDomainPropertyId = new global::System.Guid(0xf098de8d, 0x21bc, 0x4375, 0x9d, 0xae, 0x9a, 0x8e, 0x21, 0xfb, 0xfc, 0x21);
		
		/// <summary>
		/// Storage for PropertyId
		/// </summary>
		private global::System.String propertyIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PropertyId domain property.
		/// The associated property name for the setting.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/PropertyId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/PropertyId.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/PropertyId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("f098de8d-21bc-4375-9dae-9a8e21fbfc21")]
		public global::System.String PropertyId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return propertyIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        PropertyIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.PropertyId domain property.
		/// </summary>
		internal sealed partial class PropertyIdPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableSettingSchemaBase, global::System.String>
		{
		    private PropertyIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.PropertyId domain property value handler.
		    /// </summary>
		    public static readonly PropertyIdPropertyHandler Instance = new PropertyIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.PropertyId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return PropertyIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.propertyIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableSettingSchemaBase element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableSettingSchemaBase element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.propertyIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CustomizableSettingSchemaBase>(x => x.PropertyId);
		    }
		}
		
		#endregion
		#region DescriptionFormatter domain property code
		
		/// <summary>
		/// DescriptionFormatter domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionFormatterDomainPropertyId = new global::System.Guid(0x8e232562, 0xaca2, 0x4bf7, 0xa0, 0x16, 0xd3, 0x0e, 0x0c, 0x99, 0x60, 0xa4);
		
		/// <summary>
		/// Storage for DescriptionFormatter
		/// </summary>
		private global::System.String descriptionFormatterPropertyStorage = "Whether the '{0}' property of this element is customizable or not.";
		
		/// <summary>
		/// Gets or sets the value of DescriptionFormatter domain property.
		/// The formatter used for the description.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DescriptionFormatter.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DescriptionFormatter.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DescriptionFormatter.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue("Whether the '{0}' property of this element is customizable or not.")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("8e232562-aca2-4bf7-a016-d30e0c9960a4")]
		public global::System.String DescriptionFormatter
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return descriptionFormatterPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    private set
		    {
		        DescriptionFormatterPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.DescriptionFormatter domain property.
		/// </summary>
		internal sealed partial class DescriptionFormatterPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomizableSettingSchemaBase, global::System.String>
		{
		    private DescriptionFormatterPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.DescriptionFormatter domain property value handler.
		    /// </summary>
		    public static readonly DescriptionFormatterPropertyHandler Instance = new DescriptionFormatterPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.DescriptionFormatter domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DescriptionFormatterDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.descriptionFormatterPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(CustomizableSettingSchemaBase element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(CustomizableSettingSchemaBase element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.descriptionFormatterPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<CustomizableSettingSchemaBase>(x => x.DescriptionFormatter);
		    }
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x2f4e56f5, 0x78e4, 0x4f49, 0x91, 0x86, 0x8e, 0xc0, 0x3c, 0xa0, 0xd8, 0x97);
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The displayed description shown to the user.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Description.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Description.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/Description.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("2f4e56f5-78e4-4f49-9186-8ec03ca0d897")]
		public global::System.String Description
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return DescriptionPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizableSettingSchemaBase, global::System.String>
		{
		    private DescriptionPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.Description domain property value handler.
		    /// </summary>
		    public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.Description domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DescriptionDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for Description because its Kind is
		        // set to Calculated. Please provide the GetDescriptionValue()
		        // method on the domain class.
		        return element.GetDescriptionValue();
		    }
		
		}
		
		#endregion
		#region DomainElementSettingType domain property code
		
		/// <summary>
		/// DomainElementSettingType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DomainElementSettingTypeDomainPropertyId = new global::System.Guid(0x39fd83fe, 0x037f, 0x4e26, 0x88, 0xa5, 0xbf, 0x43, 0xcd, 0xbb, 0x97, 0xc7);
		
		/// <summary>
		/// Gets or sets the value of DomainElementSettingType domain property.
		/// The type of domain element that this setting applies to.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DomainElementSettingType.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DomainElementSettingType.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableSettingSchema/DomainElementSettingType.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("39fd83fe-037f-4e26-88a5-bf43cdbb97c7")]
		internal CustomizableDomainElementSettingType DomainElementSettingType
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return DomainElementSettingTypePropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the CustomizableSettingSchema.DomainElementSettingType domain property.
		/// </summary>
		internal sealed partial class DomainElementSettingTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<CustomizableSettingSchemaBase, CustomizableDomainElementSettingType>
		{
		    private DomainElementSettingTypePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the CustomizableSettingSchema.DomainElementSettingType domain property value handler.
		    /// </summary>
		    public static readonly DomainElementSettingTypePropertyHandler Instance = new DomainElementSettingTypePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the CustomizableSettingSchema.DomainElementSettingType domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return DomainElementSettingTypeDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed CustomizableDomainElementSettingType GetValue(CustomizableSettingSchemaBase element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for DomainElementSettingType because its Kind is
		        // set to Calculated. Please provide the GetDomainElementSettingTypeValue()
		        // method on the domain class.
		        return element.GetDomainElementSettingTypeValue();
		    }
		
		}
		
		#endregion
		#region Policy opposite domain role accessor
		/// <summary>
		/// Gets or sets Policy.
		/// The owning policy.
		/// </summary>
		internal virtual CustomizationPolicySchema Policy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizableSettingSchemaDomainRoleId) as CustomizationPolicySchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizableSettingSchemaDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass CustomizableSettingSchema
	/// The settings for a customizable property.
	/// </summary>
			
	internal partial class CustomizableSettingSchema : CustomizableSettingSchemaBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomizableSettingSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomizableSettingSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass AutomationSettingsSchema
	/// The settings for an automation extension.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.AutomationSettingsSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.AutomationSettingsSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("a997feca-f406-49ad-82ae-fc1f53d31527")]
	internal partial class AutomationSettingsSchema : CustomizableElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AutomationSettingsSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa997feca, 0xf406, 0x49ad, 0x82, 0xae, 0xfc, 0x1f, 0x53, 0xd3, 0x15, 0x27);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutomationSettingsSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AutomationSettingsSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region AutomationType domain property code
		
		/// <summary>
		/// AutomationType domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutomationTypeDomainPropertyId = new global::System.Guid(0x8f400f8b, 0x1c99, 0x4793, 0x87, 0x13, 0x47, 0x39, 0xe1, 0xc1, 0x3a, 0xfb);
		
		/// <summary>
		/// Storage for AutomationType
		/// </summary>
		private global::System.String automationTypePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of AutomationType domain property.
		/// The name of this type of automation.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/AutomationType.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/AutomationType.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/AutomationType.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("8f400f8b-1c99-4793-8713-4739e1c13afb")]
		public global::System.String AutomationType
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return automationTypePropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        AutomationTypePropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the AutomationSettingsSchema.AutomationType domain property.
		/// </summary>
		internal sealed partial class AutomationTypePropertyHandler : DslModeling::DomainPropertyValueHandler<AutomationSettingsSchema, global::System.String>
		{
		    private AutomationTypePropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the AutomationSettingsSchema.AutomationType domain property value handler.
		    /// </summary>
		    public static readonly AutomationTypePropertyHandler Instance = new AutomationTypePropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the AutomationSettingsSchema.AutomationType domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return AutomationTypeDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(AutomationSettingsSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.automationTypePropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(AutomationSettingsSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(AutomationSettingsSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.automationTypePropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<AutomationSettingsSchema>(x => x.AutomationType);
		    }
		}
		
		#endregion
		#region Settings domain property code
		
		/// <summary>
		/// Settings domain property Id.
		/// </summary>
		public static readonly global::System.Guid SettingsDomainPropertyId = new global::System.Guid(0xf7ec96b2, 0x44eb, 0x4a19, 0x8f, 0xd2, 0x77, 0xa6, 0x95, 0xf3, 0x4e, 0x08);
		
		/// <summary>
		/// Storage for Settings
		/// </summary>
		private global::System.String settingsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Settings domain property.
		/// The specific settings for this Automation Type.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Schema.Design.AutomationSettingsTypeConverter))]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/Settings.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/Settings.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/Settings.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("f7ec96b2-44eb-4a19-8fd2-77a695f34e08")]
		internal global::System.String Settings
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return settingsPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        SettingsPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the AutomationSettingsSchema.Settings domain property.
		/// </summary>
		internal sealed partial class SettingsPropertyHandler : DslModeling::DomainPropertyValueHandler<AutomationSettingsSchema, global::System.String>
		{
		    private SettingsPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the AutomationSettingsSchema.Settings domain property value handler.
		    /// </summary>
		    public static readonly SettingsPropertyHandler Instance = new SettingsPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the AutomationSettingsSchema.Settings domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return SettingsDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(AutomationSettingsSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.settingsPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(AutomationSettingsSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(AutomationSettingsSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.settingsPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<AutomationSettingsSchema>(x => x.Settings);
		    }
		}
		
		#endregion
		#region Classification domain property code
		
		/// <summary>
		/// Classification domain property Id.
		/// </summary>
		public static readonly global::System.Guid ClassificationDomainPropertyId = new global::System.Guid(0xa1d81216, 0x30bc, 0x43a9, 0xaa, 0x6d, 0xae, 0x06, 0xa5, 0x8f, 0x54, 0x90);
		
		/// <summary>
		/// Storage for Classification
		/// </summary>
		private global::NuPattern.Runtime.AutomationSettingsClassification classificationPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::NuPattern.Runtime.AutomationSettingsClassification>("General");
		
		/// <summary>
		/// Gets or sets the value of Classification domain property.
		/// The classification of this automation.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/Classification.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/Classification.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.AutomationSettingsSchema/Classification.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.AutomationSettingsClassification), "General")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("a1d81216-30bc-43a9-aa6d-ae06a58f5490")]
		public global::NuPattern.Runtime.AutomationSettingsClassification Classification
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return classificationPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ClassificationPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the AutomationSettingsSchema.Classification domain property.
		/// </summary>
		internal sealed partial class ClassificationPropertyHandler : DslModeling::DomainPropertyValueHandler<AutomationSettingsSchema, global::NuPattern.Runtime.AutomationSettingsClassification>
		{
		    private ClassificationPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the AutomationSettingsSchema.Classification domain property value handler.
		    /// </summary>
		    public static readonly ClassificationPropertyHandler Instance = new ClassificationPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the AutomationSettingsSchema.Classification domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ClassificationDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::NuPattern.Runtime.AutomationSettingsClassification GetValue(AutomationSettingsSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.classificationPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(AutomationSettingsSchema element, global::NuPattern.Runtime.AutomationSettingsClassification newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::NuPattern.Runtime.AutomationSettingsClassification oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(AutomationSettingsSchema element, global::NuPattern.Runtime.AutomationSettingsClassification oldValue, global::NuPattern.Runtime.AutomationSettingsClassification newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.classificationPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<AutomationSettingsSchema>(x => x.Classification);
		    }
		}
		
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual PatternElementSchema Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.AutomationSettingsSchemaDomainRoleId) as PatternElementSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.AutomationSettingsSchemaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass ProvidedExtensionPointSchema
	/// The extension points that this pattern provides.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ProvidedExtensionPointSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ProvidedExtensionPointSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (ExtensionPointId = {extensionPointIdPropertyStorage})")]
	[DslModeling::DomainObjectId("14956bbf-ded7-4762-9ade-ced0cc89683c")]
	internal partial class ProvidedExtensionPointSchema : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProvidedExtensionPointSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x14956bbf, 0xded7, 0x4762, 0x9a, 0xde, 0xce, 0xd0, 0xcc, 0x89, 0x68, 0x3c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProvidedExtensionPointSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProvidedExtensionPointSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExtensionPointId domain property code
		
		/// <summary>
		/// ExtensionPointId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionPointIdDomainPropertyId = new global::System.Guid(0x9e6b27e9, 0xf683, 0x444d, 0xa1, 0xab, 0x2b, 0x3b, 0x38, 0x4f, 0x51, 0xde);
		
		/// <summary>
		/// Storage for ExtensionPointId
		/// </summary>
		private global::System.String extensionPointIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ExtensionPointId domain property.
		/// The extension point provided by this pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ProvidedExtensionPointSchema/ExtensionPointId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ProvidedExtensionPointSchema/ExtensionPointId.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ProvidedExtensionPointSchema/ExtensionPointId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9e6b27e9-f683-444d-a1ab-2b3b384f51de")]
		public global::System.String ExtensionPointId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return extensionPointIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ExtensionPointIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ProvidedExtensionPointSchema.ExtensionPointId domain property.
		/// </summary>
		internal sealed partial class ExtensionPointIdPropertyHandler : DslModeling::DomainPropertyValueHandler<ProvidedExtensionPointSchema, global::System.String>
		{
		    private ExtensionPointIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ProvidedExtensionPointSchema.ExtensionPointId domain property value handler.
		    /// </summary>
		    public static readonly ExtensionPointIdPropertyHandler Instance = new ExtensionPointIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ProvidedExtensionPointSchema.ExtensionPointId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ExtensionPointIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ProvidedExtensionPointSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.extensionPointIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ProvidedExtensionPointSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ProvidedExtensionPointSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.extensionPointIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ProvidedExtensionPointSchema>(x => x.ExtensionPointId);
		    }
		}
		
		#endregion
		#region Pattern opposite domain role accessor
		/// <summary>
		/// Gets or sets Pattern.
		/// The owning pattern.
		/// </summary>
		internal virtual PatternSchema Pattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.ProvidedExtensionPointSchemaDomainRoleId) as PatternSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.ProvidedExtensionPointSchemaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainClass ExtensionPointSchema
	/// A child extension to the pattern, provided by a pattern of another toolkit.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ExtensionPointSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ExtensionPointSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainObjectId("889fcf39-249f-4484-a7e8-2bf14320962f")]
	internal partial class ExtensionPointSchema : PatternElementSchema
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExtensionPointSchema domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x889fcf39, 0x249f, 0x4484, 0xa7, 0xe8, 0x2b, 0xf1, 0x43, 0x20, 0x96, 0x2f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExtensionPointSchema(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExtensionPointSchema(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region RequiredExtensionPointId domain property code
		
		/// <summary>
		/// RequiredExtensionPointId domain property Id.
		/// </summary>
		public static readonly global::System.Guid RequiredExtensionPointIdDomainPropertyId = new global::System.Guid(0x828924e1, 0xdeaf, 0x4cca, 0xbc, 0xc7, 0x47, 0x88, 0x9b, 0x27, 0xac, 0x06);
		
		/// <summary>
		/// Gets or sets the value of RequiredExtensionPointId domain property.
		/// The unique type of this extension point, that other patterns would provide
		/// extensions to.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ExtensionPointSchema/RequiredExtensionPointId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ExtensionPointSchema/RequiredExtensionPointId.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ExtensionPointSchema/RequiredExtensionPointId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("828924e1-deaf-4cca-bcc7-47889b27ac06")]
		public global::System.String RequiredExtensionPointId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return RequiredExtensionPointIdPropertyHandler.Instance.GetValue(this);
		    }
		}
		/// <summary>
		/// Value handler for the ExtensionPointSchema.RequiredExtensionPointId domain property.
		/// </summary>
		internal sealed partial class RequiredExtensionPointIdPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ExtensionPointSchema, global::System.String>
		{
		    private RequiredExtensionPointIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ExtensionPointSchema.RequiredExtensionPointId domain property value handler.
		    /// </summary>
		    public static readonly RequiredExtensionPointIdPropertyHandler Instance = new RequiredExtensionPointIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ExtensionPointSchema.RequiredExtensionPointId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return RequiredExtensionPointIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ExtensionPointSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        // There is no storage for RequiredExtensionPointId because its Kind is
		        // set to Calculated. Please provide the GetRequiredExtensionPointIdValue()
		        // method on the domain class.
		        return element.GetRequiredExtensionPointIdValue();
		    }
		
		}
		
		#endregion
		#region Conditions domain property code
		
		/// <summary>
		/// Conditions domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConditionsDomainPropertyId = new global::System.Guid(0xa0a863a2, 0x8c90, 0x474f, 0xb2, 0xee, 0x0a, 0x7f, 0x34, 0x03, 0x72, 0x41);
		
		/// <summary>
		/// Storage for Conditions
		/// </summary>
		private global::System.String conditionsPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Conditions domain property.
		/// The constraints that determine which patterns from other toolkits can extend
		/// this model.
		/// </summary>
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ExtensionPointSchema/Conditions.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ExtensionPointSchema/Conditions.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ExtensionPointSchema/Conditions.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("a0a863a2-8c90-474f-b2ee-0a7f34037241")]
		public global::System.String Conditions
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return conditionsPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        ConditionsPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ExtensionPointSchema.Conditions domain property.
		/// </summary>
		internal sealed partial class ConditionsPropertyHandler : DslModeling::DomainPropertyValueHandler<ExtensionPointSchema, global::System.String>
		{
		    private ConditionsPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ExtensionPointSchema.Conditions domain property value handler.
		    /// </summary>
		    public static readonly ConditionsPropertyHandler Instance = new ConditionsPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ExtensionPointSchema.Conditions domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return ConditionsDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ExtensionPointSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.conditionsPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ExtensionPointSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ExtensionPointSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.conditionsPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ExtensionPointSchema>(x => x.Conditions);
		    }
		}
		
		#endregion
		#region RepresentedExtensionPointId domain property code
		
		/// <summary>
		/// RepresentedExtensionPointId domain property Id.
		/// </summary>
		public static readonly global::System.Guid RepresentedExtensionPointIdDomainPropertyId = new global::System.Guid(0x26995a2e, 0x7740, 0x4fe4, 0x97, 0x21, 0x78, 0xdb, 0x15, 0x02, 0x65, 0x52);
		
		/// <summary>
		/// Storage for RepresentedExtensionPointId
		/// </summary>
		private global::System.String representedExtensionPointIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RepresentedExtensionPointId domain property.
		/// An extension point of a pattern represented by this extension point.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ExtensionPointSchema/RepresentedExtensionPointId.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ExtensionPointSchema/RepresentedExtensionPointId.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ExtensionPointSchema/RepresentedExtensionPointId.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("26995a2e-7740-4fe4-9721-78db15026552")]
		internal global::System.String RepresentedExtensionPointId
		{
		    [global::System.Diagnostics.DebuggerStepThrough]
		    get
		    {
		        return representedExtensionPointIdPropertyStorage;
		    }
		    [global::System.Diagnostics.DebuggerStepThrough]
		    set
		    {
		        RepresentedExtensionPointIdPropertyHandler.Instance.SetValue(this, value);
		    }
		}
		/// <summary>
		/// Value handler for the ExtensionPointSchema.RepresentedExtensionPointId domain property.
		/// </summary>
		internal sealed partial class RepresentedExtensionPointIdPropertyHandler : DslModeling::DomainPropertyValueHandler<ExtensionPointSchema, global::System.String>
		{
		    private RepresentedExtensionPointIdPropertyHandler() { }
		
		    /// <summary>
		    /// Gets the singleton instance of the ExtensionPointSchema.RepresentedExtensionPointId domain property value handler.
		    /// </summary>
		    public static readonly RepresentedExtensionPointIdPropertyHandler Instance = new RepresentedExtensionPointIdPropertyHandler();
		
		    /// <summary>
		    /// Gets the Id of the ExtensionPointSchema.RepresentedExtensionPointId domain property.
		    /// </summary>
		    public sealed override global::System.Guid DomainPropertyId
		    {
		        [global::System.Diagnostics.DebuggerStepThrough]
		        get
		        {
		            return RepresentedExtensionPointIdDomainPropertyId;
		        }
		    }
		    
		    /// <summary>
		    /// Gets a strongly-typed value of the property on specified element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <returns>Property value.</returns>
		    public override sealed global::System.String GetValue(ExtensionPointSchema element)
		    {
		        if (element == null) throw new global::System.ArgumentNullException("element");
		        return element.representedExtensionPointIdPropertyStorage;
		    }
		
		    /// <summary>
		    /// Sets property value on an element.
		    /// </summary>
		    /// <param name="element">Element which owns the property.</param>
		    /// <param name="newValue">New property value.</param>
		    public override sealed void SetValue(ExtensionPointSchema element, global::System.String newValue)
		    {
		        if (element == null)
		        {
		            throw new global::System.ArgumentNullException("element");
		        }
		
		        global::System.String oldValue = GetValue(element);
		        if (newValue != oldValue)
		        {
		            if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
		            {
		                this.SetValue(element, oldValue, newValue);
		            }
		            else
		            {
		                using (var tx = element.Store.TransactionManager.BeginTransaction())
		                {
		                    this.SetValue(element, oldValue, newValue);
		                    tx.Commit();
		                }
		            }
		        }
		    }
		
		    private void SetValue(ExtensionPointSchema element, global::System.String oldValue, global::System.String newValue)
		    {
		        this.ValueChanging(element, oldValue, newValue);
		        element.representedExtensionPointIdPropertyStorage = newValue;
		        ValueChanged(element, oldValue, newValue);
		        element.PropertyChanges.NotifyChanged<ExtensionPointSchema>(x => x.RepresentedExtensionPointId);
		    }
		}
		
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual AbstractElementSchema Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ChildElementDomainRoleId) as AbstractElementSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ChildElementDomainRoleId, value);
			}
		}
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// The owning view.
		/// </summary>
		internal virtual ViewSchema View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ExtensionPointSchemaDomainRoleId) as ViewSchema;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ExtensionPointSchemaDomainRoleId, value);
			}
		}
		#endregion
	}
}
