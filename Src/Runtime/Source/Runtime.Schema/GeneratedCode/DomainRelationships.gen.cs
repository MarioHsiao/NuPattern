//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship PatternModelHasPattern
	/// Description for NuPattern.Runtime.Schema.PatternModelHasPattern
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelHasPattern.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelHasPattern.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ef11f513-2a94-4473-8b92-e23ad76801f3")]
	internal partial class PatternModelHasPattern : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PatternModelHasPattern domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xef11f513, 0x2a94, 0x4473, 0x8b, 0x92, 0xe2, 0x3a, 0xd7, 0x68, 0x01, 0xf3);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PatternModelHasPattern link in the same Partition as the given PatternModelSchema
		/// </summary>
		/// <param name="source">PatternModelSchema to use as the source of the relationship.</param>
		/// <param name="target">PatternSchema to use as the target of the relationship.</param>
		internal PatternModelHasPattern(PatternModelSchema source, PatternSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PatternModelHasPattern.PatternModelSchemaDomainRoleId, source), new DslModeling::RoleAssignment(PatternModelHasPattern.PatternSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternModelHasPattern(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternModelHasPattern(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternModelHasPattern(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternModelHasPattern(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PatternModelSchema domain role code
		
		/// <summary>
		/// PatternModelSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid PatternModelSchemaDomainRoleId = new global::System.Guid(0xba78db30, 0xbb4c, 0x4613, 0xb7, 0x49, 0x2c, 0x41, 0x12, 0x13, 0x57, 0x70);
		
		/// <summary>
		/// DomainRole PatternModelSchema
		/// The pattern in this definition.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelHasPattern/PatternModelSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelHasPattern/PatternModelSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Pattern", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternModelHasPattern/PatternModelSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ba78db30-bb4c-4613-b749-2c4112135770")]
		public virtual PatternModelSchema PatternModelSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PatternModelSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, PatternModelSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PatternModelSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PatternModel of a PatternSchema
		/// <summary>
		/// Gets PatternModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PatternModelSchema GetPatternModel(PatternSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PatternSchemaDomainRoleId) as PatternModelSchema;
		}
		
		/// <summary>
		/// Sets PatternModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPatternModel(PatternSchema element, PatternModelSchema newPatternModelSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PatternSchemaDomainRoleId, newPatternModelSchema);
		}
		#endregion
		#region PatternSchema domain role code
		
		/// <summary>
		/// PatternSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid PatternSchemaDomainRoleId = new global::System.Guid(0xa173d11e, 0xd3aa, 0x41c0, 0x80, 0x0c, 0x8a, 0x90, 0xc8, 0xbf, 0xdf, 0x2b);
		
		/// <summary>
		/// DomainRole PatternSchema
		/// The definition of the pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternModelHasPattern/PatternSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternModelHasPattern/PatternSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PatternModel", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternModelHasPattern/PatternSchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a173d11e-d3aa-41c0-800c-8a90c8bfdf2b")]
		internal virtual PatternSchema PatternSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PatternSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, PatternSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PatternSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Pattern of a PatternModelSchema
		/// <summary>
		/// Gets Pattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PatternSchema GetPattern(PatternModelSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PatternModelSchemaDomainRoleId) as PatternSchema;
		}
		
		/// <summary>
		/// Sets Pattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPattern(PatternModelSchema element, PatternSchema newPatternSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PatternModelSchemaDomainRoleId, newPatternSchema);
		}
		#endregion
		#region PatternModelSchema link accessor
		/// <summary>
		/// Get the PatternModelHasPattern link to a PatternModelSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternModelHasPattern GetLinkToPattern (global::NuPattern.Runtime.Schema.PatternModelSchema patternModelSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternModelHasPattern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternModelHasPattern>(patternModelSchemaInstance, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternModelSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PatternModelSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PatternSchema link accessor
		/// <summary>
		/// Get the PatternModelHasPattern link to a PatternSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternModelHasPattern GetLinkToPatternModel (global::NuPattern.Runtime.Schema.PatternSchema patternSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternModelHasPattern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternModelHasPattern>(patternSchemaInstance, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PatternSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PatternModelHasPattern instance accessors
		
		/// <summary>
		/// Get any PatternModelHasPattern links between a given PatternModelSchema and a PatternSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternModelHasPattern> GetLinks( global::NuPattern.Runtime.Schema.PatternModelSchema source, global::NuPattern.Runtime.Schema.PatternSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternModelHasPattern> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternModelHasPattern>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternModelHasPattern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternModelHasPattern>(source, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternModelSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternModelHasPattern link in links )
			{
				if ( target.Equals(link.PatternSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PatternModelHasPattern link between a given PatternModelSchemaand a PatternSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternModelHasPattern GetLink( global::NuPattern.Runtime.Schema.PatternModelSchema source, global::NuPattern.Runtime.Schema.PatternSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternModelHasPattern> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternModelHasPattern>(source, global::NuPattern.Runtime.Schema.PatternModelHasPattern.PatternModelSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternModelHasPattern link in links )
			{
				if ( target.Equals(link.PatternSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship PatternElementHasProperties
	/// Description for NuPattern.Runtime.Schema.PatternElementHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementHasProperties.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementHasProperties.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4b1811b8-c0fe-451a-9715-881e3af1eb2f")]
	internal partial class PatternElementHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PatternElementHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4b1811b8, 0xc0fe, 0x451a, 0x97, 0x15, 0x88, 0x1e, 0x3a, 0xf1, 0xeb, 0x2f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PatternElementHasProperties link in the same Partition as the given PatternElementSchema
		/// </summary>
		/// <param name="source">PatternElementSchema to use as the source of the relationship.</param>
		/// <param name="target">PropertySchema to use as the target of the relationship.</param>
		internal PatternElementHasProperties(PatternElementSchema source, PropertySchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PatternElementHasProperties.PatternElementSchemaDomainRoleId, source), new DslModeling::RoleAssignment(PatternElementHasProperties.PropertySchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternElementHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternElementHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternElementHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternElementHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PatternElementSchema domain role code
		
		/// <summary>
		/// PatternElementSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid PatternElementSchemaDomainRoleId = new global::System.Guid(0x047b91aa, 0x4ea9, 0x4dfe, 0x9f, 0x20, 0xb5, 0xc2, 0xff, 0x8a, 0xe6, 0xdf);
		
		/// <summary>
		/// DomainRole PatternElementSchema
		/// The properties of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementHasProperties/PatternElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementHasProperties/PatternElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternElementHasProperties/PatternElementSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("047b91aa-4ea9-4dfe-9f20-b5c2ff8ae6df")]
		internal virtual PatternElementSchema PatternElementSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PatternElementSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, PatternElementSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PatternElementSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a PropertySchema
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PatternElementSchema GetOwner(PropertySchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertySchemaDomainRoleId) as PatternElementSchema;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetOwner(PropertySchema element, PatternElementSchema newPatternElementSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertySchemaDomainRoleId, newPatternElementSchema);
		}
		#endregion
		#region PropertySchema domain role code
		
		/// <summary>
		/// PropertySchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertySchemaDomainRoleId = new global::System.Guid(0xa36dc941, 0xfb07, 0x4d65, 0x84, 0x7f, 0x09, 0xfe, 0x8e, 0xe6, 0x44, 0x97);
		
		/// <summary>
		/// DomainRole PropertySchema
		/// The owning element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementHasProperties/PropertySchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementHasProperties/PropertySchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternElementHasProperties/PropertySchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a36dc941-fb07-4d65-847f-09fe8ee64497")]
		internal virtual PropertySchema PropertySchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertySchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertySchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertySchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a PatternElementSchema
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<PropertySchema> GetProperties(PatternElementSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PropertySchema>, PropertySchema>(element, PatternElementSchemaDomainRoleId);
		}
		#endregion
		#region PatternElementSchema link accessor
		/// <summary>
		/// Get the list of PatternElementHasProperties links to a PatternElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternElementHasProperties> GetLinksToProperties ( global::NuPattern.Runtime.Schema.PatternElementSchema patternElementSchemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasProperties>(patternElementSchemaInstance, global::NuPattern.Runtime.Schema.PatternElementHasProperties.PatternElementSchemaDomainRoleId);
		}
		#endregion
		#region PropertySchema link accessor
		/// <summary>
		/// Get the PatternElementHasProperties link to a PropertySchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternElementHasProperties GetLinkToOwner (global::NuPattern.Runtime.Schema.PropertySchema propertySchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasProperties>(propertySchemaInstance, global::NuPattern.Runtime.Schema.PatternElementHasProperties.PropertySchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PropertySchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PatternElementHasProperties instance accessors
		
		/// <summary>
		/// Get any PatternElementHasProperties links between a given PatternElementSchema and a PropertySchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternElementHasProperties> GetLinks( global::NuPattern.Runtime.Schema.PatternElementSchema source, global::NuPattern.Runtime.Schema.PropertySchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternElementHasProperties> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternElementHasProperties>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasProperties>(source, global::NuPattern.Runtime.Schema.PatternElementHasProperties.PatternElementSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternElementHasProperties link in links )
			{
				if ( target.Equals(link.PropertySchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PatternElementHasProperties link between a given PatternElementSchemaand a PropertySchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternElementHasProperties GetLink( global::NuPattern.Runtime.Schema.PatternElementSchema source, global::NuPattern.Runtime.Schema.PropertySchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasProperties>(source, global::NuPattern.Runtime.Schema.PatternElementHasProperties.PatternElementSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternElementHasProperties link in links )
			{
				if ( target.Equals(link.PropertySchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship PatternHasViews
	/// Description for NuPattern.Runtime.Schema.PatternHasViews
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternHasViews.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternHasViews.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("aad70656-c8af-4d31-bd93-e288096ee274")]
	internal partial class PatternHasViews : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PatternHasViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xaad70656, 0xc8af, 0x4d31, 0xbd, 0x93, 0xe2, 0x88, 0x09, 0x6e, 0xe2, 0x74);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PatternHasViews link in the same Partition as the given PatternSchema
		/// </summary>
		/// <param name="source">PatternSchema to use as the source of the relationship.</param>
		/// <param name="target">ViewSchema to use as the target of the relationship.</param>
		internal PatternHasViews(PatternSchema source, ViewSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PatternHasViews.PatternSchemaDomainRoleId, source), new DslModeling::RoleAssignment(PatternHasViews.ViewSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternHasViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternHasViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternHasViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternHasViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PatternSchema domain role code
		
		/// <summary>
		/// PatternSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid PatternSchemaDomainRoleId = new global::System.Guid(0x9b7b2ee3, 0x1c1f, 0x48f2, 0xa8, 0x73, 0x07, 0x77, 0x4f, 0x4d, 0xd0, 0x2d);
		
		/// <summary>
		/// DomainRole PatternSchema
		/// The views of this pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternHasViews/PatternSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternHasViews/PatternSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Views", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternHasViews/PatternSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("9b7b2ee3-1c1f-48f2-a873-07774f4dd02d")]
		internal virtual PatternSchema PatternSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PatternSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, PatternSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PatternSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Pattern of a ViewSchema
		/// <summary>
		/// Gets Pattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PatternSchema GetPattern(ViewSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewSchemaDomainRoleId) as PatternSchema;
		}
		
		/// <summary>
		/// Sets Pattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPattern(ViewSchema element, PatternSchema newPatternSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewSchemaDomainRoleId, newPatternSchema);
		}
		#endregion
		#region ViewSchema domain role code
		
		/// <summary>
		/// ViewSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewSchemaDomainRoleId = new global::System.Guid(0x413f3607, 0x99ef, 0x4762, 0x80, 0x93, 0xea, 0xb8, 0x55, 0x59, 0xd3, 0x2d);
		
		/// <summary>
		/// DomainRole ViewSchema
		/// The owning pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternHasViews/ViewSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternHasViews/ViewSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Pattern", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternHasViews/ViewSchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("413f3607-99ef-4762-8093-eab85559d32d")]
		internal virtual ViewSchema ViewSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a PatternSchema
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<ViewSchema> GetViews(PatternSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ViewSchema>, ViewSchema>(element, PatternSchemaDomainRoleId);
		}
		#endregion
		#region PatternSchema link accessor
		/// <summary>
		/// Get the list of PatternHasViews links to a PatternSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternHasViews> GetLinksToViews ( global::NuPattern.Runtime.Schema.PatternSchema patternSchemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasViews>(patternSchemaInstance, global::NuPattern.Runtime.Schema.PatternHasViews.PatternSchemaDomainRoleId);
		}
		#endregion
		#region ViewSchema link accessor
		/// <summary>
		/// Get the PatternHasViews link to a ViewSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternHasViews GetLinkToPattern (global::NuPattern.Runtime.Schema.ViewSchema viewSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasViews>(viewSchemaInstance, global::NuPattern.Runtime.Schema.PatternHasViews.ViewSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ViewSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PatternHasViews instance accessors
		
		/// <summary>
		/// Get any PatternHasViews links between a given PatternSchema and a ViewSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternHasViews> GetLinks( global::NuPattern.Runtime.Schema.PatternSchema source, global::NuPattern.Runtime.Schema.ViewSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternHasViews> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternHasViews>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasViews>(source, global::NuPattern.Runtime.Schema.PatternHasViews.PatternSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternHasViews link in links )
			{
				if ( target.Equals(link.ViewSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PatternHasViews link between a given PatternSchemaand a ViewSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternHasViews GetLink( global::NuPattern.Runtime.Schema.PatternSchema source, global::NuPattern.Runtime.Schema.ViewSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasViews>(source, global::NuPattern.Runtime.Schema.PatternHasViews.PatternSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternHasViews link in links )
			{
				if ( target.Equals(link.ViewSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship ViewHasElements
	/// Description for NuPattern.Runtime.Schema.ViewHasElements
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3bfd2e51-26d4-48dd-89a2-7e7a715b2bfd")]
	internal partial class ViewHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3bfd2e51, 0x26d4, 0x48dd, 0x89, 0xa2, 0x7e, 0x7a, 0x71, 0x5b, 0x2b, 0xfd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasElements link in the same Partition as the given ViewSchema
		/// </summary>
		/// <param name="source">ViewSchema to use as the source of the relationship.</param>
		/// <param name="target">AbstractElementSchema to use as the target of the relationship.</param>
		internal ViewHasElements(ViewSchema source, AbstractElementSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasElements.ViewSchemaDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasElements.AbstractElementSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ViewSchema domain role code
		
		/// <summary>
		/// ViewSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewSchemaDomainRoleId = new global::System.Guid(0xf8ee9bb4, 0x3327, 0x41db, 0x84, 0xc6, 0x10, 0xf8, 0x14, 0x25, 0xe0, 0xb1);
		
		/// <summary>
		/// DomainRole ViewSchema
		/// The child elements of the view.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/ViewSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/ViewSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ViewHasElements/ViewSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f8ee9bb4-3327-41db-84c6-10f81425e0b1")]
		internal virtual ViewSchema ViewSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a AbstractElementSchema
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static ViewSchema GetView(AbstractElementSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractElementSchemaDomainRoleId) as ViewSchema;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetView(AbstractElementSchema element, ViewSchema newViewSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractElementSchemaDomainRoleId, newViewSchema);
		}
		#endregion
		#region AbstractElementSchema domain role code
		
		/// <summary>
		/// AbstractElementSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractElementSchemaDomainRoleId = new global::System.Guid(0x9144c828, 0x2674, 0x4da6, 0xb7, 0xcd, 0x02, 0xba, 0x2c, 0xaa, 0x48, 0xb0);
		
		/// <summary>
		/// DomainRole AbstractElementSchema
		/// The owning view.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/AbstractElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/AbstractElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ViewHasElements/AbstractElementSchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9144c828-2674-4da6-b7cd-02ba2caa48b0")]
		internal virtual AbstractElementSchema AbstractElementSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElementSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractElementSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractElementSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a ViewSchema
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<AbstractElementSchema> GetElements(ViewSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElementSchema>, AbstractElementSchema>(element, ViewSchemaDomainRoleId);
		}
		#endregion
		#region Cardinality domain property code
		
		/// <summary>
		/// Cardinality domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityDomainPropertyId = new global::System.Guid(0xdfc4aa83, 0xb438, 0x459f, 0xbb, 0x11, 0xb4, 0x70, 0xe8, 0x2c, 0xbc, 0xc2);
		
		/// <summary>
		/// Storage for Cardinality
		/// </summary>
		private global::NuPattern.Runtime.Cardinality cardinalityPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::NuPattern.Runtime.Cardinality>("OneToOne");
		
		/// <summary>
		/// Gets or sets the value of Cardinality domain property.
		/// The number of instances of this collection/element, for this view.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/Cardinality.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasElements/Cardinality.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/Cardinality.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.Cardinality), "OneToOne")]
		[DslModeling::DomainObjectId("dfc4aa83-b438-459f-bb11-b470e82cbcc2")]
		public global::NuPattern.Runtime.Cardinality Cardinality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cardinalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CardinalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasElements.Cardinality domain property.
		/// </summary>
		internal sealed partial class CardinalityPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasElements, global::NuPattern.Runtime.Cardinality>
		{
			private CardinalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasElements.Cardinality domain property value handler.
			/// </summary>
			public static readonly CardinalityPropertyHandler Instance = new CardinalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasElements.Cardinality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::NuPattern.Runtime.Cardinality GetValue(ViewHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cardinalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasElements element, global::NuPattern.Runtime.Cardinality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::NuPattern.Runtime.Cardinality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cardinalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CardinalityCaption domain property code
		
		/// <summary>
		/// CardinalityCaption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityCaptionDomainPropertyId = new global::System.Guid(0x1e1d2e7f, 0xfc69, 0x484e, 0xa9, 0xc8, 0xf6, 0x95, 0xe0, 0x0b, 0x9b, 0x3d);
		
		/// <summary>
		/// Gets or sets the value of CardinalityCaption domain property.
		/// The displayed caption for the cardinality.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/CardinalityCaption.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasElements/CardinalityCaption.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/CardinalityCaption.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("1e1d2e7f-fc69-484e-a9c8-f695e00b9b3d")]
		public global::System.String CardinalityCaption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CardinalityCaptionPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasElements.CardinalityCaption domain property.
		/// </summary>
		internal sealed partial class CardinalityCaptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ViewHasElements, global::System.String>
		{
			private CardinalityCaptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasElements.CardinalityCaption domain property value handler.
			/// </summary>
			public static readonly CardinalityCaptionPropertyHandler Instance = new CardinalityCaptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasElements.CardinalityCaption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityCaptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CardinalityCaption because its Kind is
				// set to Calculated. Please provide the GetCardinalityCaptionValue()
				// method on the domain class.
				return element.GetCardinalityCaptionValue();
			}
		
		}
		
		#endregion
		#region AutoCreate domain property code
		
		/// <summary>
		/// AutoCreate domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutoCreateDomainPropertyId = new global::System.Guid(0xa805afd4, 0xdf27, 0x410e, 0xb4, 0x67, 0x1f, 0x5e, 0x7f, 0xcd, 0xb7, 0x8e);
		
		/// <summary>
		/// Storage for AutoCreate
		/// </summary>
		private global::System.Boolean autoCreatePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AutoCreate domain property.
		/// Whether to automatically create the first instance of this collection/element
		/// when the view is created.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/AutoCreate.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasElements/AutoCreate.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/AutoCreate.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("a805afd4-df27-410e-b467-1f5e7fcdb78e")]
		public global::System.Boolean AutoCreate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return autoCreatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutoCreatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasElements.AutoCreate domain property.
		/// </summary>
		internal sealed partial class AutoCreatePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasElements, global::System.Boolean>
		{
			private AutoCreatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasElements.AutoCreate domain property value handler.
			/// </summary>
			public static readonly AutoCreatePropertyHandler Instance = new AutoCreatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasElements.AutoCreate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutoCreateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.autoCreatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasElements element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.autoCreatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AllowAddNew domain property code
		
		/// <summary>
		/// AllowAddNew domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowAddNewDomainPropertyId = new global::System.Guid(0xc19f4398, 0x079f, 0x4f7d, 0x9d, 0x83, 0x57, 0x99, 0x5a, 0xd2, 0xa7, 0x15);
		
		/// <summary>
		/// Storage for AllowAddNew
		/// </summary>
		private global::System.Boolean allowAddNewPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowAddNew domain property.
		/// Whether to allow UI (i.e. menus) for adding new instances of this
		/// collection/element manually.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/AllowAddNew.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasElements/AllowAddNew.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/AllowAddNew.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("c19f4398-079f-4f7d-9d83-57995ad2a715")]
		public global::System.Boolean AllowAddNew
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowAddNewPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowAddNewPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasElements.AllowAddNew domain property.
		/// </summary>
		internal sealed partial class AllowAddNewPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasElements, global::System.Boolean>
		{
			private AllowAddNewPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasElements.AllowAddNew domain property value handler.
			/// </summary>
			public static readonly AllowAddNewPropertyHandler Instance = new AllowAddNewPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasElements.AllowAddNew domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowAddNewDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.allowAddNewPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasElements element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowAddNewPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OrderGroup domain property code
		
		/// <summary>
		/// OrderGroup domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupDomainPropertyId = new global::System.Guid(0xb4bdc451, 0xc23d, 0x4ad0, 0x8d, 0x54, 0x2f, 0x0b, 0x1b, 0x5f, 0xf2, 0x5c);
		
		/// <summary>
		/// Storage for OrderGroup
		/// </summary>
		private global::System.Int32 orderGroupPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of OrderGroup domain property.
		/// The group in which instances of the element/collection will be ordered together,
		/// relative to instances of sibling elements/collections. By default, all instances
		/// of all sibling elements/collections are ordered together alphabetically by their
		/// 'InstanceName' property.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/OrderGroup.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasElements/OrderGroup.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/OrderGroup.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("b4bdc451-c23d-4ad0-8d54-2f0b1b5ff25c")]
		public global::System.Int32 OrderGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasElements.OrderGroup domain property.
		/// </summary>
		internal sealed partial class OrderGroupPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasElements, global::System.Int32>
		{
			private OrderGroupPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasElements.OrderGroup domain property value handler.
			/// </summary>
			public static readonly OrderGroupPropertyHandler Instance = new OrderGroupPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasElements.OrderGroup domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ViewHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasElements element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OrderGroupComparerTypeName domain property code
		
		/// <summary>
		/// OrderGroupComparerTypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupComparerTypeNameDomainPropertyId = new global::System.Guid(0xc619605a, 0x9fed, 0x4372, 0xbe, 0x5c, 0xdc, 0xa9, 0x10, 0xfc, 0x10, 0x61);
		
		/// <summary>
		/// Storage for OrderGroupComparerTypeName
		/// </summary>
		private global::System.String orderGroupComparerTypeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OrderGroupComparerTypeName domain property.
		/// A System.Collections.IComparer class that determines how instances of all
		/// elements/collections in this 'Order Group' are ordered together. If left blank,
		/// then instances of all elements/collections are ordered together alphabetically
		/// by their 'InstanceName' property.
		/// </summary>
		[System.ComponentModel.Editor(typeof(NuPattern.ComponentModel.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FullTypeTypeConverter<System.Collections.IComparer>))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasElements/OrderGroupComparerTypeName.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasElements/OrderGroupComparerTypeName.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasElements/OrderGroupComparerTypeName.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("c619605a-9fed-4372-be5c-dca910fc1061")]
		public global::System.String OrderGroupComparerTypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupComparerTypeNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupComparerTypeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasElements.OrderGroupComparerTypeName domain property.
		/// </summary>
		internal sealed partial class OrderGroupComparerTypeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasElements, global::System.String>
		{
			private OrderGroupComparerTypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasElements.OrderGroupComparerTypeName domain property value handler.
			/// </summary>
			public static readonly OrderGroupComparerTypeNamePropertyHandler Instance = new OrderGroupComparerTypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasElements.OrderGroupComparerTypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupComparerTypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupComparerTypeNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasElements element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupComparerTypeNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ViewSchema link accessor
		/// <summary>
		/// Get the list of ViewHasElements links to a ViewSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ViewHasElements> GetLinksToElements ( global::NuPattern.Runtime.Schema.ViewSchema viewSchemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasElements>(viewSchemaInstance, global::NuPattern.Runtime.Schema.ViewHasElements.ViewSchemaDomainRoleId);
		}
		#endregion
		#region AbstractElementSchema link accessor
		/// <summary>
		/// Get the ViewHasElements link to a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ViewHasElements GetLinkToView (global::NuPattern.Runtime.Schema.AbstractElementSchema abstractElementSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ViewHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasElements>(abstractElementSchemaInstance, global::NuPattern.Runtime.Schema.ViewHasElements.AbstractElementSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractElementSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasElements instance accessors
		
		/// <summary>
		/// Get any ViewHasElements links between a given ViewSchema and a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ViewHasElements> GetLinks( global::NuPattern.Runtime.Schema.ViewSchema source, global::NuPattern.Runtime.Schema.AbstractElementSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ViewHasElements> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ViewHasElements>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ViewHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasElements>(source, global::NuPattern.Runtime.Schema.ViewHasElements.ViewSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ViewHasElements link in links )
			{
				if ( target.Equals(link.AbstractElementSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasElements link between a given ViewSchemaand a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ViewHasElements GetLink( global::NuPattern.Runtime.Schema.ViewSchema source, global::NuPattern.Runtime.Schema.AbstractElementSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ViewHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasElements>(source, global::NuPattern.Runtime.Schema.ViewHasElements.ViewSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ViewHasElements link in links )
			{
				if ( target.Equals(link.AbstractElementSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship PolicyHasSettings
	/// Description for NuPattern.Runtime.Schema.PolicyHasSettings
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PolicyHasSettings.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PolicyHasSettings.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c30fb6ed-9e58-473d-a596-e52f20c88224")]
	internal partial class PolicyHasSettings : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PolicyHasSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc30fb6ed, 0x9e58, 0x473d, 0xa5, 0x96, 0xe5, 0x2f, 0x20, 0xc8, 0x82, 0x24);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PolicyHasSettings link in the same Partition as the given CustomizationPolicySchema
		/// </summary>
		/// <param name="source">CustomizationPolicySchema to use as the source of the relationship.</param>
		/// <param name="target">CustomizableSettingSchema to use as the target of the relationship.</param>
		internal PolicyHasSettings(CustomizationPolicySchema source, CustomizableSettingSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PolicyHasSettings.CustomizationPolicySchemaDomainRoleId, source), new DslModeling::RoleAssignment(PolicyHasSettings.CustomizableSettingSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PolicyHasSettings(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PolicyHasSettings(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PolicyHasSettings(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PolicyHasSettings(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CustomizationPolicySchema domain role code
		
		/// <summary>
		/// CustomizationPolicySchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid CustomizationPolicySchemaDomainRoleId = new global::System.Guid(0xeb849f5a, 0x92b0, 0x4bd1, 0x8b, 0x0d, 0x05, 0x66, 0x3d, 0xe5, 0x99, 0xcd);
		
		/// <summary>
		/// DomainRole CustomizationPolicySchema
		/// The individual settings of the customization policy
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PolicyHasSettings/CustomizationPolicySchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PolicyHasSettings/CustomizationPolicySchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Settings", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PolicyHasSettings/CustomizationPolicySchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("eb849f5a-92b0-4bd1-8b0d-05663de599cd")]
		internal virtual CustomizationPolicySchema CustomizationPolicySchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CustomizationPolicySchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, CustomizationPolicySchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CustomizationPolicySchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Policy of a CustomizableSettingSchema
		/// <summary>
		/// Gets Policy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static CustomizationPolicySchema GetPolicy(CustomizableSettingSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CustomizableSettingSchemaDomainRoleId) as CustomizationPolicySchema;
		}
		
		/// <summary>
		/// Sets Policy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPolicy(CustomizableSettingSchema element, CustomizationPolicySchema newCustomizationPolicySchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CustomizableSettingSchemaDomainRoleId, newCustomizationPolicySchema);
		}
		#endregion
		#region CustomizableSettingSchema domain role code
		
		/// <summary>
		/// CustomizableSettingSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid CustomizableSettingSchemaDomainRoleId = new global::System.Guid(0xab2c4075, 0x57db, 0x4e21, 0x9b, 0x1f, 0xda, 0x59, 0xfa, 0x3e, 0x5d, 0x3d);
		
		/// <summary>
		/// DomainRole CustomizableSettingSchema
		/// The owning policy.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PolicyHasSettings/CustomizableSettingSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PolicyHasSettings/CustomizableSettingSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Policy", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PolicyHasSettings/CustomizableSettingSchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ab2c4075-57db-4e21-9b1f-da59fa3e5d3d")]
		internal virtual CustomizableSettingSchema CustomizableSettingSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CustomizableSettingSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, CustomizableSettingSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CustomizableSettingSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Settings of a CustomizationPolicySchema
		/// <summary>
		/// Gets a list of Settings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<CustomizableSettingSchema> GetSettings(CustomizationPolicySchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CustomizableSettingSchema>, CustomizableSettingSchema>(element, CustomizationPolicySchemaDomainRoleId);
		}
		#endregion
		#region CustomizationPolicySchema link accessor
		/// <summary>
		/// Get the list of PolicyHasSettings links to a CustomizationPolicySchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PolicyHasSettings> GetLinksToSettings ( global::NuPattern.Runtime.Schema.CustomizationPolicySchema customizationPolicySchemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PolicyHasSettings>(customizationPolicySchemaInstance, global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizationPolicySchemaDomainRoleId);
		}
		#endregion
		#region CustomizableSettingSchema link accessor
		/// <summary>
		/// Get the PolicyHasSettings link to a CustomizableSettingSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PolicyHasSettings GetLinkToPolicy (global::NuPattern.Runtime.Schema.CustomizableSettingSchema customizableSettingSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PolicyHasSettings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PolicyHasSettings>(customizableSettingSchemaInstance, global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizableSettingSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CustomizableSettingSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PolicyHasSettings instance accessors
		
		/// <summary>
		/// Get any PolicyHasSettings links between a given CustomizationPolicySchema and a CustomizableSettingSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PolicyHasSettings> GetLinks( global::NuPattern.Runtime.Schema.CustomizationPolicySchema source, global::NuPattern.Runtime.Schema.CustomizableSettingSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PolicyHasSettings> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PolicyHasSettings>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PolicyHasSettings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PolicyHasSettings>(source, global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizationPolicySchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PolicyHasSettings link in links )
			{
				if ( target.Equals(link.CustomizableSettingSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PolicyHasSettings link between a given CustomizationPolicySchemaand a CustomizableSettingSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PolicyHasSettings GetLink( global::NuPattern.Runtime.Schema.CustomizationPolicySchema source, global::NuPattern.Runtime.Schema.CustomizableSettingSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PolicyHasSettings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PolicyHasSettings>(source, global::NuPattern.Runtime.Schema.PolicyHasSettings.CustomizationPolicySchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PolicyHasSettings link in links )
			{
				if ( target.Equals(link.CustomizableSettingSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship CustomizableElementHasPolicy
	/// Description for NuPattern.Runtime.Schema.CustomizableElementHasPolicy
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementHasPolicy.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementHasPolicy.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b060fe61-7009-47eb-a1ad-5267426e6afd")]
	internal partial class CustomizableElementHasPolicy : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CustomizableElementHasPolicy domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb060fe61, 0x7009, 0x47eb, 0xa1, 0xad, 0x52, 0x67, 0x42, 0x6e, 0x6a, 0xfd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CustomizableElementHasPolicy link in the same Partition as the given CustomizableElementSchema
		/// </summary>
		/// <param name="source">CustomizableElementSchema to use as the source of the relationship.</param>
		/// <param name="target">CustomizationPolicySchema to use as the target of the relationship.</param>
		internal CustomizableElementHasPolicy(CustomizableElementSchema source, CustomizationPolicySchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CustomizableElementHasPolicy.CustomizableElementSchemaDomainRoleId, source), new DslModeling::RoleAssignment(CustomizableElementHasPolicy.CustomizationPolicySchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CustomizableElementHasPolicy(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CustomizableElementHasPolicy(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CustomizableElementHasPolicy(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CustomizableElementHasPolicy(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CustomizableElementSchema domain role code
		
		/// <summary>
		/// CustomizableElementSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid CustomizableElementSchemaDomainRoleId = new global::System.Guid(0x873ce323, 0x5608, 0x4607, 0x87, 0x0b, 0x14, 0x19, 0xd5, 0xa4, 0xc8, 0x8d);
		
		/// <summary>
		/// DomainRole CustomizableElementSchema
		/// The customization policy that applies to the element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementHasPolicy/CustomizableElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementHasPolicy/CustomizableElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Policy", PropertyDisplayNameKey="NuPattern.Runtime.Schema.CustomizableElementHasPolicy/CustomizableElementSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("873ce323-5608-4607-870b-1419d5a4c88d")]
		internal virtual CustomizableElementSchema CustomizableElementSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CustomizableElementSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, CustomizableElementSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CustomizableElementSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a CustomizationPolicySchema
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static CustomizableElementSchema GetOwner(CustomizationPolicySchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CustomizationPolicySchemaDomainRoleId) as CustomizableElementSchema;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetOwner(CustomizationPolicySchema element, CustomizableElementSchema newCustomizableElementSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CustomizationPolicySchemaDomainRoleId, newCustomizableElementSchema);
		}
		#endregion
		#region CustomizationPolicySchema domain role code
		
		/// <summary>
		/// CustomizationPolicySchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid CustomizationPolicySchemaDomainRoleId = new global::System.Guid(0xfdc3a233, 0xa290, 0x4fa9, 0xb8, 0x91, 0xb5, 0xf9, 0xae, 0x24, 0x25, 0xf7);
		
		/// <summary>
		/// DomainRole CustomizationPolicySchema
		/// The owning element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.CustomizableElementHasPolicy/CustomizationPolicySchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.CustomizableElementHasPolicy/CustomizationPolicySchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="NuPattern.Runtime.Schema.CustomizableElementHasPolicy/CustomizationPolicySchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fdc3a233-a290-4fa9-b891-b5f9ae2425f7")]
		internal virtual CustomizationPolicySchema CustomizationPolicySchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CustomizationPolicySchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, CustomizationPolicySchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CustomizationPolicySchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Policy of a CustomizableElementSchema
		/// <summary>
		/// Gets Policy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static CustomizationPolicySchema GetPolicy(CustomizableElementSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CustomizableElementSchemaDomainRoleId) as CustomizationPolicySchema;
		}
		
		/// <summary>
		/// Sets Policy.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPolicy(CustomizableElementSchema element, CustomizationPolicySchema newCustomizationPolicySchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CustomizableElementSchemaDomainRoleId, newCustomizationPolicySchema);
		}
		#endregion
		#region CustomizableElementSchema link accessor
		/// <summary>
		/// Get the CustomizableElementHasPolicy link to a CustomizableElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy GetLinkToPolicy (global::NuPattern.Runtime.Schema.CustomizableElementSchema customizableElementSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy>(customizableElementSchemaInstance, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizableElementSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CustomizableElementSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CustomizationPolicySchema link accessor
		/// <summary>
		/// Get the CustomizableElementHasPolicy link to a CustomizationPolicySchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy GetLinkToOwner (global::NuPattern.Runtime.Schema.CustomizationPolicySchema customizationPolicySchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy>(customizationPolicySchemaInstance, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizationPolicySchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CustomizationPolicySchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CustomizableElementHasPolicy instance accessors
		
		/// <summary>
		/// Get any CustomizableElementHasPolicy links between a given CustomizableElementSchema and a CustomizationPolicySchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy> GetLinks( global::NuPattern.Runtime.Schema.CustomizableElementSchema source, global::NuPattern.Runtime.Schema.CustomizationPolicySchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy>(source, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizableElementSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy link in links )
			{
				if ( target.Equals(link.CustomizationPolicySchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CustomizableElementHasPolicy link between a given CustomizableElementSchemaand a CustomizationPolicySchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy GetLink( global::NuPattern.Runtime.Schema.CustomizableElementSchema source, global::NuPattern.Runtime.Schema.CustomizationPolicySchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy>(source, global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy.CustomizableElementSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.CustomizableElementHasPolicy link in links )
			{
				if ( target.Equals(link.CustomizationPolicySchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship ElementHasElements
	/// Description for NuPattern.Runtime.Schema.ElementHasElements
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b0afa4dc-233e-4c6c-a058-5b2f2989b751")]
	internal partial class ElementHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb0afa4dc, 0x233e, 0x4c6c, 0xa0, 0x58, 0x5b, 0x2f, 0x29, 0x89, 0xb7, 0x51);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementHasElements link in the same Partition as the given AbstractElementSchema
		/// </summary>
		/// <param name="source">AbstractElementSchema to use as the source of the relationship.</param>
		/// <param name="target">AbstractElementSchema to use as the target of the relationship.</param>
		internal ElementHasElements(AbstractElementSchema source, AbstractElementSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementHasElements.ParentElementDomainRoleId, source), new DslModeling::RoleAssignment(ElementHasElements.ChildElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentElement domain role code
		
		/// <summary>
		/// ParentElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentElementDomainRoleId = new global::System.Guid(0x8a909b18, 0xfbd3, 0x48c1, 0xad, 0xf9, 0xa6, 0xfb, 0xea, 0xe2, 0x6a, 0xa6);
		
		/// <summary>
		/// DomainRole ParentElement
		/// The child elemets of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/ParentElement.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/ParentElement.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ElementHasElements/ParentElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a909b18-fbd3-48c1-adf9-a6fbeae26aa6")]
		internal virtual AbstractElementSchema ParentElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElementSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a AbstractElementSchema
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static AbstractElementSchema GetOwner(AbstractElementSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildElementDomainRoleId) as AbstractElementSchema;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetOwner(AbstractElementSchema element, AbstractElementSchema newParentElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildElementDomainRoleId, newParentElement);
		}
		#endregion
		#region ChildElement domain role code
		
		/// <summary>
		/// ChildElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildElementDomainRoleId = new global::System.Guid(0xf9fecc66, 0xb0f5, 0x4f50, 0x9a, 0xb8, 0x30, 0xff, 0xfb, 0x30, 0xf0, 0x0e);
		
		/// <summary>
		/// DomainRole ChildElement
		/// The owning element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/ChildElement.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/ChildElement.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ElementHasElements/ChildElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f9fecc66-b0f5-4f50-9ab8-30fffb30f00e")]
		internal virtual AbstractElementSchema ChildElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElementSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a AbstractElementSchema
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<AbstractElementSchema> GetElements(AbstractElementSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElementSchema>, AbstractElementSchema>(element, ParentElementDomainRoleId);
		}
		#endregion
		#region Cardinality domain property code
		
		/// <summary>
		/// Cardinality domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityDomainPropertyId = new global::System.Guid(0xc67de03d, 0x9482, 0x4c9a, 0xa6, 0xb9, 0xe6, 0x19, 0xf5, 0xae, 0xf3, 0x80);
		
		/// <summary>
		/// Storage for Cardinality
		/// </summary>
		private global::NuPattern.Runtime.Cardinality cardinalityPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::NuPattern.Runtime.Cardinality>("OneToOne");
		
		/// <summary>
		/// Gets or sets the value of Cardinality domain property.
		/// The number of instances of this element/collection, for each parent element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/Cardinality.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasElements/Cardinality.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/Cardinality.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.Cardinality), "OneToOne")]
		[DslModeling::DomainObjectId("c67de03d-9482-4c9a-a6b9-e619f5aef380")]
		public global::NuPattern.Runtime.Cardinality Cardinality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cardinalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CardinalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasElements.Cardinality domain property.
		/// </summary>
		internal sealed partial class CardinalityPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasElements, global::NuPattern.Runtime.Cardinality>
		{
			private CardinalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasElements.Cardinality domain property value handler.
			/// </summary>
			public static readonly CardinalityPropertyHandler Instance = new CardinalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasElements.Cardinality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::NuPattern.Runtime.Cardinality GetValue(ElementHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cardinalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasElements element, global::NuPattern.Runtime.Cardinality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::NuPattern.Runtime.Cardinality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cardinalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CardinalityCaption domain property code
		
		/// <summary>
		/// CardinalityCaption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityCaptionDomainPropertyId = new global::System.Guid(0xb8f5717a, 0x75e0, 0x4afe, 0xbe, 0x12, 0xdd, 0xa9, 0xdc, 0x29, 0x2d, 0xf3);
		
		/// <summary>
		/// Gets or sets the value of CardinalityCaption domain property.
		/// The displayed caption for the cardinality.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/CardinalityCaption.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasElements/CardinalityCaption.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/CardinalityCaption.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("b8f5717a-75e0-4afe-be12-dda9dc292df3")]
		public global::System.String CardinalityCaption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CardinalityCaptionPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasElements.CardinalityCaption domain property.
		/// </summary>
		internal sealed partial class CardinalityCaptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ElementHasElements, global::System.String>
		{
			private CardinalityCaptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasElements.CardinalityCaption domain property value handler.
			/// </summary>
			public static readonly CardinalityCaptionPropertyHandler Instance = new CardinalityCaptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasElements.CardinalityCaption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityCaptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ElementHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CardinalityCaption because its Kind is
				// set to Calculated. Please provide the GetCardinalityCaptionValue()
				// method on the domain class.
				return element.GetCardinalityCaptionValue();
			}
		
		}
		
		#endregion
		#region AutoCreate domain property code
		
		/// <summary>
		/// AutoCreate domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutoCreateDomainPropertyId = new global::System.Guid(0x03cf9a2c, 0xaa6b, 0x4d4f, 0xa6, 0x57, 0xc4, 0xdd, 0x8a, 0x85, 0xe6, 0xf5);
		
		/// <summary>
		/// Storage for AutoCreate
		/// </summary>
		private global::System.Boolean autoCreatePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AutoCreate domain property.
		/// Whether to automatically create the first instance of this collection/element
		/// when the parent element is created.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/AutoCreate.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasElements/AutoCreate.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/AutoCreate.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("03cf9a2c-aa6b-4d4f-a657-c4dd8a85e6f5")]
		public global::System.Boolean AutoCreate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return autoCreatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutoCreatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasElements.AutoCreate domain property.
		/// </summary>
		internal sealed partial class AutoCreatePropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasElements, global::System.Boolean>
		{
			private AutoCreatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasElements.AutoCreate domain property value handler.
			/// </summary>
			public static readonly AutoCreatePropertyHandler Instance = new AutoCreatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasElements.AutoCreate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutoCreateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ElementHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.autoCreatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasElements element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.autoCreatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AllowAddNew domain property code
		
		/// <summary>
		/// AllowAddNew domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowAddNewDomainPropertyId = new global::System.Guid(0xf8af50a7, 0x3fa3, 0x4904, 0x83, 0x65, 0x4b, 0x7b, 0xcb, 0x05, 0xe0, 0xf2);
		
		/// <summary>
		/// Storage for AllowAddNew
		/// </summary>
		private global::System.Boolean allowAddNewPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowAddNew domain property.
		/// Whether to allow UI (i.e. menus) for adding new instances of this
		/// collection/element manually.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/AllowAddNew.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasElements/AllowAddNew.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/AllowAddNew.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("f8af50a7-3fa3-4904-8365-4b7bcb05e0f2")]
		public global::System.Boolean AllowAddNew
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowAddNewPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowAddNewPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasElements.AllowAddNew domain property.
		/// </summary>
		internal sealed partial class AllowAddNewPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasElements, global::System.Boolean>
		{
			private AllowAddNewPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasElements.AllowAddNew domain property value handler.
			/// </summary>
			public static readonly AllowAddNewPropertyHandler Instance = new AllowAddNewPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasElements.AllowAddNew domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowAddNewDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ElementHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.allowAddNewPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasElements element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowAddNewPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OrderGroup domain property code
		
		/// <summary>
		/// OrderGroup domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupDomainPropertyId = new global::System.Guid(0x23dd652d, 0x01cb, 0x4d67, 0x9b, 0xa8, 0x12, 0xc5, 0x43, 0x2e, 0x20, 0x21);
		
		/// <summary>
		/// Storage for OrderGroup
		/// </summary>
		private global::System.Int32 orderGroupPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of OrderGroup domain property.
		/// The group in which instances of the element/collection will be ordered together,
		/// relative to instances of sibling elements/collections. By default, all instances
		/// of all sibling elements/collections are ordered together alphabetically by their
		/// 'InstanceName' property.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/OrderGroup.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasElements/OrderGroup.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/OrderGroup.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("23dd652d-01cb-4d67-9ba8-12c5432e2021")]
		public global::System.Int32 OrderGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasElements.OrderGroup domain property.
		/// </summary>
		internal sealed partial class OrderGroupPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasElements, global::System.Int32>
		{
			private OrderGroupPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasElements.OrderGroup domain property value handler.
			/// </summary>
			public static readonly OrderGroupPropertyHandler Instance = new OrderGroupPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasElements.OrderGroup domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ElementHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasElements element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OrderGroupComparerTypeName domain property code
		
		/// <summary>
		/// OrderGroupComparerTypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupComparerTypeNameDomainPropertyId = new global::System.Guid(0x790467d4, 0x8890, 0x464e, 0xa4, 0x49, 0x5e, 0xca, 0x73, 0x13, 0xa0, 0x82);
		
		/// <summary>
		/// Storage for OrderGroupComparerTypeName
		/// </summary>
		private global::System.String orderGroupComparerTypeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OrderGroupComparerTypeName domain property.
		/// A System.Collections.IComparer class that determines how instances of all
		/// elements/collections in this 'Order Group' are ordered together. If left blank,
		/// then instances of all elements/collections are ordered together alphabetically
		/// by their 'InstanceName' property.
		/// </summary>
		[System.ComponentModel.Editor(typeof(NuPattern.ComponentModel.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FullTypeTypeConverter<System.Collections.IComparer>))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasElements/OrderGroupComparerTypeName.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasElements/OrderGroupComparerTypeName.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasElements/OrderGroupComparerTypeName.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("790467d4-8890-464e-a449-5eca7313a082")]
		public global::System.String OrderGroupComparerTypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupComparerTypeNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupComparerTypeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasElements.OrderGroupComparerTypeName domain property.
		/// </summary>
		internal sealed partial class OrderGroupComparerTypeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasElements, global::System.String>
		{
			private OrderGroupComparerTypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasElements.OrderGroupComparerTypeName domain property value handler.
			/// </summary>
			public static readonly OrderGroupComparerTypeNamePropertyHandler Instance = new OrderGroupComparerTypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasElements.OrderGroupComparerTypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupComparerTypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ElementHasElements element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupComparerTypeNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasElements element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupComparerTypeNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ParentElement link accessor
		/// <summary>
		/// Get the list of ElementHasElements links to a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ElementHasElements> GetLinksToElements ( global::NuPattern.Runtime.Schema.AbstractElementSchema parentElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasElements>(parentElementInstance, global::NuPattern.Runtime.Schema.ElementHasElements.ParentElementDomainRoleId);
		}
		#endregion
		#region ChildElement link accessor
		/// <summary>
		/// Get the ElementHasElements link to a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ElementHasElements GetLinkToOwner (global::NuPattern.Runtime.Schema.AbstractElementSchema childElementInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ElementHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasElements>(childElementInstance, global::NuPattern.Runtime.Schema.ElementHasElements.ChildElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementHasElements instance accessors
		
		/// <summary>
		/// Get any ElementHasElements links between a given AbstractElementSchema and a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ElementHasElements> GetLinks( global::NuPattern.Runtime.Schema.AbstractElementSchema source, global::NuPattern.Runtime.Schema.AbstractElementSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ElementHasElements> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ElementHasElements>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ElementHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasElements>(source, global::NuPattern.Runtime.Schema.ElementHasElements.ParentElementDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ElementHasElements link in links )
			{
				if ( target.Equals(link.ChildElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementHasElements link between a given AbstractElementSchemaand a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ElementHasElements GetLink( global::NuPattern.Runtime.Schema.AbstractElementSchema source, global::NuPattern.Runtime.Schema.AbstractElementSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ElementHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasElements>(source, global::NuPattern.Runtime.Schema.ElementHasElements.ParentElementDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ElementHasElements link in links )
			{
				if ( target.Equals(link.ChildElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship PatternHasProvidedExtensionPoints
	/// Description for NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("932e4f6e-8c17-4cdd-923e-409a627ba93c")]
	internal partial class PatternHasProvidedExtensionPoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PatternHasProvidedExtensionPoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x932e4f6e, 0x8c17, 0x4cdd, 0x92, 0x3e, 0x40, 0x9a, 0x62, 0x7b, 0xa9, 0x3c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PatternHasProvidedExtensionPoints link in the same Partition as the given PatternSchema
		/// </summary>
		/// <param name="source">PatternSchema to use as the source of the relationship.</param>
		/// <param name="target">ProvidedExtensionPointSchema to use as the target of the relationship.</param>
		internal PatternHasProvidedExtensionPoints(PatternSchema source, ProvidedExtensionPointSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PatternHasProvidedExtensionPoints.PatternSchemaDomainRoleId, source), new DslModeling::RoleAssignment(PatternHasProvidedExtensionPoints.ProvidedExtensionPointSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternHasProvidedExtensionPoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternHasProvidedExtensionPoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternHasProvidedExtensionPoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternHasProvidedExtensionPoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PatternSchema domain role code
		
		/// <summary>
		/// PatternSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid PatternSchemaDomainRoleId = new global::System.Guid(0xac61bcdd, 0x4aa4, 0x44a2, 0xb7, 0xa1, 0xd7, 0x1a, 0x7f, 0x46, 0x99, 0x9a);
		
		/// <summary>
		/// DomainRole PatternSchema
		/// The extension points of other patterns that this pattern extends.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints/PatternSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints/PatternSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProvidedExtensionPoints", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints/PatternSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ac61bcdd-4aa4-44a2-b7a1-d71a7f46999a")]
		internal virtual PatternSchema PatternSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PatternSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, PatternSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PatternSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Pattern of a ProvidedExtensionPointSchema
		/// <summary>
		/// Gets Pattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PatternSchema GetPattern(ProvidedExtensionPointSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProvidedExtensionPointSchemaDomainRoleId) as PatternSchema;
		}
		
		/// <summary>
		/// Sets Pattern.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPattern(ProvidedExtensionPointSchema element, PatternSchema newPatternSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProvidedExtensionPointSchemaDomainRoleId, newPatternSchema);
		}
		#endregion
		#region ProvidedExtensionPointSchema domain role code
		
		/// <summary>
		/// ProvidedExtensionPointSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProvidedExtensionPointSchemaDomainRoleId = new global::System.Guid(0x28e7dfd9, 0x4a29, 0x473c, 0xa0, 0xcb, 0x74, 0xbd, 0x9b, 0x3b, 0x3c, 0x6a);
		
		/// <summary>
		/// DomainRole ProvidedExtensionPointSchema
		/// The owning pattern.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints/ProvidedExtensionPointSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints/ProvidedExtensionPointSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Pattern", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints/ProvidedExtensionPointSchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("28e7dfd9-4a29-473c-a0cb-74bd9b3b3c6a")]
		internal virtual ProvidedExtensionPointSchema ProvidedExtensionPointSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProvidedExtensionPointSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProvidedExtensionPointSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProvidedExtensionPointSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProvidedExtensionPoints of a PatternSchema
		/// <summary>
		/// Gets a list of ProvidedExtensionPoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<ProvidedExtensionPointSchema> GetProvidedExtensionPoints(PatternSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProvidedExtensionPointSchema>, ProvidedExtensionPointSchema>(element, PatternSchemaDomainRoleId);
		}
		#endregion
		#region PatternSchema link accessor
		/// <summary>
		/// Get the list of PatternHasProvidedExtensionPoints links to a PatternSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints> GetLinksToProvidedExtensionPoints ( global::NuPattern.Runtime.Schema.PatternSchema patternSchemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints>(patternSchemaInstance, global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.PatternSchemaDomainRoleId);
		}
		#endregion
		#region ProvidedExtensionPointSchema link accessor
		/// <summary>
		/// Get the PatternHasProvidedExtensionPoints link to a ProvidedExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints GetLinkToPattern (global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema providedExtensionPointSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints>(providedExtensionPointSchemaInstance, global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.ProvidedExtensionPointSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProvidedExtensionPointSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PatternHasProvidedExtensionPoints instance accessors
		
		/// <summary>
		/// Get any PatternHasProvidedExtensionPoints links between a given PatternSchema and a ProvidedExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints> GetLinks( global::NuPattern.Runtime.Schema.PatternSchema source, global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints>(source, global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.PatternSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints link in links )
			{
				if ( target.Equals(link.ProvidedExtensionPointSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PatternHasProvidedExtensionPoints link between a given PatternSchemaand a ProvidedExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints GetLink( global::NuPattern.Runtime.Schema.PatternSchema source, global::NuPattern.Runtime.Schema.ProvidedExtensionPointSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints>(source, global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints.PatternSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternHasProvidedExtensionPoints link in links )
			{
				if ( target.Equals(link.ProvidedExtensionPointSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship ElementHasExtensionPoints
	/// Description for NuPattern.Runtime.Schema.ElementHasExtensionPoints
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("936a92cc-4eec-4e05-84b5-4dca5b2845bd")]
	internal partial class ElementHasExtensionPoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementHasExtensionPoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x936a92cc, 0x4eec, 0x4e05, 0x84, 0xb5, 0x4d, 0xca, 0x5b, 0x28, 0x45, 0xbd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementHasExtensionPoints link in the same Partition as the given AbstractElementSchema
		/// </summary>
		/// <param name="source">AbstractElementSchema to use as the source of the relationship.</param>
		/// <param name="target">ExtensionPointSchema to use as the target of the relationship.</param>
		internal ElementHasExtensionPoints(AbstractElementSchema source, ExtensionPointSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementHasExtensionPoints.ParentElementDomainRoleId, source), new DslModeling::RoleAssignment(ElementHasExtensionPoints.ChildElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasExtensionPoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasExtensionPoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasExtensionPoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasExtensionPoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentElement domain role code
		
		/// <summary>
		/// ParentElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentElementDomainRoleId = new global::System.Guid(0x398dc337, 0x36b1, 0x4259, 0xa3, 0xb2, 0x1a, 0x1a, 0x61, 0xdb, 0x92, 0x8a);
		
		/// <summary>
		/// DomainRole ParentElement
		/// The child extension points of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/ParentElement.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/ParentElement.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionPoints", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ElementHasExtensionPoints/ParentElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("398dc337-36b1-4259-a3b2-1a1a61db928a")]
		internal virtual AbstractElementSchema ParentElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElementSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a ExtensionPointSchema
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static AbstractElementSchema GetOwner(ExtensionPointSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildElementDomainRoleId) as AbstractElementSchema;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetOwner(ExtensionPointSchema element, AbstractElementSchema newParentElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildElementDomainRoleId, newParentElement);
		}
		#endregion
		#region ChildElement domain role code
		
		/// <summary>
		/// ChildElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildElementDomainRoleId = new global::System.Guid(0x1e701701, 0xd288, 0x458a, 0xa5, 0x79, 0x10, 0xe1, 0x47, 0x4d, 0x9b, 0x2a);
		
		/// <summary>
		/// DomainRole ChildElement
		/// The owning element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/ChildElement.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/ChildElement.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ElementHasExtensionPoints/ChildElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("1e701701-d288-458a-a579-10e1474d9b2a")]
		internal virtual ExtensionPointSchema ChildElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExtensionPointSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionPoints of a AbstractElementSchema
		/// <summary>
		/// Gets a list of ExtensionPoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<ExtensionPointSchema> GetExtensionPoints(AbstractElementSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExtensionPointSchema>, ExtensionPointSchema>(element, ParentElementDomainRoleId);
		}
		#endregion
		#region Cardinality domain property code
		
		/// <summary>
		/// Cardinality domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityDomainPropertyId = new global::System.Guid(0x5852a2c3, 0xb9c7, 0x4833, 0x9d, 0x7d, 0x13, 0x74, 0xe4, 0x73, 0xbd, 0x2d);
		
		/// <summary>
		/// Storage for Cardinality
		/// </summary>
		private global::NuPattern.Runtime.Cardinality cardinalityPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::NuPattern.Runtime.Cardinality>("OneToOne");
		
		/// <summary>
		/// Gets or sets the value of Cardinality domain property.
		/// The number of instances of this extension, for each parent element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/Cardinality.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/Cardinality.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/Cardinality.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.Cardinality), "OneToOne")]
		[DslModeling::DomainObjectId("5852a2c3-b9c7-4833-9d7d-1374e473bd2d")]
		public global::NuPattern.Runtime.Cardinality Cardinality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cardinalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CardinalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasExtensionPoints.Cardinality domain property.
		/// </summary>
		internal sealed partial class CardinalityPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasExtensionPoints, global::NuPattern.Runtime.Cardinality>
		{
			private CardinalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasExtensionPoints.Cardinality domain property value handler.
			/// </summary>
			public static readonly CardinalityPropertyHandler Instance = new CardinalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasExtensionPoints.Cardinality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::NuPattern.Runtime.Cardinality GetValue(ElementHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cardinalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasExtensionPoints element, global::NuPattern.Runtime.Cardinality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::NuPattern.Runtime.Cardinality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cardinalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CardinalityCaption domain property code
		
		/// <summary>
		/// CardinalityCaption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityCaptionDomainPropertyId = new global::System.Guid(0xad438cd3, 0x81c7, 0x45aa, 0xad, 0x4f, 0x81, 0x99, 0x95, 0x2a, 0x08, 0x31);
		
		/// <summary>
		/// Gets or sets the value of CardinalityCaption domain property.
		/// The displayed caption for the cardinality.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/CardinalityCaption.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/CardinalityCaption.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/CardinalityCaption.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("ad438cd3-81c7-45aa-ad4f-8199952a0831")]
		public global::System.String CardinalityCaption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CardinalityCaptionPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasExtensionPoints.CardinalityCaption domain property.
		/// </summary>
		internal sealed partial class CardinalityCaptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ElementHasExtensionPoints, global::System.String>
		{
			private CardinalityCaptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasExtensionPoints.CardinalityCaption domain property value handler.
			/// </summary>
			public static readonly CardinalityCaptionPropertyHandler Instance = new CardinalityCaptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasExtensionPoints.CardinalityCaption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityCaptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ElementHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CardinalityCaption because its Kind is
				// set to Calculated. Please provide the GetCardinalityCaptionValue()
				// method on the domain class.
				return element.GetCardinalityCaptionValue();
			}
		
		}
		
		#endregion
		#region OrderGroup domain property code
		
		/// <summary>
		/// OrderGroup domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupDomainPropertyId = new global::System.Guid(0xf0c1d459, 0xa2fb, 0x4ad1, 0x87, 0xb2, 0xaf, 0x89, 0xee, 0xec, 0xb9, 0xfc);
		
		/// <summary>
		/// Storage for OrderGroup
		/// </summary>
		private global::System.Int32 orderGroupPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of OrderGroup domain property.
		/// The group in which instances of the element/collection will be ordered together,
		/// relative to instances of sibling elements/collections. By default, all instances
		/// of all sibling elements/collections are ordered together alphabetically by their
		/// 'InstanceName' property.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/OrderGroup.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/OrderGroup.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/OrderGroup.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("f0c1d459-a2fb-4ad1-87b2-af89eeecb9fc")]
		public global::System.Int32 OrderGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasExtensionPoints.OrderGroup domain property.
		/// </summary>
		internal sealed partial class OrderGroupPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasExtensionPoints, global::System.Int32>
		{
			private OrderGroupPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasExtensionPoints.OrderGroup domain property value handler.
			/// </summary>
			public static readonly OrderGroupPropertyHandler Instance = new OrderGroupPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasExtensionPoints.OrderGroup domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ElementHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasExtensionPoints element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OrderGroupComparerTypeName domain property code
		
		/// <summary>
		/// OrderGroupComparerTypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupComparerTypeNameDomainPropertyId = new global::System.Guid(0x3291230f, 0x5c4d, 0x41af, 0xb5, 0x74, 0x0d, 0xdf, 0x27, 0xa1, 0x69, 0xf2);
		
		/// <summary>
		/// Storage for OrderGroupComparerTypeName
		/// </summary>
		private global::System.String orderGroupComparerTypeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OrderGroupComparerTypeName domain property.
		/// A System.Collections.IComparer class that determines how instances of all
		/// elements/collections in this 'Order Group' are ordered together. If left blank,
		/// then instances of all elements/collections are ordered together alphabetically
		/// by their 'InstanceName' property.
		/// </summary>
		[System.ComponentModel.Editor(typeof(NuPattern.ComponentModel.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FullTypeTypeConverter<System.Collections.IComparer>))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/OrderGroupComparerTypeName.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/OrderGroupComparerTypeName.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ElementHasExtensionPoints/OrderGroupComparerTypeName.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("3291230f-5c4d-41af-b574-0ddf27a169f2")]
		public global::System.String OrderGroupComparerTypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupComparerTypeNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupComparerTypeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementHasExtensionPoints.OrderGroupComparerTypeName domain property.
		/// </summary>
		internal sealed partial class OrderGroupComparerTypeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ElementHasExtensionPoints, global::System.String>
		{
			private OrderGroupComparerTypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementHasExtensionPoints.OrderGroupComparerTypeName domain property value handler.
			/// </summary>
			public static readonly OrderGroupComparerTypeNamePropertyHandler Instance = new OrderGroupComparerTypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementHasExtensionPoints.OrderGroupComparerTypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupComparerTypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ElementHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupComparerTypeNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementHasExtensionPoints element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupComparerTypeNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ParentElement link accessor
		/// <summary>
		/// Get the list of ElementHasExtensionPoints links to a AbstractElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints> GetLinksToExtensionPoints ( global::NuPattern.Runtime.Schema.AbstractElementSchema parentElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints>(parentElementInstance, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ParentElementDomainRoleId);
		}
		#endregion
		#region ChildElement link accessor
		/// <summary>
		/// Get the ElementHasExtensionPoints link to a ExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ElementHasExtensionPoints GetLinkToOwner (global::NuPattern.Runtime.Schema.ExtensionPointSchema childElementInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints>(childElementInstance, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ChildElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementHasExtensionPoints instance accessors
		
		/// <summary>
		/// Get any ElementHasExtensionPoints links between a given AbstractElementSchema and a ExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints> GetLinks( global::NuPattern.Runtime.Schema.AbstractElementSchema source, global::NuPattern.Runtime.Schema.ExtensionPointSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints>(source, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ParentElementDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ElementHasExtensionPoints link in links )
			{
				if ( target.Equals(link.ChildElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementHasExtensionPoints link between a given AbstractElementSchemaand a ExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ElementHasExtensionPoints GetLink( global::NuPattern.Runtime.Schema.AbstractElementSchema source, global::NuPattern.Runtime.Schema.ExtensionPointSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ElementHasExtensionPoints>(source, global::NuPattern.Runtime.Schema.ElementHasExtensionPoints.ParentElementDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ElementHasExtensionPoints link in links )
			{
				if ( target.Equals(link.ChildElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship ViewHasExtensionPoints
	/// Description for NuPattern.Runtime.Schema.ViewHasExtensionPoints
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("990a7838-e437-42ab-8bd6-2accfad82fc7")]
	internal partial class ViewHasExtensionPoints : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasExtensionPoints domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x990a7838, 0xe437, 0x42ab, 0x8b, 0xd6, 0x2a, 0xcc, 0xfa, 0xd8, 0x2f, 0xc7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasExtensionPoints link in the same Partition as the given ViewSchema
		/// </summary>
		/// <param name="source">ViewSchema to use as the source of the relationship.</param>
		/// <param name="target">ExtensionPointSchema to use as the target of the relationship.</param>
		internal ViewHasExtensionPoints(ViewSchema source, ExtensionPointSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasExtensionPoints.ViewSchemaDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasExtensionPoints.ExtensionPointSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasExtensionPoints(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasExtensionPoints(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasExtensionPoints(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasExtensionPoints(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ViewSchema domain role code
		
		/// <summary>
		/// ViewSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewSchemaDomainRoleId = new global::System.Guid(0xf48796b2, 0x8c83, 0x41b9, 0xbe, 0xb8, 0x8c, 0x98, 0xb4, 0xd9, 0x95, 0x21);
		
		/// <summary>
		/// DomainRole ViewSchema
		/// The child extension points of the view.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/ViewSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/ViewSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionPoints", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ViewHasExtensionPoints/ViewSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f48796b2-8c83-41b9-beb8-8c98b4d99521")]
		internal virtual ViewSchema ViewSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ViewSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a ExtensionPointSchema
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static ViewSchema GetView(ExtensionPointSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExtensionPointSchemaDomainRoleId) as ViewSchema;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetView(ExtensionPointSchema element, ViewSchema newViewSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExtensionPointSchemaDomainRoleId, newViewSchema);
		}
		#endregion
		#region ExtensionPointSchema domain role code
		
		/// <summary>
		/// ExtensionPointSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionPointSchemaDomainRoleId = new global::System.Guid(0x4322ef66, 0x06a1, 0x48f4, 0xa8, 0x63, 0x4f, 0x61, 0xfc, 0x52, 0xd4, 0xde);
		
		/// <summary>
		/// DomainRole ExtensionPointSchema
		/// The owning view.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/ExtensionPointSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/ExtensionPointSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="NuPattern.Runtime.Schema.ViewHasExtensionPoints/ExtensionPointSchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4322ef66-06a1-48f4-a863-4f61fc52d4de")]
		internal virtual ExtensionPointSchema ExtensionPointSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExtensionPointSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtensionPointSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtensionPointSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionPoints of a ViewSchema
		/// <summary>
		/// Gets a list of ExtensionPoints.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<ExtensionPointSchema> GetExtensionPoints(ViewSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExtensionPointSchema>, ExtensionPointSchema>(element, ViewSchemaDomainRoleId);
		}
		#endregion
		#region Cardinality domain property code
		
		/// <summary>
		/// Cardinality domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityDomainPropertyId = new global::System.Guid(0xd3949f1f, 0x1041, 0x4a92, 0x80, 0xb6, 0xc1, 0x7f, 0x60, 0x51, 0x11, 0x9e);
		
		/// <summary>
		/// Storage for Cardinality
		/// </summary>
		private global::NuPattern.Runtime.Cardinality cardinalityPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::NuPattern.Runtime.Cardinality>("OneToOne");
		
		/// <summary>
		/// Gets or sets the value of Cardinality domain property.
		/// The number of instances of this extension, for this view.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/Cardinality.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/Cardinality.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/Cardinality.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::NuPattern.Runtime.Cardinality), "OneToOne")]
		[DslModeling::DomainObjectId("d3949f1f-1041-4a92-80b6-c17f6051119e")]
		public global::NuPattern.Runtime.Cardinality Cardinality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return cardinalityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CardinalityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasExtensionPoints.Cardinality domain property.
		/// </summary>
		internal sealed partial class CardinalityPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasExtensionPoints, global::NuPattern.Runtime.Cardinality>
		{
			private CardinalityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasExtensionPoints.Cardinality domain property value handler.
			/// </summary>
			public static readonly CardinalityPropertyHandler Instance = new CardinalityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasExtensionPoints.Cardinality domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::NuPattern.Runtime.Cardinality GetValue(ViewHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.cardinalityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasExtensionPoints element, global::NuPattern.Runtime.Cardinality newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::NuPattern.Runtime.Cardinality oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.cardinalityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CardinalityCaption domain property code
		
		/// <summary>
		/// CardinalityCaption domain property Id.
		/// </summary>
		public static readonly global::System.Guid CardinalityCaptionDomainPropertyId = new global::System.Guid(0xfb7c5df4, 0xebb1, 0x4680, 0x8b, 0xf2, 0x58, 0x19, 0x47, 0xa6, 0x15, 0x24);
		
		/// <summary>
		/// Gets or sets the value of CardinalityCaption domain property.
		/// The displayed caption for the cardinality.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/CardinalityCaption.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/CardinalityCaption.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/CardinalityCaption.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("fb7c5df4-ebb1-4680-8bf2-581947a61524")]
		public global::System.String CardinalityCaption
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CardinalityCaptionPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasExtensionPoints.CardinalityCaption domain property.
		/// </summary>
		internal sealed partial class CardinalityCaptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ViewHasExtensionPoints, global::System.String>
		{
			private CardinalityCaptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasExtensionPoints.CardinalityCaption domain property value handler.
			/// </summary>
			public static readonly CardinalityCaptionPropertyHandler Instance = new CardinalityCaptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasExtensionPoints.CardinalityCaption domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CardinalityCaptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CardinalityCaption because its Kind is
				// set to Calculated. Please provide the GetCardinalityCaptionValue()
				// method on the domain class.
				return element.GetCardinalityCaptionValue();
			}
		
		}
		
		#endregion
		#region OrderGroup domain property code
		
		/// <summary>
		/// OrderGroup domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupDomainPropertyId = new global::System.Guid(0x5d525bd9, 0x7baa, 0x4d99, 0x9d, 0x04, 0xdd, 0xfb, 0xd5, 0x8e, 0x70, 0xfe);
		
		/// <summary>
		/// Storage for OrderGroup
		/// </summary>
		private global::System.Int32 orderGroupPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of OrderGroup domain property.
		/// The group in which instances of the element/collection will be ordered together,
		/// relative to instances of sibling elements/collections. By default, all instances
		/// of all sibling elements/collections are ordered together alphabetically by their
		/// 'InstanceName' property.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/OrderGroup.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/OrderGroup.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/OrderGroup.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("5d525bd9-7baa-4d99-9d04-ddfbd58e70fe")]
		public global::System.Int32 OrderGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasExtensionPoints.OrderGroup domain property.
		/// </summary>
		internal sealed partial class OrderGroupPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasExtensionPoints, global::System.Int32>
		{
			private OrderGroupPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasExtensionPoints.OrderGroup domain property value handler.
			/// </summary>
			public static readonly OrderGroupPropertyHandler Instance = new OrderGroupPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasExtensionPoints.OrderGroup domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ViewHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasExtensionPoints element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OrderGroupComparerTypeName domain property code
		
		/// <summary>
		/// OrderGroupComparerTypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderGroupComparerTypeNameDomainPropertyId = new global::System.Guid(0x98134d80, 0xf742, 0x4671, 0x87, 0xdb, 0xe5, 0xc9, 0x38, 0x0c, 0xca, 0x7e);
		
		/// <summary>
		/// Storage for OrderGroupComparerTypeName
		/// </summary>
		private global::System.String orderGroupComparerTypeNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OrderGroupComparerTypeName domain property.
		/// A System.Collections.IComparer class that determines how instances of all
		/// elements/collections in this 'Order Group' are ordered together. If left blank,
		/// then instances of all elements/collections are ordered together alphabetically
		/// by their 'InstanceName' property.
		/// </summary>
		[System.ComponentModel.Editor(typeof(NuPattern.ComponentModel.Design.StandardValuesEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(NuPattern.Runtime.Design.FullTypeTypeConverter<System.Collections.IComparer>))]
		[NuPattern.Runtime.Schema.CustomizableDomainElementSettingAttribute()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/OrderGroupComparerTypeName.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/OrderGroupComparerTypeName.Category", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.ViewHasExtensionPoints/OrderGroupComparerTypeName.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("98134d80-f742-4671-87db-e5c9380cca7e")]
		public global::System.String OrderGroupComparerTypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderGroupComparerTypeNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderGroupComparerTypeNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewHasExtensionPoints.OrderGroupComparerTypeName domain property.
		/// </summary>
		internal sealed partial class OrderGroupComparerTypeNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewHasExtensionPoints, global::System.String>
		{
			private OrderGroupComparerTypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewHasExtensionPoints.OrderGroupComparerTypeName domain property value handler.
			/// </summary>
			public static readonly OrderGroupComparerTypeNamePropertyHandler Instance = new OrderGroupComparerTypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewHasExtensionPoints.OrderGroupComparerTypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderGroupComparerTypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewHasExtensionPoints element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.orderGroupComparerTypeNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewHasExtensionPoints element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderGroupComparerTypeNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ViewSchema link accessor
		/// <summary>
		/// Get the list of ViewHasExtensionPoints links to a ViewSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints> GetLinksToExtensionPoints ( global::NuPattern.Runtime.Schema.ViewSchema viewSchemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints>(viewSchemaInstance, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ViewSchemaDomainRoleId);
		}
		#endregion
		#region ExtensionPointSchema link accessor
		/// <summary>
		/// Get the ViewHasExtensionPoints link to a ExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ViewHasExtensionPoints GetLinkToView (global::NuPattern.Runtime.Schema.ExtensionPointSchema extensionPointSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints>(extensionPointSchemaInstance, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ExtensionPointSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ExtensionPointSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasExtensionPoints instance accessors
		
		/// <summary>
		/// Get any ViewHasExtensionPoints links between a given ViewSchema and a ExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints> GetLinks( global::NuPattern.Runtime.Schema.ViewSchema source, global::NuPattern.Runtime.Schema.ExtensionPointSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints>(source, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ViewSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ViewHasExtensionPoints link in links )
			{
				if ( target.Equals(link.ExtensionPointSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasExtensionPoints link between a given ViewSchemaand a ExtensionPointSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.ViewHasExtensionPoints GetLink( global::NuPattern.Runtime.Schema.ViewSchema source, global::NuPattern.Runtime.Schema.ExtensionPointSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.ViewHasExtensionPoints>(source, global::NuPattern.Runtime.Schema.ViewHasExtensionPoints.ViewSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.ViewHasExtensionPoints link in links )
			{
				if ( target.Equals(link.ExtensionPointSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// DomainRelationship PatternElementHasAutomationSettings
	/// Description for NuPattern.Runtime.Schema.PatternElementHasAutomationSettings
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("66cfcfbd-f570-48a2-a9e7-a317c9779ca0")]
	internal partial class PatternElementHasAutomationSettings : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PatternElementHasAutomationSettings domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x66cfcfbd, 0xf570, 0x48a2, 0xa9, 0xe7, 0xa3, 0x17, 0xc9, 0x77, 0x9c, 0xa0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PatternElementHasAutomationSettings link in the same Partition as the given PatternElementSchema
		/// </summary>
		/// <param name="source">PatternElementSchema to use as the source of the relationship.</param>
		/// <param name="target">AutomationSettingsSchema to use as the target of the relationship.</param>
		internal PatternElementHasAutomationSettings(PatternElementSchema source, AutomationSettingsSchema target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PatternElementHasAutomationSettings.PatternElementSchemaDomainRoleId, source), new DslModeling::RoleAssignment(PatternElementHasAutomationSettings.AutomationSettingsSchemaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternElementHasAutomationSettings(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternElementHasAutomationSettings(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PatternElementHasAutomationSettings(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PatternElementHasAutomationSettings(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region PatternElementSchema domain role code
		
		/// <summary>
		/// PatternElementSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid PatternElementSchemaDomainRoleId = new global::System.Guid(0x5f06d1b0, 0xaba7, 0x4689, 0x8c, 0x74, 0xe9, 0x27, 0x35, 0x68, 0x52, 0x07);
		
		/// <summary>
		/// DomainRole PatternElementSchema
		/// The automation settings of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementHasAutomationSettings/PatternElementSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementHasAutomationSettings/PatternElementSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AutomationSettings", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternElementHasAutomationSettings/PatternElementSchema.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5f06d1b0-aba7-4689-8c74-e92735685207")]
		internal virtual PatternElementSchema PatternElementSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PatternElementSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, PatternElementSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PatternElementSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a AutomationSettingsSchema
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PatternElementSchema GetOwner(AutomationSettingsSchema element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AutomationSettingsSchemaDomainRoleId) as PatternElementSchema;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetOwner(AutomationSettingsSchema element, PatternElementSchema newPatternElementSchema)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AutomationSettingsSchemaDomainRoleId, newPatternElementSchema);
		}
		#endregion
		#region AutomationSettingsSchema domain role code
		
		/// <summary>
		/// AutomationSettingsSchema domain role Id.
		/// </summary>
		public static readonly global::System.Guid AutomationSettingsSchemaDomainRoleId = new global::System.Guid(0x1740ff91, 0xccb8, 0x4f9f, 0xa9, 0x70, 0x88, 0xea, 0x0c, 0xae, 0x78, 0x3c);
		
		/// <summary>
		/// DomainRole AutomationSettingsSchema
		/// The owning element.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Schema.PatternElementHasAutomationSettings/AutomationSettingsSchema.DisplayName", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Schema.PatternElementHasAutomationSettings/AutomationSettingsSchema.Description", typeof(global::NuPattern.Runtime.Schema.PatternModelDomainModel), "NuPattern.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="NuPattern.Runtime.Schema.PatternElementHasAutomationSettings/AutomationSettingsSchema.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1740ff91-ccb8-4f9f-a970-88ea0cae783c")]
		internal virtual AutomationSettingsSchema AutomationSettingsSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AutomationSettingsSchema)DslModeling::DomainRoleInfo.GetRolePlayer(this, AutomationSettingsSchemaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AutomationSettingsSchemaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AutomationSettings of a PatternElementSchema
		/// <summary>
		/// Gets a list of AutomationSettings.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<AutomationSettingsSchema> GetAutomationSettings(PatternElementSchema element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AutomationSettingsSchema>, AutomationSettingsSchema>(element, PatternElementSchemaDomainRoleId);
		}
		#endregion
		#region PatternElementSchema link accessor
		/// <summary>
		/// Get the list of PatternElementHasAutomationSettings links to a PatternElementSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings> GetLinksToAutomationSettings ( global::NuPattern.Runtime.Schema.PatternElementSchema patternElementSchemaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings>(patternElementSchemaInstance, global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.PatternElementSchemaDomainRoleId);
		}
		#endregion
		#region AutomationSettingsSchema link accessor
		/// <summary>
		/// Get the PatternElementHasAutomationSettings link to a AutomationSettingsSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings GetLinkToOwner (global::NuPattern.Runtime.Schema.AutomationSettingsSchema automationSettingsSchemaInstance)
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings>(automationSettingsSchemaInstance, global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.AutomationSettingsSchemaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AutomationSettingsSchema not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PatternElementHasAutomationSettings instance accessors
		
		/// <summary>
		/// Get any PatternElementHasAutomationSettings links between a given PatternElementSchema and a AutomationSettingsSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings> GetLinks( global::NuPattern.Runtime.Schema.PatternElementSchema source, global::NuPattern.Runtime.Schema.AutomationSettingsSchema target )
		{
			global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings> outLinks = new global::System.Collections.Generic.List<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings>();
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings>(source, global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.PatternElementSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings link in links )
			{
				if ( target.Equals(link.AutomationSettingsSchema) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PatternElementHasAutomationSettings link between a given PatternElementSchemaand a AutomationSettingsSchema.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings GetLink( global::NuPattern.Runtime.Schema.PatternElementSchema source, global::NuPattern.Runtime.Schema.AutomationSettingsSchema target )
		{
			global::System.Collections.Generic.IList<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings> links = DslModeling::DomainRoleInfo.GetElementLinks<global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings>(source, global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings.PatternElementSchemaDomainRoleId);
			foreach ( global::NuPattern.Runtime.Schema.PatternElementHasAutomationSettings link in links )
			{
				if ( target.Equals(link.AutomationSettingsSchema) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
