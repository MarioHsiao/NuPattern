
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using Microsoft.VisualStudio.Modeling.Extensibility;
using NuPattern.ComponentModel;
using NuPattern.Modeling;

namespace NuPattern.Runtime.Schema
{/// <summary>
	/// The definition of the pattern in this toolkit..
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class PatternModelSchemaBase
	{
	    private PropertyChangeManager propertyChanges;
	
	    /// <summary>
	    /// Gets the manager for property change event subscriptions for this instance 
	    ///	and any of its derived classes.
	    /// </summary>
	    protected PropertyChangeManager PropertyChanges
	    {
	        get
	        {
	            if (this.propertyChanges == null)
	            {
	                this.propertyChanges = new PropertyChangeManager(this);
	            }
	
	            return this.propertyChanges;
	        }
	    }
	}
	
	/// <summary>
	/// The definition of the pattern in this toolkit..
	/// </summary>
	partial class PatternModelSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPatternModelSchema.SubscribeChanged(Expression<Func<IPatternModelSchema, object>> propertyExpression, Action<IPatternModelSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPatternModelInfo.SubscribeChanged(Expression<Func<IPatternModelInfo, object>> propertyExpression, Action<IPatternModelInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// The definition of the pattern in this toolkit.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class PatternModelSchema : IPatternModelSchema, IPatternModelInfo
	{ 
		/// <summary>
		/// The pattern in this definition.
		/// </summary>
		IPatternSchema IPatternModelSchema.Pattern
		{
		    get { return this.Pattern; }
		    set { this.Pattern = (PatternSchema)value; }
		}
		
		/// <summary>
		/// The pattern in this definition.
		/// </summary>
		IPatternInfo IPatternModelInfo.Pattern
		{
		    get { return this.Pattern; }
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IPatternSchema"/>.
		/// </summary>
		public IPatternSchema CreatePatternSchema()
		{
		    return this.CreatePatternSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IPatternSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IPatternSchema CreatePatternSchema(Action<IPatternSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of PatternSchema", this.IsSerializing))
		    {
		        var instance = this.Create<PatternSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IPatternSchema"/>.
		/// </summary>
		public void DeletePatternSchema(IPatternSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting PatternSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as PatternSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
	
	    /// <summary>
	    /// Gets the extensions.
	    /// </summary>
	    /// <typeparam name="TExtension">The type of the extension.</typeparam>	
	    public IEnumerable<TExtension> GetExtensions<TExtension>()
	    {
	        return this.GetAllExtensions().OfType<TExtension>();
	    }
	
	    /// <summary>
	    /// Gets a value indicating whether this instance is serializing.
	    /// </summary>
	    public bool IsSerializing
	    {
	        get { return this.Store.InSerializationTransaction;	}
	    }
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// The definition of the pattern..
	/// </summary>
	partial class PatternSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPatternSchema.SubscribeChanged(Expression<Func<IPatternSchema, object>> propertyExpression, Action<IPatternSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPatternInfo.SubscribeChanged(Expression<Func<IPatternInfo, object>> propertyExpression, Action<IPatternInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// The definition of the pattern.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class PatternSchema : IPatternSchema, IPatternInfo
	{ 
		/// <summary>
		/// The definition of the pattern.
		/// </summary>
		IPatternModelSchema IPatternSchema.PatternModel
		{
		    get { return this.PatternModel; }
		    set { this.PatternModel = (PatternModelSchema)value; }
		}
		
		/// <summary>
		/// The definition of the pattern.
		/// </summary>
		IPatternModelInfo IPatternInfo.PatternModel
		{
		    get { return this.PatternModel; }
		}
		
		/// <summary>
		/// The views of this pattern.
		/// </summary>
		IEnumerable<IViewSchema> IPatternSchema.Views
		{
		    get { return this.Views.Cast<IViewSchema>(); }
		}
		
		/// <summary>
		/// The views of this pattern.
		///	
		/// </summary>
		IEnumerable<IViewInfo> IPatternInfo.Views
		{
		    get { return this.Views.Cast<IViewInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IViewSchema"/>.
		/// </summary>
		public IViewSchema CreateViewSchema()
		{
		    return this.CreateViewSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IViewSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IViewSchema CreateViewSchema(Action<IViewSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ViewSchema", this.IsSerializing))
		    {
		        var instance = this.Create<ViewSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IViewSchema"/>.
		/// </summary>
		public void DeleteViewSchema(IViewSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ViewSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as ViewSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
		
		/// <summary>
		/// The extension points of other patterns that this pattern extends.
		/// </summary>
		IEnumerable<IProvidedExtensionPointSchema> IPatternSchema.ProvidedExtensionPoints
		{
		    get { return this.ProvidedExtensionPoints.Cast<IProvidedExtensionPointSchema>(); }
		}
		
		/// <summary>
		/// The extension points of other patterns that this pattern extends.
		///	
		/// </summary>
		IEnumerable<IProvidedExtensionPointInfo> IPatternInfo.ProvidedExtensionPoints
		{
		    get { return this.ProvidedExtensionPoints.Cast<IProvidedExtensionPointInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IProvidedExtensionPointSchema"/>.
		/// </summary>
		public IProvidedExtensionPointSchema CreateProvidedExtensionPointSchema()
		{
		    return this.CreateProvidedExtensionPointSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IProvidedExtensionPointSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IProvidedExtensionPointSchema CreateProvidedExtensionPointSchema(Action<IProvidedExtensionPointSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ProvidedExtensionPointSchema", this.IsSerializing))
		    {
		        var instance = this.Create<ProvidedExtensionPointSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IProvidedExtensionPointSchema"/>.
		/// </summary>
		public void DeleteProvidedExtensionPointSchema(IProvidedExtensionPointSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ProvidedExtensionPointSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as ProvidedExtensionPointSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// An element that has a unique name..
	/// </summary>
	partial class NamedElementSchema : INotifyPropertyChanged
	{     private PropertyChangeManager propertyChanges;
	
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable INamedElementSchema.SubscribeChanged(Expression<Func<INamedElementSchema, object>> propertyExpression, Action<INamedElementSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable INamedElementInfo.SubscribeChanged(Expression<Func<INamedElementInfo, object>> propertyExpression, Action<INamedElementInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	    /// <summary>
	    /// Gets the manager for property change event subscriptions for this instance 
	    ///	and any of its derived classes.
	    /// </summary>
	    protected PropertyChangeManager PropertyChanges
	    {
	        get
	        {
	            if (this.propertyChanges == null)
	            {
	                this.propertyChanges = new PropertyChangeManager(this);
	            }
	
	            return this.propertyChanges;
	        }
	    }
	}
	
	/// <summary>
	/// An element that has a unique name.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class NamedElementSchema : INamedElementSchema, INamedElementInfo
	{ 
	    /// <summary>
	    /// Gets the extensions.
	    /// </summary>
	    /// <typeparam name="TExtension">The type of the extension.</typeparam>	
	    public IEnumerable<TExtension> GetExtensions<TExtension>()
	    {
	        return this.GetAllExtensions().OfType<TExtension>();
	    }
	
	    /// <summary>
	    /// Gets a value indicating whether this instance is serializing.
	    /// </summary>
	    public bool IsSerializing
	    {
	        get { return this.Store.InSerializationTransaction;	}
	    }
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// A container of properties and automation..
	/// </summary>
	partial class PatternElementSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPatternElementSchema.SubscribeChanged(Expression<Func<IPatternElementSchema, object>> propertyExpression, Action<IPatternElementSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPatternElementInfo.SubscribeChanged(Expression<Func<IPatternElementInfo, object>> propertyExpression, Action<IPatternElementInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// A container of properties and automation.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class PatternElementSchema : IPatternElementSchema, IPatternElementInfo
	{ 
		/// <summary>
		/// The properties of this element.
		/// </summary>
		IEnumerable<IPropertySchema> IPatternElementSchema.Properties
		{
		    get { return this.Properties.Cast<IPropertySchema>(); }
		}
		
		/// <summary>
		/// The properties of this element.
		///	
		/// </summary>
		IEnumerable<IPropertyInfo> IPatternElementInfo.Properties
		{
		    get { return this.Properties.Cast<IPropertyInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IPropertySchema"/>.
		/// </summary>
		public IPropertySchema CreatePropertySchema()
		{
		    return this.CreatePropertySchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IPropertySchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IPropertySchema CreatePropertySchema(Action<IPropertySchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of PropertySchema", this.IsSerializing))
		    {
		        var instance = this.Create<PropertySchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IPropertySchema"/>.
		/// </summary>
		public void DeletePropertySchema(IPropertySchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting PropertySchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as PropertySchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
		
		/// <summary>
		/// The automation settings of this element.
		/// </summary>
		IEnumerable<IAutomationSettingsSchema> IPatternElementSchema.AutomationSettings
		{
		    get { return this.AutomationSettings.Cast<IAutomationSettingsSchema>(); }
		}
		
		/// <summary>
		/// The automation settings of this element.
		///	
		/// </summary>
		IEnumerable<IAutomationSettingsInfo> IPatternElementInfo.AutomationSettings
		{
		    get { return this.AutomationSettings.Cast<IAutomationSettingsInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="IAutomationSettingsSchema"/>.
		/// </summary>
		public IAutomationSettingsSchema CreateAutomationSettingsSchema()
		{
		    return this.CreateAutomationSettingsSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IAutomationSettingsSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IAutomationSettingsSchema CreateAutomationSettingsSchema(Action<IAutomationSettingsSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of AutomationSettingsSchema", this.IsSerializing))
		    {
		        var instance = this.Create<AutomationSettingsSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IAutomationSettingsSchema"/>.
		/// </summary>
		public void DeleteAutomationSettingsSchema(IAutomationSettingsSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting AutomationSettingsSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as AutomationSettingsSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// A property of an element..
	/// </summary>
	partial class PropertySchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPropertySchema.SubscribeChanged(Expression<Func<IPropertySchema, object>> propertyExpression, Action<IPropertySchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IPropertyInfo.SubscribeChanged(Expression<Func<IPropertyInfo, object>> propertyExpression, Action<IPropertyInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// A property of an element.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class PropertySchema : IPropertySchema, IPropertyInfo
	{ }
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// A distinct view of the pattern..
	/// </summary>
	partial class ViewSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IViewSchema.SubscribeChanged(Expression<Func<IViewSchema, object>> propertyExpression, Action<IViewSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IViewInfo.SubscribeChanged(Expression<Func<IViewInfo, object>> propertyExpression, Action<IViewInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// A distinct view of the pattern.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class ViewSchema : IViewSchema, IViewInfo
	{ 
		/// <summary>
		/// The owning pattern.
		/// </summary>
		IPatternSchema IViewSchema.Pattern
		{
		    get { return this.Pattern; }
		    set { this.Pattern = (PatternSchema)value; }
		}
		
		/// <summary>
		/// The owning pattern.
		/// </summary>
		IPatternInfo IViewInfo.Pattern
		{
		    get { return this.Pattern; }
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ICollectionSchema"/>.
		/// </summary>
		public ICollectionSchema CreateCollectionSchema()
		{
		    return this.CreateCollectionSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ICollectionSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public ICollectionSchema CreateCollectionSchema(Action<ICollectionSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of CollectionSchema", this.IsSerializing))
		    {
		        var instance = this.Create<CollectionSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="ICollectionSchema"/>.
		/// </summary>
		public void DeleteCollectionSchema(ICollectionSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting CollectionSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as CollectionSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IElementSchema"/>.
		/// </summary>
		public IElementSchema CreateElementSchema()
		{
		    return this.CreateElementSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IElementSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IElementSchema CreateElementSchema(Action<IElementSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ElementSchema", this.IsSerializing))
		    {
		        var instance = this.Create<ElementSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IElementSchema"/>.
		/// </summary>
		public void DeleteElementSchema(IElementSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ElementSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as ElementSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IExtensionPointSchema"/>.
		/// </summary>
		public IExtensionPointSchema CreateExtensionPointSchema()
		{
		    return this.CreateExtensionPointSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IExtensionPointSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IExtensionPointSchema CreateExtensionPointSchema(Action<IExtensionPointSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ExtensionPointSchema", this.IsSerializing))
		    {
		        var instance = this.Create<ExtensionPointSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IExtensionPointSchema"/>.
		/// </summary>
		public void DeleteExtensionPointSchema(IExtensionPointSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ExtensionPointSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as ExtensionPointSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// A child collection element..
	/// </summary>
	partial class CollectionSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICollectionSchema.SubscribeChanged(Expression<Func<ICollectionSchema, object>> propertyExpression, Action<ICollectionSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICollectionInfo.SubscribeChanged(Expression<Func<ICollectionInfo, object>> propertyExpression, Action<ICollectionInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// A child collection element.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class CollectionSchema : ICollectionSchema, ICollectionInfo
	{ }
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// A child element..
	/// </summary>
	partial class ElementSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IElementSchema.SubscribeChanged(Expression<Func<IElementSchema, object>> propertyExpression, Action<IElementSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IElementInfo.SubscribeChanged(Expression<Func<IElementInfo, object>> propertyExpression, Action<IElementInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// A child element.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class ElementSchema : IElementSchema, IElementInfo
	{ }
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// An element that supports customization of its properties..
	/// </summary>
	partial class CustomizableElementSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICustomizableElementSchema.SubscribeChanged(Expression<Func<ICustomizableElementSchema, object>> propertyExpression, Action<ICustomizableElementSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICustomizableElementInfo.SubscribeChanged(Expression<Func<ICustomizableElementInfo, object>> propertyExpression, Action<ICustomizableElementInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// An element that supports customization of its properties.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class CustomizableElementSchema : ICustomizableElementSchema, ICustomizableElementInfo
	{ 
		/// <summary>
		/// The customization policy that applies to the element.
		/// </summary>
		ICustomizationPolicySchema ICustomizableElementSchema.Policy
		{
		    get { return this.Policy; }
		    set { this.Policy = (CustomizationPolicySchema)value; }
		}
		
		/// <summary>
		/// The customization policy that applies to the element.
		/// </summary>
		ICustomizationPolicyInfo ICustomizableElementInfo.Policy
		{
		    get { return this.Policy; }
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ICustomizationPolicySchema"/>.
		/// </summary>
		public ICustomizationPolicySchema CreateCustomizationPolicySchema()
		{
		    return this.CreateCustomizationPolicySchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ICustomizationPolicySchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public ICustomizationPolicySchema CreateCustomizationPolicySchema(Action<ICustomizationPolicySchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of CustomizationPolicySchema", this.IsSerializing))
		    {
		        var instance = this.Create<CustomizationPolicySchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="ICustomizationPolicySchema"/>.
		/// </summary>
		public void DeleteCustomizationPolicySchema(ICustomizationPolicySchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting CustomizationPolicySchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as CustomizationPolicySchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// A child element or collection of the pattern..
	/// </summary>
	partial class AbstractElementSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IAbstractElementSchema.SubscribeChanged(Expression<Func<IAbstractElementSchema, object>> propertyExpression, Action<IAbstractElementSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IAbstractElementInfo.SubscribeChanged(Expression<Func<IAbstractElementInfo, object>> propertyExpression, Action<IAbstractElementInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// A child element or collection of the pattern.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class AbstractElementSchema : IAbstractElementSchema, IAbstractElementInfo
	{ 
		/// <summary>
		/// Creates an instance of a child <see cref="ICollectionSchema"/>.
		/// </summary>
		public ICollectionSchema CreateCollectionSchema()
		{
		    return this.CreateCollectionSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ICollectionSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public ICollectionSchema CreateCollectionSchema(Action<ICollectionSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of CollectionSchema", this.IsSerializing))
		    {
		        var instance = this.Create<CollectionSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="ICollectionSchema"/>.
		/// </summary>
		public void DeleteCollectionSchema(ICollectionSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting CollectionSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as CollectionSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IElementSchema"/>.
		/// </summary>
		public IElementSchema CreateElementSchema()
		{
		    return this.CreateElementSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IElementSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IElementSchema CreateElementSchema(Action<IElementSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ElementSchema", this.IsSerializing))
		    {
		        var instance = this.Create<ElementSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IElementSchema"/>.
		/// </summary>
		public void DeleteElementSchema(IElementSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ElementSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as ElementSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IExtensionPointSchema"/>.
		/// </summary>
		public IExtensionPointSchema CreateExtensionPointSchema()
		{
		    return this.CreateExtensionPointSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="IExtensionPointSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public IExtensionPointSchema CreateExtensionPointSchema(Action<IExtensionPointSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of ExtensionPointSchema", this.IsSerializing))
		    {
		        var instance = this.Create<ExtensionPointSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="IExtensionPointSchema"/>.
		/// </summary>
		public void DeleteExtensionPointSchema(IExtensionPointSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting ExtensionPointSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as ExtensionPointSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
	}
}
namespace NuPattern.Runtime.Schema
{/// <summary>
	/// The policy that controls what properties are customizable on an element..
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class CustomizationPolicySchemaBase
	{
	    private PropertyChangeManager propertyChanges;
	
	    /// <summary>
	    /// Gets the manager for property change event subscriptions for this instance 
	    ///	and any of its derived classes.
	    /// </summary>
	    protected PropertyChangeManager PropertyChanges
	    {
	        get
	        {
	            if (this.propertyChanges == null)
	            {
	                this.propertyChanges = new PropertyChangeManager(this);
	            }
	
	            return this.propertyChanges;
	        }
	    }
	}
	
	/// <summary>
	/// The policy that controls what properties are customizable on an element..
	/// </summary>
	partial class CustomizationPolicySchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICustomizationPolicySchema.SubscribeChanged(Expression<Func<ICustomizationPolicySchema, object>> propertyExpression, Action<ICustomizationPolicySchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICustomizationPolicyInfo.SubscribeChanged(Expression<Func<ICustomizationPolicyInfo, object>> propertyExpression, Action<ICustomizationPolicyInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// The policy that controls what properties are customizable on an element.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class CustomizationPolicySchema : ICustomizationPolicySchema, ICustomizationPolicyInfo
	{ 
		/// <summary>
		/// The individual settings of the customization policy
		/// </summary>
		IEnumerable<ICustomizableSettingSchema> ICustomizationPolicySchema.Settings
		{
		    get { return this.Settings.Cast<ICustomizableSettingSchema>(); }
		}
		
		/// <summary>
		/// The individual settings of the customization policy
		///	
		/// </summary>
		IEnumerable<ICustomizableSettingInfo> ICustomizationPolicyInfo.Settings
		{
		    get { return this.Settings.Cast<ICustomizableSettingInfo>(); }
		}
		
		
		/// <summary>
		/// Creates an instance of a child <see cref="ICustomizableSettingSchema"/>.
		/// </summary>
		public ICustomizableSettingSchema CreateCustomizableSettingSchema()
		{
		    return this.CreateCustomizableSettingSchema(null);
		}
		
		/// <summary>
		/// Creates an instance of a child <see cref="ICustomizableSettingSchema"/> with an optional initializer to perform 
		/// object initialization within the creation transaction.
		/// </summary>
		public ICustomizableSettingSchema CreateCustomizableSettingSchema(Action<ICustomizableSettingSchema> initializer)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Creating new instance of CustomizableSettingSchema", this.IsSerializing))
		    {
		        var instance = this.Create<CustomizableSettingSchema>();
		        if (initializer != null)
		        {
		            initializer(instance);
		        }
		
		        tx.Commit();
		        return instance;
		    }
		}
		
		/// <summary>
		/// Deletes an instance of a child <see cref="ICustomizableSettingSchema"/>.
		/// </summary>
		public void DeleteCustomizableSettingSchema(ICustomizableSettingSchema instance)
		{
		    using (var tx = this.Store.TransactionManager.BeginTransaction("Deleting CustomizableSettingSchema instance", this.IsSerializing))
		    {
		        var modelElement = instance as CustomizableSettingSchema;
		        if (modelElement != null)
		        {
		            modelElement.Delete();
		        }
		
		        tx.Commit();
		    }
		}
		
		/// <summary>
		/// The owning element.
		/// </summary>
		ICustomizableElementSchema ICustomizationPolicySchema.Owner
		{
		    get { return this.Owner; }
		    set { this.Owner = (CustomizableElementSchema)value; }
		}
		
		/// <summary>
		/// The owning element.
		/// </summary>
		ICustomizableElementInfo ICustomizationPolicyInfo.Owner
		{
		    get { return this.Owner; }
		}
	
	    /// <summary>
	    /// Gets the extensions.
	    /// </summary>
	    /// <typeparam name="TExtension">The type of the extension.</typeparam>	
	    public IEnumerable<TExtension> GetExtensions<TExtension>()
	    {
	        return this.GetAllExtensions().OfType<TExtension>();
	    }
	
	    /// <summary>
	    /// Gets a value indicating whether this instance is serializing.
	    /// </summary>
	    public bool IsSerializing
	    {
	        get { return this.Store.InSerializationTransaction;	}
	    }
	}
}
namespace NuPattern.Runtime.Schema
{/// <summary>
	/// The settings for a customizable property..
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class CustomizableSettingSchemaBase
	{
	    private PropertyChangeManager propertyChanges;
	
	    /// <summary>
	    /// Gets the manager for property change event subscriptions for this instance 
	    ///	and any of its derived classes.
	    /// </summary>
	    protected PropertyChangeManager PropertyChanges
	    {
	        get
	        {
	            if (this.propertyChanges == null)
	            {
	                this.propertyChanges = new PropertyChangeManager(this);
	            }
	
	            return this.propertyChanges;
	        }
	    }
	}
	
	/// <summary>
	/// The settings for a customizable property..
	/// </summary>
	partial class CustomizableSettingSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICustomizableSettingSchema.SubscribeChanged(Expression<Func<ICustomizableSettingSchema, object>> propertyExpression, Action<ICustomizableSettingSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable ICustomizableSettingInfo.SubscribeChanged(Expression<Func<ICustomizableSettingInfo, object>> propertyExpression, Action<ICustomizableSettingInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// The settings for a customizable property.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class CustomizableSettingSchema : ICustomizableSettingSchema, ICustomizableSettingInfo
	{ 
		/// <summary>
		/// The owning policy.
		/// </summary>
		ICustomizationPolicySchema ICustomizableSettingSchema.Policy
		{
		    get { return this.Policy; }
		    set { this.Policy = (CustomizationPolicySchema)value; }
		}
		
		/// <summary>
		/// The owning policy.
		/// </summary>
		ICustomizationPolicyInfo ICustomizableSettingInfo.Policy
		{
		    get { return this.Policy; }
		}
	
	    /// <summary>
	    /// Gets the extensions.
	    /// </summary>
	    /// <typeparam name="TExtension">The type of the extension.</typeparam>	
	    public IEnumerable<TExtension> GetExtensions<TExtension>()
	    {
	        return this.GetAllExtensions().OfType<TExtension>();
	    }
	
	    /// <summary>
	    /// Gets a value indicating whether this instance is serializing.
	    /// </summary>
	    public bool IsSerializing
	    {
	        get { return this.Store.InSerializationTransaction;	}
	    }
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// The settings for an automation extension..
	/// </summary>
	partial class AutomationSettingsSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IAutomationSettingsSchema.SubscribeChanged(Expression<Func<IAutomationSettingsSchema, object>> propertyExpression, Action<IAutomationSettingsSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IAutomationSettingsInfo.SubscribeChanged(Expression<Func<IAutomationSettingsInfo, object>> propertyExpression, Action<IAutomationSettingsInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// The settings for an automation extension.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class AutomationSettingsSchema : IAutomationSettingsSchema, IAutomationSettingsInfo
	{ }
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// The extension points that this pattern provides..
	/// </summary>
	partial class ProvidedExtensionPointSchema : INotifyPropertyChanged
	{     private PropertyChangeManager propertyChanges;
	
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IProvidedExtensionPointSchema.SubscribeChanged(Expression<Func<IProvidedExtensionPointSchema, object>> propertyExpression, Action<IProvidedExtensionPointSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IProvidedExtensionPointInfo.SubscribeChanged(Expression<Func<IProvidedExtensionPointInfo, object>> propertyExpression, Action<IProvidedExtensionPointInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	    /// <summary>
	    /// Gets the manager for property change event subscriptions for this instance 
	    ///	and any of its derived classes.
	    /// </summary>
	    protected PropertyChangeManager PropertyChanges
	    {
	        get
	        {
	            if (this.propertyChanges == null)
	            {
	                this.propertyChanges = new PropertyChangeManager(this);
	            }
	
	            return this.propertyChanges;
	        }
	    }
	}
	
	/// <summary>
	/// The extension points that this pattern provides.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class ProvidedExtensionPointSchema : IProvidedExtensionPointSchema, IProvidedExtensionPointInfo
	{ 
		/// <summary>
		/// The owning pattern.
		/// </summary>
		IPatternSchema IProvidedExtensionPointSchema.Pattern
		{
		    get { return this.Pattern; }
		    set { this.Pattern = (PatternSchema)value; }
		}
		
		/// <summary>
		/// The owning pattern.
		/// </summary>
		IPatternInfo IProvidedExtensionPointInfo.Pattern
		{
		    get { return this.Pattern; }
		}
	
	    /// <summary>
	    /// Gets the extensions.
	    /// </summary>
	    /// <typeparam name="TExtension">The type of the extension.</typeparam>	
	    public IEnumerable<TExtension> GetExtensions<TExtension>()
	    {
	        return this.GetAllExtensions().OfType<TExtension>();
	    }
	
	    /// <summary>
	    /// Gets a value indicating whether this instance is serializing.
	    /// </summary>
	    public bool IsSerializing
	    {
	        get { return this.Store.InSerializationTransaction;	}
	    }
	}
}
namespace NuPattern.Runtime.Schema
{
	/// <summary>
	/// A child extension to the pattern, provided by a pattern of another toolkit..
	/// </summary>
	partial class ExtensionPointSchema : INotifyPropertyChanged
	{ 
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IExtensionPointSchema.SubscribeChanged(Expression<Func<IExtensionPointSchema, object>> propertyExpression, Action<IExtensionPointSchema> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Subscribes to changes in the property referenced in the given 
	    /// <paramref name="propertyExpression"/> with the given 
	    /// <paramref name="callbackAction"/> delegate.
	    /// </summary>
	    /// <param name="propertyExpression">A lambda expression that accesses a property, such as <c>x => x.Name</c>.</param>
	    /// <param name="callbackAction">The callback action to invoke when the given property changes.</param>
	    IDisposable IExtensionPointInfo.SubscribeChanged(Expression<Func<IExtensionPointInfo, object>> propertyExpression, Action<IExtensionPointInfo> callbackAction)
	    {
	        return this.PropertyChanges.SubscribeChanged(propertyExpression, callbackAction);
	    }
	
	    /// <summary>
	    /// Exposes the property changed event.
	    /// </summary>
	    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
	    {
	        add { this.PropertyChanges.AddHandler(value); }
	        remove { this.PropertyChanges.RemoveHandler(value); }
	    }
	
	}
	
	/// <summary>
	/// A child extension to the pattern, provided by a pattern of another toolkit.
	/// </summary>
	[GeneratedCode("NuPattern.Runtime.Schema", "1.3.0.0")]
	partial class ExtensionPointSchema : IExtensionPointSchema, IExtensionPointInfo
	{ 
		/// <summary>
		/// The owning element.
		/// </summary>
		IAbstractElementSchema IExtensionPointSchema.Owner
		{
		    get { return this.Owner; }
		    set { this.Owner = (AbstractElementSchema)value; }
		}
		
		/// <summary>
		/// The owning element.
		/// </summary>
		IAbstractElementInfo IExtensionPointInfo.Owner
		{
		    get { return this.Owner; }
		}
	}
}
