//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace Microsoft.VisualStudio.Patterning.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass PatternShape
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6d4c3263-f5e1-49e0-b1be-d7188c1157eb")]
	public abstract partial class PatternShapeBase : CustomizableElementShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with PatternShape.
		/// </summary>
		public static DslDiagrams::Decorator FindPatternShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(2, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.DarkGray);
			outlinePen.Width = 0.01F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 9/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold9"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Italic ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextItalic7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("PatternShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold9");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("StereotypeDecorator");
			field2.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("PatternShapeStereotypeDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextItalic7");			
			shapeFields.Add(field2);
			
			DslDiagrams::ChevronButtonField field3 = new DslDiagrams::ChevronButtonField("ExpandCollapseDecorator");
			field3.DefaultSelectable = false;
			field3.DefaultFocusable = false;
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("InheritedFromBaseDecorator");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("PatternShapeInheritedFromBaseDecoratorDefaultImage"));
			shapeFields.Add(field4);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "StereotypeDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0.2));
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapseDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field3, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "InheritedFromBaseDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, -0.025));
			decorators.Add(decorator4);
				
		}
		
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[3+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("PatternShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("PatternShapeLaunchPointsTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("LaunchPoints", title, 
						global::System.Drawing.Color.FromArgb(255, 234, 234, 234), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+1] = descriptor;
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("PatternShapeAutomationTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Automation", title, 
						global::System.Drawing.Color.FromArgb(255, 234, 234, 234), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+2] = descriptor;
				}
			}
			
			return PatternShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternSchema));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[3+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema.DomainClassId, 
																				GetElementsFromPatternSchemaForProperties,
																				null,
																				null,
																				null);
					mappings[localCompartmentMappingsOffset+1] = new DslDiagrams::ElementListCompartmentMapping(
																				"Automation", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema.DomainClassId, 
																				GetElementsFromPatternSchemaForAutomation,
																				null,
																				null,
																				null);
					mappings[localCompartmentMappingsOffset+2] = new DslDiagrams::ElementListCompartmentMapping(
																				"LaunchPoints", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema.DomainClassId, 
																				GetElementsFromPatternSchemaForLaunchPoints,
																				null,
																				null,
																				null);
					compartmentMappings.Add(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternSchema), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromPatternSchemaForProperties(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromPatternSchemaForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromPatternSchemaForProperties(result);
			}
			internal static global::System.Collections.IList GetElementsFromPatternSchemaForAutomation(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema> result = root.AutomationSettings;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromPatternSchemaForAutomation(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromPatternSchemaForAutomation(result);
			}
			internal static global::System.Collections.IList GetElementsFromPatternSchemaForLaunchPoints(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema> result = root.AutomationSettings;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromPatternSchemaForLaunchPoints(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromPatternSchemaForLaunchPoints(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// PatternShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6d4c3263, 0xf5e1, 0x49e0, 0xb1, 0xbe, 0xd7, 0x18, 0x8c, 0x11, 0x57, 0xeb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PatternShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TailoringFillColor domain property code
		
		/// <summary>
		/// TailoringFillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringFillColorDomainPropertyId = new global::System.Guid(0xc4273198, 0x78d4, 0x4def, 0x80, 0x27, 0x41, 0xa3, 0x0b, 0x87, 0xfc, 0x8c);
		
		/// <summary>
		/// Storage for TailoringFillColor
		/// </summary>
		private global::System.Drawing.Color tailoringFillColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("White");
		
		/// <summary>
		/// Gets or sets the value of TailoringFillColor domain property.
		/// The color of the shape fill, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape/TailoringFillColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape/TailoringFillColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "White")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("c4273198-78d4-4def-8027-41a30b87fc8c")]
		internal global::System.Drawing.Color TailoringFillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringFillColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringFillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternShape.TailoringFillColor domain property.
		/// </summary>
		internal sealed partial class TailoringFillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternShapeBase, global::System.Drawing.Color>
		{
			private TailoringFillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternShape.TailoringFillColor domain property value handler.
			/// </summary>
			public static readonly TailoringFillColorPropertyHandler Instance = new TailoringFillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternShape.TailoringFillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringFillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringFillColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringFillColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringTextColor domain property code
		
		/// <summary>
		/// TailoringTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringTextColorDomainPropertyId = new global::System.Guid(0x9bc3bbc5, 0x06c2, 0x4609, 0xad, 0xd2, 0xf8, 0x4d, 0xbf, 0xce, 0x9e, 0x9e);
		
		/// <summary>
		/// Storage for TailoringTextColor
		/// </summary>
		private global::System.Drawing.Color tailoringTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DimGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringTextColor domain property.
		/// The color of the shape text, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape/TailoringTextColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape/TailoringTextColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DimGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("9bc3bbc5-06c2-4609-add2-f84dbfce9e9e")]
		internal global::System.Drawing.Color TailoringTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternShape.TailoringTextColor domain property.
		/// </summary>
		internal sealed partial class TailoringTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternShapeBase, global::System.Drawing.Color>
		{
			private TailoringTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternShape.TailoringTextColor domain property value handler.
			/// </summary>
			public static readonly TailoringTextColorPropertyHandler Instance = new TailoringTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternShape.TailoringTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringOutlineColor domain property code
		
		/// <summary>
		/// TailoringOutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringOutlineColorDomainPropertyId = new global::System.Guid(0x8cdfb709, 0x3a79, 0x4a53, 0xa1, 0xf8, 0xdb, 0x4b, 0xc6, 0xe7, 0x8e, 0xcb);
		
		/// <summary>
		/// Storage for TailoringOutlineColor
		/// </summary>
		private global::System.Drawing.Color tailoringOutlineColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DarkGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringOutlineColor domain property.
		/// The color of the shape outline, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape/TailoringOutlineColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape/TailoringOutlineColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DarkGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("8cdfb709-3a79-4a53-a1f8-db4bc6e78ecb")]
		internal global::System.Drawing.Color TailoringOutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringOutlineColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringOutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PatternShape.TailoringOutlineColor domain property.
		/// </summary>
		internal sealed partial class TailoringOutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PatternShapeBase, global::System.Drawing.Color>
		{
			private TailoringOutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PatternShape.TailoringOutlineColor domain property value handler.
			/// </summary>
			public static readonly TailoringOutlineColorPropertyHandler Instance = new TailoringOutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PatternShape.TailoringOutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringOutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PatternShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringOutlineColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PatternShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringOutlineColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass PatternShape
	/// Description for Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class PatternShape : PatternShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PatternShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass ElementShape
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c5328ad8-6b7c-4688-97aa-dd2e25d8b1fc")]
	public abstract partial class ElementShapeBase : CustomizableElementShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ElementShape.
		/// </summary>
		public static DslDiagrams::Decorator FindElementShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.6, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			outlinePen.Width = 0.03F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 165, 198, 165);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ElementShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("StereotypeDecorator");
			field2.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ElementShapeStereotypeDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7");			
			shapeFields.Add(field2);
			
			DslDiagrams::ImageField field3 = new DslDiagrams::ImageField("InheritedFromBaseDecorator");
			field3.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ElementShapeInheritedFromBaseDecoratorDefaultImage"));
			shapeFields.Add(field3);
			
			DslDiagrams::ChevronButtonField field4 = new DslDiagrams::ChevronButtonField("ExpandCollapseDecorator");
			field4.DefaultSelectable = false;
			field4.DefaultFocusable = false;
			shapeFields.Add(field4);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0.05));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "StereotypeDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0.2));
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "InheritedFromBaseDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0));
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapseDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field4, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, DslDiagrams::PointD.Empty);
			decorators.Add(decorator4);
				
		}
		
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[3+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ElementShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ElementShapeLaunchPointsTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("LaunchPoints", title, 
						global::System.Drawing.Color.FromArgb(255, 234, 234, 234), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+1] = descriptor;
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ElementShapeAutomationTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Automation", title, 
						global::System.Drawing.Color.FromArgb(255, 234, 234, 234), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+2] = descriptor;
				}
			}
			
			return ElementShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementSchema));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[3+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema.DomainClassId, 
																				GetElementsFromElementSchemaForProperties,
																				null,
																				null,
																				null);
					mappings[localCompartmentMappingsOffset+1] = new DslDiagrams::ElementListCompartmentMapping(
																				"Automation", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema.DomainClassId, 
																				GetElementsFromElementSchemaForAutomation,
																				null,
																				null,
																				null);
					mappings[localCompartmentMappingsOffset+2] = new DslDiagrams::ElementListCompartmentMapping(
																				"LaunchPoints", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema.DomainClassId, 
																				GetElementsFromElementSchemaForLaunchPoints,
																				null,
																				null,
																				null);
					compartmentMappings.Add(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementSchema), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromElementSchemaForProperties(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromElementSchemaForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromElementSchemaForProperties(result);
			}
			internal static global::System.Collections.IList GetElementsFromElementSchemaForAutomation(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema> result = root.AutomationSettings;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromElementSchemaForAutomation(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromElementSchemaForAutomation(result);
			}
			internal static global::System.Collections.IList GetElementsFromElementSchemaForLaunchPoints(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema> result = root.AutomationSettings;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromElementSchemaForLaunchPoints(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromElementSchemaForLaunchPoints(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ElementShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc5328ad8, 0x6b7c, 0x4688, 0x97, 0xaa, 0xdd, 0x2e, 0x25, 0xd8, 0xb1, 0xfc);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ElementShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TailoringFillColor domain property code
		
		/// <summary>
		/// TailoringFillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringFillColorDomainPropertyId = new global::System.Guid(0x2d92e1cc, 0xb8c0, 0x4ade, 0xa8, 0xec, 0x23, 0x87, 0x6c, 0x40, 0xa6, 0xf3);
		
		/// <summary>
		/// Storage for TailoringFillColor
		/// </summary>
		private global::System.Drawing.Color tailoringFillColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("211, 221, 210");
		
		/// <summary>
		/// Gets or sets the value of TailoringFillColor domain property.
		/// The color of the shape fill, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape/TailoringFillColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape/TailoringFillColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "211, 221, 210")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("2d92e1cc-b8c0-4ade-a8ec-23876c40a6f3")]
		internal global::System.Drawing.Color TailoringFillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringFillColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringFillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementShape.TailoringFillColor domain property.
		/// </summary>
		internal sealed partial class TailoringFillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementShapeBase, global::System.Drawing.Color>
		{
			private TailoringFillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementShape.TailoringFillColor domain property value handler.
			/// </summary>
			public static readonly TailoringFillColorPropertyHandler Instance = new TailoringFillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementShape.TailoringFillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringFillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ElementShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringFillColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringFillColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringTextColor domain property code
		
		/// <summary>
		/// TailoringTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringTextColorDomainPropertyId = new global::System.Guid(0xde1702e6, 0x2253, 0x4e30, 0xb2, 0xb1, 0xe9, 0xd1, 0x64, 0x23, 0x2a, 0x8b);
		
		/// <summary>
		/// Storage for TailoringTextColor
		/// </summary>
		private global::System.Drawing.Color tailoringTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DimGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringTextColor domain property.
		/// The color of the shape text, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape/TailoringTextColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape/TailoringTextColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DimGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("de1702e6-2253-4e30-b2b1-e9d164232a8b")]
		internal global::System.Drawing.Color TailoringTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementShape.TailoringTextColor domain property.
		/// </summary>
		internal sealed partial class TailoringTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementShapeBase, global::System.Drawing.Color>
		{
			private TailoringTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementShape.TailoringTextColor domain property value handler.
			/// </summary>
			public static readonly TailoringTextColorPropertyHandler Instance = new TailoringTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementShape.TailoringTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ElementShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringOutlineColor domain property code
		
		/// <summary>
		/// TailoringOutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringOutlineColorDomainPropertyId = new global::System.Guid(0x85c5f12a, 0x156c, 0x4274, 0x83, 0x55, 0x0d, 0x30, 0xbf, 0xaa, 0x71, 0xe8);
		
		/// <summary>
		/// Storage for TailoringOutlineColor
		/// </summary>
		private global::System.Drawing.Color tailoringOutlineColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("226, 226, 226");
		
		/// <summary>
		/// Gets or sets the value of TailoringOutlineColor domain property.
		/// The color of the shape outline, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape/TailoringOutlineColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape/TailoringOutlineColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "226, 226, 226")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("85c5f12a-156c-4274-8355-0d30bfaa71e8")]
		internal global::System.Drawing.Color TailoringOutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringOutlineColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringOutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ElementShape.TailoringOutlineColor domain property.
		/// </summary>
		internal sealed partial class TailoringOutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ElementShapeBase, global::System.Drawing.Color>
		{
			private TailoringOutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ElementShape.TailoringOutlineColor domain property value handler.
			/// </summary>
			public static readonly TailoringOutlineColorPropertyHandler Instance = new TailoringOutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ElementShape.TailoringOutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringOutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ElementShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringOutlineColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ElementShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringOutlineColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass ElementShape
	/// Description for Microsoft.VisualStudio.Patterning.Runtime.Schema.ElementShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ElementShape : ElementShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ElementShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass ViewShape
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("bc4bc41e-9104-45be-b98b-ee0caf55331f")]
	public abstract partial class ViewShapeBase : DslDiagrams::Port
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ViewShape.
		/// </summary>
		public static DslDiagrams::Decorator FindViewShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(2, 0.25);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.DarkGray);
			outlinePen.Width = 0.01F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.WhiteSmoke);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold |  global::System.Drawing.FontStyle.Italic ;
			fontSettings.Size = 10/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold, Italic10"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.ForwardDiagonal;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ViewShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold, Italic10");			
			shapeFields.Add(field1);
			
			DslDiagrams::ImageField field2 = new DslDiagrams::ImageField("InheritedFromBaseDecorator");
			field2.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ViewShapeInheritedFromBaseDecoratorDefaultImage"));
			shapeFields.Add(field2);
			
			DslDiagrams::ImageField field3 = new DslDiagrams::ImageField("CustomizationTrueEnabledDecorator");
			field3.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ViewShapeCustomizationTrueEnabledDecoratorDefaultImage"));
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("CustomizationTrueDisabledDecorator");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ViewShapeCustomizationTrueDisabledDecoratorDefaultImage"));
			shapeFields.Add(field4);
			
			DslDiagrams::ImageField field5 = new DslDiagrams::ImageField("CustomizationFalseEnabledDecorator");
			field5.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ViewShapeCustomizationFalseEnabledDecoratorDefaultImage"));
			shapeFields.Add(field5);
			
			DslDiagrams::ImageField field6 = new DslDiagrams::ImageField("CustomizationFalseDisabledDecorator");
			field6.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ViewShapeCustomizationFalseDisabledDecoratorDefaultImage"));
			shapeFields.Add(field6);
			
			DslDiagrams::ImageField field7 = new DslDiagrams::ImageField("CustomizationInheritedEnabledDecorator");
			field7.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ViewShapeCustomizationInheritedEnabledDecoratorDefaultImage"));
			shapeFields.Add(field7);
			
			DslDiagrams::ImageField field8 = new DslDiagrams::ImageField("CustomizationInheritedDisabledDecorator");
			field8.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ViewShapeCustomizationInheritedDisabledDecoratorDefaultImage"));
			shapeFields.Add(field8);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.Center, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "InheritedFromBaseDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, -0.025));
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationTrueEnabledDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.1925, -0.025));
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationTrueDisabledDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.1925, -0.025));
			decorators.Add(decorator4);
				
			DslDiagrams::ShapeField field5 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationFalseEnabledDecorator");
			DslDiagrams::Decorator decorator5 = new DslDiagrams::ShapeDecorator(field5, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.1925, -0.025));
			decorators.Add(decorator5);
				
			DslDiagrams::ShapeField field6 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationFalseDisabledDecorator");
			DslDiagrams::Decorator decorator6 = new DslDiagrams::ShapeDecorator(field6, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.1925, -0.025));
			decorators.Add(decorator6);
				
			DslDiagrams::ShapeField field7 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationInheritedEnabledDecorator");
			DslDiagrams::Decorator decorator7 = new DslDiagrams::ShapeDecorator(field7, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.1925, -0.025));
			decorators.Add(decorator7);
				
			DslDiagrams::ShapeField field8 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationInheritedDisabledDecorator");
			DslDiagrams::Decorator decorator8 = new DslDiagrams::ShapeDecorator(field8, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.1925, -0.025));
			decorators.Add(decorator8);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ViewShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbc4bc41e, 0x9104, 0x45be, 0xb9, 0x8b, 0xee, 0x0c, 0xaf, 0x55, 0x33, 0x1f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ViewShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TailoringFillColor domain property code
		
		/// <summary>
		/// TailoringFillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringFillColorDomainPropertyId = new global::System.Guid(0xee96117e, 0x2f48, 0x4493, 0x9c, 0x53, 0xb7, 0xbc, 0x52, 0xfb, 0x7d, 0xbe);
		
		/// <summary>
		/// Storage for TailoringFillColor
		/// </summary>
		private global::System.Drawing.Color tailoringFillColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("WhiteSmoke");
		
		/// <summary>
		/// Gets or sets the value of TailoringFillColor domain property.
		/// The color of the shape fill, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/TailoringFillColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/TailoringFillColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "WhiteSmoke")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("ee96117e-2f48-4493-9c53-b7bc52fb7dbe")]
		internal global::System.Drawing.Color TailoringFillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringFillColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringFillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewShape.TailoringFillColor domain property.
		/// </summary>
		internal sealed partial class TailoringFillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewShapeBase, global::System.Drawing.Color>
		{
			private TailoringFillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewShape.TailoringFillColor domain property value handler.
			/// </summary>
			public static readonly TailoringFillColorPropertyHandler Instance = new TailoringFillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewShape.TailoringFillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringFillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ViewShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringFillColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringFillColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringTextColor domain property code
		
		/// <summary>
		/// TailoringTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringTextColorDomainPropertyId = new global::System.Guid(0xe7349707, 0xc712, 0x4bef, 0xa8, 0x1a, 0x0e, 0x92, 0x6e, 0xcb, 0x92, 0x5f);
		
		/// <summary>
		/// Storage for TailoringTextColor
		/// </summary>
		private global::System.Drawing.Color tailoringTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DarkGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringTextColor domain property.
		/// The color of the shape text, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/TailoringTextColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/TailoringTextColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DarkGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e7349707-c712-4bef-a81a-0e926ecb925f")]
		internal global::System.Drawing.Color TailoringTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewShape.TailoringTextColor domain property.
		/// </summary>
		internal sealed partial class TailoringTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewShapeBase, global::System.Drawing.Color>
		{
			private TailoringTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewShape.TailoringTextColor domain property value handler.
			/// </summary>
			public static readonly TailoringTextColorPropertyHandler Instance = new TailoringTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewShape.TailoringTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ViewShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringOutlineColor domain property code
		
		/// <summary>
		/// TailoringOutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringOutlineColorDomainPropertyId = new global::System.Guid(0xfa2d5c11, 0x1a80, 0x438d, 0xb7, 0x57, 0x9b, 0xb1, 0x42, 0x00, 0xd0, 0x98);
		
		/// <summary>
		/// Storage for TailoringOutlineColor
		/// </summary>
		private global::System.Drawing.Color tailoringOutlineColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DarkGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringOutlineColor domain property.
		/// The color of the shape outline, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/TailoringOutlineColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/TailoringOutlineColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DarkGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("fa2d5c11-1a80-438d-b757-9bb14200d098")]
		internal global::System.Drawing.Color TailoringOutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringOutlineColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringOutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewShape.TailoringOutlineColor domain property.
		/// </summary>
		internal sealed partial class TailoringOutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewShapeBase, global::System.Drawing.Color>
		{
			private TailoringOutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewShape.TailoringOutlineColor domain property value handler.
			/// </summary>
			public static readonly TailoringOutlineColorPropertyHandler Instance = new TailoringOutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewShape.TailoringOutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringOutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ViewShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringOutlineColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringOutlineColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsLayoutInitialized domain property code
		
		/// <summary>
		/// IsLayoutInitialized domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsLayoutInitializedDomainPropertyId = new global::System.Guid(0xd8291028, 0xa419, 0x457b, 0xaa, 0x23, 0x6b, 0x32, 0x44, 0xed, 0x9f, 0x5f);
		
		/// <summary>
		/// Storage for IsLayoutInitialized
		/// </summary>
		private global::System.Boolean isLayoutInitializedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsLayoutInitialized domain property.
		/// Whether the layout of the view initialized the very first time.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/IsLayoutInitialized.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape/IsLayoutInitialized.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d8291028-a419-457b-aa23-6b3244ed9f5f")]
		internal global::System.Boolean IsLayoutInitialized
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isLayoutInitializedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsLayoutInitializedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewShape.IsLayoutInitialized domain property.
		/// </summary>
		internal sealed partial class IsLayoutInitializedPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewShapeBase, global::System.Boolean>
		{
			private IsLayoutInitializedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewShape.IsLayoutInitialized domain property value handler.
			/// </summary>
			public static readonly IsLayoutInitializedPropertyHandler Instance = new IsLayoutInitializedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewShape.IsLayoutInitialized domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsLayoutInitializedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isLayoutInitializedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewShapeBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isLayoutInitializedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass ViewShape
	/// Description for Microsoft.VisualStudio.Patterning.Runtime.Schema.ViewShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ViewShape : ViewShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ViewShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ViewShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass CollectionShape
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("33005d46-3de2-402a-bca3-9b7e89fa8486")]
	public abstract partial class CollectionShapeBase : CustomizableElementShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CollectionShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCollectionShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.6, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			outlinePen.Width = 0.03F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 255, 216, 98);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::ChevronButtonField field1 = new DslDiagrams::ChevronButtonField("ExpandCollapseDecorator");
			field1.DefaultSelectable = false;
			field1.DefaultFocusable = false;
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("NameDecorator");
			field2.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("CollectionShapeNameDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field2);
			
			DslDiagrams::TextField field3 = new DslDiagrams::TextField("StereotypeDecorator");
			field3.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("CollectionShapeStereotypeDecoratorDefaultText");
			field3.DefaultFocusable = true;
			field3.DefaultAutoSize = true;
			field3.AnchoringBehavior.MinimumHeightInLines = 1;
			field3.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field3.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field3.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7");			
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("InheritedFromBaseDecorator");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("CollectionShapeInheritedFromBaseDecoratorDefaultImage"));
			shapeFields.Add(field4);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapseDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field1, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, new DslDiagrams::PointD(0, 0.15));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0.175));
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "StereotypeDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0.02));
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "InheritedFromBaseDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, -0.025));
			decorators.Add(decorator4);
				
		}
		
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[3+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("CollectionShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromArgb(255, 234, 234, 234), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("CollectionShapeLaunchPointsTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("LaunchPoints", title, 
						global::System.Drawing.Color.FromArgb(255, 234, 234, 234), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+1] = descriptor;
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("CollectionShapeAutomationTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Automation", title, 
						global::System.Drawing.Color.FromArgb(255, 234, 234, 234), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+2] = descriptor;
				}
			}
			
			return CollectionShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionSchema));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[3+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"LaunchPoints", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema.DomainClassId, 
																				GetElementsFromCollectionSchemaForLaunchPoints,
																				null,
																				null,
																				null);
					mappings[localCompartmentMappingsOffset+1] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema.DomainClassId, 
																				GetElementsFromCollectionSchemaForProperties,
																				null,
																				null,
																				null);
					mappings[localCompartmentMappingsOffset+2] = new DslDiagrams::ElementListCompartmentMapping(
																				"Automation", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema.DomainClassId, 
																				GetElementsFromCollectionSchemaForAutomation,
																				null,
																				null,
																				null);
					compartmentMappings.Add(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionSchema), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromCollectionSchemaForLaunchPoints(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema> result = root.AutomationSettings;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromCollectionSchemaForLaunchPoints(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromCollectionSchemaForLaunchPoints(result);
			}
			internal static global::System.Collections.IList GetElementsFromCollectionSchemaForProperties(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromCollectionSchemaForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromCollectionSchemaForProperties(result);
			}
			internal static global::System.Collections.IList GetElementsFromCollectionSchemaForAutomation(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.AutomationSettingsSchema> result = root.AutomationSettings;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromCollectionSchemaForAutomation(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromCollectionSchemaForAutomation(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// CollectionShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x33005d46, 0x3de2, 0x402a, 0xbc, 0xa3, 0x9b, 0x7e, 0x89, 0xfa, 0x84, 0x86);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CollectionShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
			if (!this.Store.TransactionManager.CurrentTransaction.IsSerializing)
				this.IsExpanded = false;
		}
		#endregion
		#region TailoringFillColor domain property code
		
		/// <summary>
		/// TailoringFillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringFillColorDomainPropertyId = new global::System.Guid(0xcbe9c413, 0x2d93, 0x4670, 0xae, 0x4b, 0x39, 0xe0, 0x73, 0x21, 0x9e, 0xba);
		
		/// <summary>
		/// Storage for TailoringFillColor
		/// </summary>
		private global::System.Drawing.Color tailoringFillColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("255, 233, 164");
		
		/// <summary>
		/// Gets or sets the value of TailoringFillColor domain property.
		/// The color of the shape fill, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape/TailoringFillColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape/TailoringFillColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "255, 233, 164")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("cbe9c413-2d93-4670-ae4b-39e073219eba")]
		internal global::System.Drawing.Color TailoringFillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringFillColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringFillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CollectionShape.TailoringFillColor domain property.
		/// </summary>
		internal sealed partial class TailoringFillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<CollectionShapeBase, global::System.Drawing.Color>
		{
			private TailoringFillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CollectionShape.TailoringFillColor domain property value handler.
			/// </summary>
			public static readonly TailoringFillColorPropertyHandler Instance = new TailoringFillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CollectionShape.TailoringFillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringFillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(CollectionShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringFillColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CollectionShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringFillColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringTextColor domain property code
		
		/// <summary>
		/// TailoringTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringTextColorDomainPropertyId = new global::System.Guid(0x20c46e3f, 0xc7bf, 0x496b, 0xa6, 0xf5, 0xd2, 0x18, 0x05, 0x32, 0x43, 0x26);
		
		/// <summary>
		/// Storage for TailoringTextColor
		/// </summary>
		private global::System.Drawing.Color tailoringTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DimGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringTextColor domain property.
		/// The color of the shape text, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape/TailoringTextColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape/TailoringTextColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DimGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("20c46e3f-c7bf-496b-a6f5-d21805324326")]
		internal global::System.Drawing.Color TailoringTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CollectionShape.TailoringTextColor domain property.
		/// </summary>
		internal sealed partial class TailoringTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<CollectionShapeBase, global::System.Drawing.Color>
		{
			private TailoringTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CollectionShape.TailoringTextColor domain property value handler.
			/// </summary>
			public static readonly TailoringTextColorPropertyHandler Instance = new TailoringTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CollectionShape.TailoringTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(CollectionShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CollectionShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringOutlineColor domain property code
		
		/// <summary>
		/// TailoringOutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringOutlineColorDomainPropertyId = new global::System.Guid(0xb16dad84, 0x64a6, 0x4685, 0x99, 0xbc, 0xaa, 0x63, 0xa5, 0x8b, 0x42, 0xf0);
		
		/// <summary>
		/// Storage for TailoringOutlineColor
		/// </summary>
		private global::System.Drawing.Color tailoringOutlineColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("234, 234, 234");
		
		/// <summary>
		/// Gets or sets the value of TailoringOutlineColor domain property.
		/// The color of the shape outline, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape/TailoringOutlineColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape/TailoringOutlineColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "234, 234, 234")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b16dad84-64a6-4685-99bc-aa63a58b42f0")]
		internal global::System.Drawing.Color TailoringOutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringOutlineColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringOutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CollectionShape.TailoringOutlineColor domain property.
		/// </summary>
		internal sealed partial class TailoringOutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<CollectionShapeBase, global::System.Drawing.Color>
		{
			private TailoringOutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CollectionShape.TailoringOutlineColor domain property value handler.
			/// </summary>
			public static readonly TailoringOutlineColorPropertyHandler Instance = new TailoringOutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CollectionShape.TailoringOutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringOutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(CollectionShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringOutlineColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CollectionShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringOutlineColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass CollectionShape
	/// Description for Microsoft.VisualStudio.Patterning.Runtime.Schema.CollectionShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class CollectionShape : CollectionShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CollectionShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CollectionShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Schema
{
	/// <summary>
	/// DomainClass CustomizableElementShape
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Schema.CustomizableElementShape
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CustomizableElementShape.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.CustomizableElementShape.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c7199c01-4aad-496c-b124-f7016fba3749")]
	public abstract partial class CustomizableElementShape : DslDiagrams::CompartmentShape
	{
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 1.1);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::ImageField field1 = new DslDiagrams::ImageField("CustomizationTrueEnabledDecorator");
			field1.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("CustomizableElementShapeCustomizationTrueEnabledDecoratorDefaultImage"));
			shapeFields.Add(field1);
			
			DslDiagrams::ImageField field2 = new DslDiagrams::ImageField("CustomizationTrueDisabledDecorator");
			field2.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("CustomizableElementShapeCustomizationTrueDisabledDecoratorDefaultImage"));
			shapeFields.Add(field2);
			
			DslDiagrams::ImageField field3 = new DslDiagrams::ImageField("CustomizationFalseEnabledDecorator");
			field3.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("CustomizableElementShapeCustomizationFalseEnabledDecoratorDefaultImage"));
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("CustomizationFalseDisabledDecorator");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("CustomizableElementShapeCustomizationFalseDisabledDecoratorDefaultImage"));
			shapeFields.Add(field4);
			
			DslDiagrams::ImageField field5 = new DslDiagrams::ImageField("CustomizationInheritedEnabledDecorator");
			field5.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("CustomizableElementShapeCustomizationInheritedEnabledDecoratorDefaultImage"));
			shapeFields.Add(field5);
			
			DslDiagrams::ImageField field6 = new DslDiagrams::ImageField("CustomizationInheritedDisabledDecorator");
			field6.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("CustomizableElementShapeCustomizationInheritedDisabledDecoratorDefaultImage"));
			shapeFields.Add(field6);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationTrueEnabledDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0.1475));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationTrueDisabledDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0.1475));
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationFalseEnabledDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0.1475));
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationFalseDisabledDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0.1475));
			decorators.Add(decorator4);
				
			DslDiagrams::ShapeField field5 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationInheritedEnabledDecorator");
			DslDiagrams::Decorator decorator5 = new DslDiagrams::ShapeDecorator(field5, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0.1475));
			decorators.Add(decorator5);
				
			DslDiagrams::ShapeField field6 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "CustomizationInheritedDisabledDecorator");
			DslDiagrams::Decorator decorator6 = new DslDiagrams::ShapeDecorator(field6, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0.1475));
			decorators.Add(decorator6);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[0+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
			}
			
			return CustomizableElementShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomizableElementShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc7199c01, 0x4aad, 0x496c, 0xb1, 0x24, 0xf7, 0x01, 0x6f, 0xba, 0x37, 0x49);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CustomizableElementShape(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Schema
{
	/// <summary>
	/// Double-derived base class for DomainClass ExtensionPointShape
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("268f9015-d395-4b5c-bc4f-2f671b82e04d")]
	public abstract partial class ExtensionPointShapeBase : CustomizableElementShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ExtensionPointShape.
		/// </summary>
		public static DslDiagrams::Decorator FindExtensionPointShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.6, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			outlinePen.Width = 0.03F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 153, 204, 205);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ExtensionPointShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field1);
			
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("StereotypeDecorator");
			field2.DefaultText = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ExtensionPointShapeStereotypeDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field2.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7");			
			shapeFields.Add(field2);
			
			DslDiagrams::ImageField field3 = new DslDiagrams::ImageField("InheritedFromBaseDecorator");
			field3.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetObject("ExtensionPointShapeInheritedFromBaseDecoratorDefaultImage"));
			shapeFields.Add(field3);
			
			DslDiagrams::ChevronButtonField field4 = new DslDiagrams::ChevronButtonField("ExpandCollapseDecorator");
			field4.DefaultSelectable = false;
			field4.DefaultFocusable = false;
			shapeFields.Add(field4);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NameDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0.05));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "StereotypeDecorator");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.225, 0.2));
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "InheritedFromBaseDecorator");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.0225, 0));
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapseDecorator");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field4, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, DslDiagrams::PointD.Empty);
			decorators.Add(decorator4);
				
		}
		
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[1+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel.SingletonResourceManager.GetString("ExtensionPointShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
			}
			
			return ExtensionPointShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointSchema));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[1+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.NamedElementSchema.NameDomainPropertyId, 
																				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema.DomainClassId, 
																				GetElementsFromExtensionPointSchemaForProperties,
																				null,
																				null,
																				null);
					compartmentMappings.Add(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointSchema), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromExtensionPointSchemaForProperties(DslModeling::ModelElement rootElement)
			{
				global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema root = (global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternElementSchema)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PropertySchema> result = root.Properties;
				
				////////
				// CompartmentMap.UsesCustomFilter==true
				// Please provide a method with the following signature to filter the list of
				// elements to display in the compartment:
				// global::System.Collections.IList FilterElementsFromExtensionPointSchemaForProperties(global::System.Collections.IEnumerable elements) {}
				////////
				return FilterElementsFromExtensionPointSchemaForProperties(result);
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExtensionPointShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x268f9015, 0xd395, 0x4b5c, 0xbc, 0x4f, 0x2f, 0x67, 0x1b, 0x82, 0xe0, 0x4d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ExtensionPointShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TailoringFillColor domain property code
		
		/// <summary>
		/// TailoringFillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringFillColorDomainPropertyId = new global::System.Guid(0x17d080a8, 0x2ae9, 0x429f, 0x92, 0xd1, 0x31, 0x82, 0x96, 0x72, 0x9b, 0xb1);
		
		/// <summary>
		/// Storage for TailoringFillColor
		/// </summary>
		private global::System.Drawing.Color tailoringFillColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("168, 186, 186");
		
		/// <summary>
		/// Gets or sets the value of TailoringFillColor domain property.
		/// The color of the shape fill, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape/TailoringFillColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape/TailoringFillColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "168, 186, 186")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("17d080a8-2ae9-429f-92d1-318296729bb1")]
		internal global::System.Drawing.Color TailoringFillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringFillColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringFillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExtensionPointShape.TailoringFillColor domain property.
		/// </summary>
		internal sealed partial class TailoringFillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ExtensionPointShapeBase, global::System.Drawing.Color>
		{
			private TailoringFillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExtensionPointShape.TailoringFillColor domain property value handler.
			/// </summary>
			public static readonly TailoringFillColorPropertyHandler Instance = new TailoringFillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExtensionPointShape.TailoringFillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringFillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ExtensionPointShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringFillColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExtensionPointShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringFillColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringTextColor domain property code
		
		/// <summary>
		/// TailoringTextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringTextColorDomainPropertyId = new global::System.Guid(0xb2e98661, 0x8bf0, 0x4ef7, 0xb4, 0x0f, 0x9f, 0x77, 0x8e, 0x98, 0xd8, 0x54);
		
		/// <summary>
		/// Storage for TailoringTextColor
		/// </summary>
		private global::System.Drawing.Color tailoringTextColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("DimGray");
		
		/// <summary>
		/// Gets or sets the value of TailoringTextColor domain property.
		/// The color of the shape text, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape/TailoringTextColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape/TailoringTextColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "DimGray")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b2e98661-8bf0-4ef7-b40f-9f778e98d854")]
		internal global::System.Drawing.Color TailoringTextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringTextColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringTextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExtensionPointShape.TailoringTextColor domain property.
		/// </summary>
		internal sealed partial class TailoringTextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ExtensionPointShapeBase, global::System.Drawing.Color>
		{
			private TailoringTextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExtensionPointShape.TailoringTextColor domain property value handler.
			/// </summary>
			public static readonly TailoringTextColorPropertyHandler Instance = new TailoringTextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExtensionPointShape.TailoringTextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringTextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ExtensionPointShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringTextColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExtensionPointShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringTextColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TailoringOutlineColor domain property code
		
		/// <summary>
		/// TailoringOutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TailoringOutlineColorDomainPropertyId = new global::System.Guid(0x2e36dbc2, 0x8ae7, 0x4abd, 0xb5, 0xe2, 0x9b, 0x77, 0x24, 0x3b, 0x62, 0xd2);
		
		/// <summary>
		/// Storage for TailoringOutlineColor
		/// </summary>
		private global::System.Drawing.Color tailoringOutlineColorPropertyStorage = DslModeling::SerializationUtilities.GetValue<global::System.Drawing.Color>("226, 226, 226");
		
		/// <summary>
		/// Gets or sets the value of TailoringOutlineColor domain property.
		/// The color of the shape outline, in tailoring mode.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape/TailoringOutlineColor.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape/TailoringOutlineColor.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Schema.PatternModelDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Schema.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.DefaultValue(typeof(global::System.Drawing.Color), "226, 226, 226")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("2e36dbc2-8ae7-4abd-b5e2-9b77243b62d2")]
		internal global::System.Drawing.Color TailoringOutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tailoringOutlineColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TailoringOutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExtensionPointShape.TailoringOutlineColor domain property.
		/// </summary>
		internal sealed partial class TailoringOutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ExtensionPointShapeBase, global::System.Drawing.Color>
		{
			private TailoringOutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExtensionPointShape.TailoringOutlineColor domain property value handler.
			/// </summary>
			public static readonly TailoringOutlineColorPropertyHandler Instance = new TailoringOutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExtensionPointShape.TailoringOutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TailoringOutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ExtensionPointShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tailoringOutlineColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExtensionPointShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tailoringOutlineColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass ExtensionPointShape
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Schema.ExtensionPointShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ExtensionPointShape : ExtensionPointShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExtensionPointShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExtensionPointShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}

