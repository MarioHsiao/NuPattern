//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass ProductState
	/// The state of all products in the solution.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.ProductState.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.ProductState.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("567410f3-5e44-4211-8623-bd9ee337dd82")]
	internal partial class ProductState : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProductState domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x567410f3, 0x5e44, 0x4211, 0x86, 0x23, 0xbd, 0x9e, 0xe3, 0x37, 0xdd, 0x82);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ProductState(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ProductState(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Products opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Products.
		/// The products in this solution.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Product> Products
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Product>, Product>(global::NuPattern.Runtime.Store.ProductStateHasProducts.ProductStateDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Store.Product.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Store.Product sourceProduct1 = sourceElement as global::NuPattern.Runtime.Store.Product;
			if (sourceProduct1 != null)
			{
				// Create link for path ProductStateHasProducts.Products
				this.Products.Add(sourceProduct1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Store.Product sourceProduct1 = sourceElement as global::NuPattern.Runtime.Store.Product;
			if (sourceProduct1 != null)
			{
				// Delete link for path ProductStateHasProducts.Products
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Store.ProductStateHasProducts.GetLinks((global::NuPattern.Runtime.Store.ProductState)this, sourceProduct1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Store.ProductStateHasProducts.ProductStateDomainRoleId, global::NuPattern.Runtime.Store.ProductStateHasProducts.ProductDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass Property
	/// A property of an element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Property.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Property.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("9d160ca6-f94d-4cb7-956d-e2f537a0e33d")]
	internal partial class Property : InstanceBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Property domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9d160ca6, 0xf94d, 0x4cb7, 0x95, 0x6d, 0xe2, 0xf5, 0x37, 0xa0, 0xe3, 0x3d);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Property(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Property(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region RawValue domain property code
		
		/// <summary>
		/// RawValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid RawValueDomainPropertyId = new global::System.Guid(0xe0bdc7da, 0x54bd, 0x4b50, 0xa3, 0xdf, 0x4b, 0x26, 0xe5, 0x69, 0xb8, 0x8d);
		
		/// <summary>
		/// Storage for RawValue
		/// </summary>
		private global::System.String rawValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RawValue domain property.
		/// The current serialized value of the property. Use Value to get the typed value.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Property/RawValue.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Property/RawValue.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e0bdc7da-54bd-4b50-a3df-4b26e569b88d")]
		public global::System.String RawValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return rawValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RawValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Property.RawValue domain property.
		/// </summary>
		internal sealed partial class RawValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Property, global::System.String>
		{
			private RawValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Property.RawValue domain property value handler.
			/// </summary>
			public static readonly RawValuePropertyHandler Instance = new RawValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Property.RawValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RawValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Property element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.rawValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Property element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Property element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.rawValuePropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Property>(x => x.RawValue);
			}
		}
		
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual ProductElement Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ProductElementHasProperties.PropertyDomainRoleId) as ProductElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ProductElementHasProperties.PropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass Collection
	/// A container for elements in a view.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Collection.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Collection.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("4d1f8038-151c-461d-97cc-3eaf779f50eb")]
	internal partial class Collection : AbstractElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Collection domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4d1f8038, 0x151c, 0x461d, 0x97, 0xcc, 0x3e, 0xaf, 0x77, 0x9f, 0x50, 0xeb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Collection(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Collection(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass Element
	/// An element of a view.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Element.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Element.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("375050fd-908d-47b2-9494-7626fee46113")]
	internal partial class Element : AbstractElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Element domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x375050fd, 0x908d, 0x47b2, 0x94, 0x94, 0x76, 0x26, 0xfe, 0xe4, 0x61, 0x13);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Element(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Element(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass ProductElement
	/// An element within the product.
	/// </summary>
	[System.ComponentModel.TypeDescriptionProvider(typeof(ProductElementTypeDescriptionProvider))]
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.ProductElement.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.ProductElement.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("ce0a63a4-80a0-4a07-b9d1-d97fd206a8f1")]
	internal abstract partial class ProductElement : InstanceBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProductElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xce0a63a4, 0x80a0, 0x4a07, 0xb9, 0xd1, 0xd9, 0x7f, 0xd2, 0x06, 0xa8, 0xf1);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//protected ProductElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region InstanceName domain property code
		
		/// <summary>
		/// InstanceName domain property Id.
		/// </summary>
		public static readonly global::System.Guid InstanceNameDomainPropertyId = new global::System.Guid(0x5ed95450, 0x9b27, 0x4485, 0x92, 0xc7, 0x86, 0x2e, 0x2c, 0x07, 0x21, 0xd1);
		
		/// <summary>
		/// Storage for InstanceName
		/// </summary>
		private global::System.String instanceNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InstanceName domain property.
		/// The name of this element instance.
		/// </summary>
		[System.ComponentModel.ParenthesizePropertyNameAttribute(true)]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.ProductElement/InstanceName.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Store.ProductElement/InstanceName.Category", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.ProductElement/InstanceName.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("5ed95450-9b27-4485-92c7-862e2c0721d1")]
		public global::System.String InstanceName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return instanceNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InstanceNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProductElement.InstanceName domain property.
		/// </summary>
		internal sealed partial class InstanceNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProductElement, global::System.String>
		{
			private InstanceNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProductElement.InstanceName domain property value handler.
			/// </summary>
			public static readonly InstanceNamePropertyHandler Instance = new InstanceNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProductElement.InstanceName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InstanceNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProductElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.instanceNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProductElement element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(ProductElement element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.instanceNamePropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<ProductElement>(x => x.InstanceName);
			}
		}
		
		#endregion
		#region InstanceOrder domain property code
		
		/// <summary>
		/// InstanceOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid InstanceOrderDomainPropertyId = new global::System.Guid(0x01523a35, 0x435b, 0x40a4, 0xa2, 0x4e, 0x76, 0x56, 0xb7, 0x1c, 0x1a, 0xd6);
		
		/// <summary>
		/// Storage for InstanceOrder
		/// </summary>
		private global::System.Double instanceOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of InstanceOrder domain property.
		/// The order of this element relative to its siblings.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.ProductElement/InstanceOrder.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Store.ProductElement/InstanceOrder.Category", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.ProductElement/InstanceOrder.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("01523a35-435b-40a4-a24e-7656b71c1ad6")]
		public global::System.Double InstanceOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return instanceOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InstanceOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProductElement.InstanceOrder domain property.
		/// </summary>
		internal sealed partial class InstanceOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<ProductElement, global::System.Double>
		{
			private InstanceOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProductElement.InstanceOrder domain property value handler.
			/// </summary>
			public static readonly InstanceOrderPropertyHandler Instance = new InstanceOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProductElement.InstanceOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InstanceOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(ProductElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.instanceOrderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProductElement element, global::System.Double newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(ProductElement element, global::System.Double oldValue, global::System.Double newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.instanceOrderPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<ProductElement>(x => x.InstanceOrder);
			}
		}
		
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// The properties of this element.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Property> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(global::NuPattern.Runtime.Store.ProductElementHasProperties.ProductElementDomainRoleId);
			}
		}
		#endregion
		#region References opposite domain role accessor
		
		/// <summary>
		/// Gets a list of References.
		/// The references of this element.
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.Drawing.Design.UITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("ProductElement_ReferencesDisplayName", typeof(Properties.Resources))]
		[DslDesign::DescriptionResource("ProductElement_ReferencesDescription", typeof(Properties.Resources))]
		[System.ComponentModel.TypeConverter(typeof(ProductElementTypeDescriptor.ReferencesTypeConverter))]
		public virtual DslModeling::LinkedElementCollection<Reference> References
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Reference>, Reference>(global::NuPattern.Runtime.Store.ProductElementHasReferences.ProductElementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Store.Reference.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Store.Reference sourceReference1 = sourceElement as global::NuPattern.Runtime.Store.Reference;
			if (sourceReference1 != null)
			{
				// Create link for path ProductElementHasReferences.References
				this.References.Add(sourceReference1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Store.Reference sourceReference1 = sourceElement as global::NuPattern.Runtime.Store.Reference;
			if (sourceReference1 != null)
			{
				// Delete link for path ProductElementHasReferences.References
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Store.ProductElementHasReferences.GetLinks((global::NuPattern.Runtime.Store.ProductElement)this, sourceReference1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Store.ProductElementHasReferences.ProductElementDomainRoleId, global::NuPattern.Runtime.Store.ProductElementHasReferences.ReferenceDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass Product
	/// A product instance in the solution.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Product.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Product.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("f7b1afaf-b90d-411b-9792-1b402d72dfaf")]
	internal partial class Product : ProductElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Product domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf7b1afaf, 0xb90d, 0x411b, 0x97, 0x92, 0x1b, 0x40, 0x2d, 0x72, 0xdf, 0xaf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Product(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Product(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ExtensionId domain property code
		
		/// <summary>
		/// ExtensionId domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionIdDomainPropertyId = new global::System.Guid(0x8f8d39a6, 0x537c, 0x4b79, 0xb9, 0xfe, 0x49, 0x63, 0x6a, 0x5a, 0x88, 0xbb);
		
		/// <summary>
		/// Storage for ExtensionId
		/// </summary>
		private global::System.String extensionIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ExtensionId domain property.
		/// The identifier of the Visual Studio extension deploying the product.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Product/ExtensionId.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Store.Product/ExtensionId.Category", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Product/ExtensionId.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("8f8d39a6-537c-4b79-b9fe-49636a5a88bb")]
		public global::System.String ExtensionId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return extensionIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExtensionIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Product.ExtensionId domain property.
		/// </summary>
		internal sealed partial class ExtensionIdPropertyHandler : DslModeling::DomainPropertyValueHandler<Product, global::System.String>
		{
			private ExtensionIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Product.ExtensionId domain property value handler.
			/// </summary>
			public static readonly ExtensionIdPropertyHandler Instance = new ExtensionIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Product.ExtensionId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExtensionIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Product element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.extensionIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Product element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Product element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.extensionIdPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Product>(x => x.ExtensionId);
			}
		}
		
		#endregion
		#region ExtensionName domain property code
		
		/// <summary>
		/// ExtensionName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionNameDomainPropertyId = new global::System.Guid(0xf69e7d29, 0x03b1, 0x41c8, 0xab, 0x04, 0xf6, 0x13, 0x75, 0x67, 0xf9, 0x52);
		
		/// <summary>
		/// Storage for ExtensionName
		/// </summary>
		private global::System.String extensionNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ExtensionName domain property.
		/// The name of the Visual Studio extension that deploys this product.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Product/ExtensionName.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Product/ExtensionName.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("f69e7d29-03b1-41c8-ab04-f6137567f952")]
		public global::System.String ExtensionName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return extensionNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				ExtensionNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Product.ExtensionName domain property.
		/// </summary>
		internal sealed partial class ExtensionNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Product, global::System.String>
		{
			private ExtensionNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Product.ExtensionName domain property value handler.
			/// </summary>
			public static readonly ExtensionNamePropertyHandler Instance = new ExtensionNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Product.ExtensionName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExtensionNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Product element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.extensionNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Product element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Product element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.extensionNamePropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Product>(x => x.ExtensionName);
			}
		}
		
		#endregion
		#region Author domain property code
		
		/// <summary>
		/// Author domain property Id.
		/// </summary>
		public static readonly global::System.Guid AuthorDomainPropertyId = new global::System.Guid(0x7871da94, 0x2979, 0x4616, 0x9a, 0x84, 0xa0, 0xbc, 0x6a, 0x7e, 0x5b, 0x65);
		
		/// <summary>
		/// Storage for Author
		/// </summary>
		private global::System.String authorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Author domain property.
		/// The author of this product.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Product/Author.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Product/Author.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("7871da94-2979-4616-9a84-a0bc6a7e5b65")]
		public global::System.String Author
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return authorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				AuthorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Product.Author domain property.
		/// </summary>
		internal sealed partial class AuthorPropertyHandler : DslModeling::DomainPropertyValueHandler<Product, global::System.String>
		{
			private AuthorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Product.Author domain property value handler.
			/// </summary>
			public static readonly AuthorPropertyHandler Instance = new AuthorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Product.Author domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AuthorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Product element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.authorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Product element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Product element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.authorPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Product>(x => x.Author);
			}
		}
		
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0xb55b9568, 0xce0e, 0x47cb, 0x81, 0x10, 0x54, 0x3e, 0x5a, 0xd9, 0xc6, 0x92);
		
		/// <summary>
		/// Storage for Version
		/// </summary>
		private global::System.String versionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// The version of this product.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Product/Version.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Product/Version.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b55b9568-ce0e-47cb-8110-543e5ad9c692")]
		public global::System.String Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return versionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				VersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Product.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::DomainPropertyValueHandler<Product, global::System.String>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Product.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Product.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Product element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.versionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Product element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Product element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.versionPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Product>(x => x.Version);
			}
		}
		
		#endregion
		#region Views opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Views.
		/// The views of this product.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<View> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(global::NuPattern.Runtime.Store.ProductHasViews.ProductDomainRoleId);
			}
		}
		#endregion
		#region ProductState opposite domain role accessor
		/// <summary>
		/// Gets or sets ProductState.
		/// The owning state model.
		/// </summary>
		internal virtual ProductState ProductState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ProductStateHasProducts.ProductDomainRoleId) as ProductState;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ProductStateHasProducts.ProductDomainRoleId, value);
			}
		}
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual AbstractElement Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ElementHasExtensions.ExtensionDomainRoleId) as AbstractElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ElementHasExtensions.ExtensionDomainRoleId, value);
			}
		}
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// The owning view.
		/// </summary>
		internal virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ViewHasExtensionProducts.ExtensionDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ViewHasExtensionProducts.ExtensionDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass View
	/// A view of a product instance.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.View.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.View.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("f02be9bc-9733-4d6c-a35c-8460b2d6e310")]
	internal partial class View : InstanceBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// View domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf02be9bc, 0x9733, 0x4d6c, 0xa3, 0x5c, 0x84, 0x60, 0xb2, 0xd6, 0xe3, 0x10);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Product opposite domain role accessor
		/// <summary>
		/// Gets or sets Product.
		/// The owning product.
		/// </summary>
		internal virtual Product Product
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ProductHasViews.ViewDomainRoleId) as Product;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ProductHasViews.ViewDomainRoleId, value);
			}
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// The child elements of this view.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractElement> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElement>, AbstractElement>(global::NuPattern.Runtime.Store.ViewHasElements.ViewDomainRoleId);
			}
		}
		#endregion
		#region ExtensionProducts opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExtensionProducts.
		/// The child extension products of this view.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Product> ExtensionProducts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Product>, Product>(global::NuPattern.Runtime.Store.ViewHasExtensionProducts.ViewDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Store.Product.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Store.Product sourceProduct1 = sourceElement as global::NuPattern.Runtime.Store.Product;
			if (sourceProduct1 != null)
			{
				// Create link for path ViewHasExtensionProducts.ExtensionProducts
				this.ExtensionProducts.Add(sourceProduct1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Store.Product sourceProduct1 = sourceElement as global::NuPattern.Runtime.Store.Product;
			if (sourceProduct1 != null)
			{
				// Delete link for path ViewHasExtensionProducts.ExtensionProducts
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Store.ViewHasExtensionProducts.GetLinks((global::NuPattern.Runtime.Store.View)this, sourceProduct1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Store.ViewHasExtensionProducts.ViewDomainRoleId, global::NuPattern.Runtime.Store.ViewHasExtensionProducts.ExtensionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass AbstractElement
	/// A child collection or element.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.AbstractElement.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.AbstractElement.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[DslModeling::DomainObjectId("fb175123-6a49-496b-88b4-4c82c6d2e6ca")]
	internal abstract partial class AbstractElement : ProductElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AbstractElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfb175123, 0x6a49, 0x496b, 0x88, 0xb4, 0x4c, 0x82, 0xc6, 0xd2, 0xe6, 0xca);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected AbstractElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// The owning view.
		/// </summary>
		internal virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ViewHasElements.AbstractElementDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ViewHasElements.AbstractElementDomainRoleId, value);
			}
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// The child elements of this element.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AbstractElement> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElement>, AbstractElement>(global::NuPattern.Runtime.Store.ElementHasChildElements.ParentElementDomainRoleId);
			}
		}
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual AbstractElement Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ElementHasChildElements.ChildElementDomainRoleId) as AbstractElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ElementHasChildElements.ChildElementDomainRoleId, value);
			}
		}
		#endregion
		#region ExtensionProducts opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ExtensionProducts.
		/// The child extension products of this element.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Product> ExtensionProducts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Product>, Product>(global::NuPattern.Runtime.Store.ElementHasExtensions.AbstractElementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::NuPattern.Runtime.Store.Product.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::NuPattern.Runtime.Store.Product sourceProduct1 = sourceElement as global::NuPattern.Runtime.Store.Product;
			if (sourceProduct1 != null)
			{
				// Create link for path ElementHasExtensions.ExtensionProducts
				this.ExtensionProducts.Add(sourceProduct1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::NuPattern.Runtime.Store.Product sourceProduct1 = sourceElement as global::NuPattern.Runtime.Store.Product;
			if (sourceProduct1 != null)
			{
				// Delete link for path ElementHasExtensions.ExtensionProducts
				
				foreach (DslModeling::ElementLink link in global::NuPattern.Runtime.Store.ElementHasExtensions.GetLinks((global::NuPattern.Runtime.Store.AbstractElement)this, sourceProduct1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::NuPattern.Runtime.Store.ElementHasExtensions.AbstractElementDomainRoleId, global::NuPattern.Runtime.Store.ElementHasExtensions.ExtensionDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass InstanceBase
	/// An element instance.
	/// </summary>
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.InstanceBase.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.InstanceBase.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (DefinitionName = {DefinitionName})")]
	[DslModeling::DomainObjectId("30b2207d-bb9a-456f-82ee-a116d74598ef")]
	internal abstract partial class InstanceBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InstanceBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x30b2207d, 0xbb9a, 0x456f, 0x82, 0xee, 0xa1, 0x16, 0xd7, 0x45, 0x98, 0xef);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected InstanceBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DefinitionId domain property code
		
		/// <summary>
		/// DefinitionId domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionIdDomainPropertyId = new global::System.Guid(0xd029965b, 0x4622, 0x4b05, 0x85, 0x3b, 0x95, 0xcc, 0x6d, 0x16, 0x3e, 0x0b);
		
		/// <summary>
		/// Storage for DefinitionId
		/// </summary>
		private global::System.Guid definitionIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DefinitionId domain property.
		/// The model element identifier in the owning definition.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.InstanceBase/DefinitionId.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.InstanceBase/DefinitionId.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("d029965b-4622-4b05-853b-95cc6d163e0b")]
		public global::System.Guid DefinitionId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return definitionIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InstanceBase.DefinitionId domain property.
		/// </summary>
		internal sealed partial class DefinitionIdPropertyHandler : DslModeling::DomainPropertyValueHandler<InstanceBase, global::System.Guid>
		{
			private DefinitionIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InstanceBase.DefinitionId domain property value handler.
			/// </summary>
			public static readonly DefinitionIdPropertyHandler Instance = new DefinitionIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InstanceBase.DefinitionId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(InstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.definitionIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InstanceBase element, global::System.Guid newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(InstanceBase element, global::System.Guid oldValue, global::System.Guid newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.definitionIdPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<InstanceBase>(x => x.DefinitionId);
			}
		}
		
		#endregion
		#region DefinitionName domain property code
		
		/// <summary>
		/// DefinitionName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionNameDomainPropertyId = new global::System.Guid(0x5cbc79d5, 0x4132, 0x4486, 0x83, 0x70, 0x1e, 0x03, 0xbd, 0x03, 0x31, 0x12);
		
		/// <summary>
		/// Gets or sets the value of DefinitionName domain property.
		/// Informational-only rendering of the defining element referenced by the
		/// DefinitionId property.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.InstanceBase/DefinitionName.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.InstanceBase/DefinitionName.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::ElementName]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("5cbc79d5-4132-4486-8370-1e03bd033112")]
		public global::System.String DefinitionName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefinitionNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefinitionNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InstanceBase.DefinitionName domain property.
		/// </summary>
		internal sealed partial class DefinitionNamePropertyHandler : DslModeling::DomainPropertyValueHandler<InstanceBase, global::System.String>
		{
			private DefinitionNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InstanceBase.DefinitionName domain property value handler.
			/// </summary>
			public static readonly DefinitionNamePropertyHandler Instance = new DefinitionNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InstanceBase.DefinitionName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefinitionName because its Kind is
				// set to CustomStorage. Please provide the GetDefinitionNameValue()
				// method on the domain class.
				return element.GetDefinitionNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InstanceBase element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(InstanceBase element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				// There is no storage for DefinitionName because its Kind is
				// set to CustomStorage. Please provide the SetDefinitionNameValue()
				// method on the domain class.
				element.SetDefinitionNameValue(newValue);
				ValueChanged(element, oldValue, GetValue(element));
				element.PropertyChanges.NotifyChanged<InstanceBase>(x => x.DefinitionName);
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x277f2180, 0x34d8, 0x49f7, 0xa3, 0x3b, 0x04, 0x97, 0xda, 0x7c, 0x5c, 0xbc);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Notes for this element.
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.InstanceBase/Notes.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::CategoryResource("NuPattern.Runtime.Store.InstanceBase/Notes.Category", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.InstanceBase/Notes.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("277f2180-34d8-49f7-a33b-0497da7c5cbc")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the InstanceBase.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<InstanceBase, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InstanceBase.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InstanceBase.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InstanceBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(InstanceBase element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(InstanceBase element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.notesPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<InstanceBase>(x => x.Notes);
			}
		}
		
		#endregion
	}
}
namespace NuPattern.Runtime.Store
{
	/// <summary>
	/// DomainClass Reference
	/// A reference to external data or service.
	/// </summary>
	[System.ComponentModel.DefaultProperty("Kind")]
	[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Reference.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Reference.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Kind = {kindPropertyStorage})")]
	[DslModeling::DomainObjectId("3fcc5eb5-c492-48ba-84a1-9172012c8f5f")]
	internal partial class Reference : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Reference domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3fcc5eb5, 0xc492, 0x48ba, 0x84, 0xa1, 0x91, 0x72, 0x01, 0x2c, 0x8f, 0x5f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reference(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Reference(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0xf7d5f1f0, 0x6498, 0x42a2, 0xb0, 0xc4, 0x62, 0x2d, 0x37, 0x70, 0xaf, 0x4d);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The value of the reference, having meaning to the kind of the reference.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Reference/Value.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Reference/Value.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("f7d5f1f0-6498-42a2-b0c4-622d3770af4d")]
		public global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reference.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Reference, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reference.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reference.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reference element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reference element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Reference element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.valuePropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Reference>(x => x.Value);
			}
		}
		
		#endregion
		#region Kind domain property code
		
		/// <summary>
		/// Kind domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainPropertyId = new global::System.Guid(0x5b404e8a, 0x2ac5, 0x4470, 0x95, 0x0f, 0x20, 0x3b, 0x4e, 0x80, 0x99, 0xa6);
		
		/// <summary>
		/// Storage for Kind
		/// </summary>
		private global::System.String kindPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Kind domain property.
		/// The kind of the reference, used to classify the reference. If this is the full
		/// type name of a class, then the class is used to provide the display
		/// characteristics of this reference.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Reference/Kind.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Reference/Kind.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("5b404e8a-2ac5-4470-950f-203b4e8099a6")]
		public global::System.String Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return kindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reference.Kind domain property.
		/// </summary>
		internal sealed partial class KindPropertyHandler : DslModeling::DomainPropertyValueHandler<Reference, global::System.String>
		{
			private KindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reference.Kind domain property value handler.
			/// </summary>
			public static readonly KindPropertyHandler Instance = new KindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reference.Kind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reference element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.kindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reference element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Reference element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.kindPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Reference>(x => x.Kind);
			}
		}
		
		#endregion
		#region Tag domain property code
		
		/// <summary>
		/// Tag domain property Id.
		/// </summary>
		public static readonly global::System.Guid TagDomainPropertyId = new global::System.Guid(0x304e2b4e, 0xb105, 0x47dd, 0xbb, 0x81, 0x02, 0x7a, 0x22, 0x0c, 0x37, 0xe2);
		
		/// <summary>
		/// Storage for Tag
		/// </summary>
		private global::System.String tagPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Tag domain property.
		/// Provides arbitrary annotations on a reference, typically used by automation.
		/// </summary>
		[DslDesign::DisplayNameResource("NuPattern.Runtime.Store.Reference/Tag.DisplayName", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("NuPattern.Runtime.Store.Reference/Tag.Description", typeof(global::NuPattern.Runtime.Store.ProductStateStoreDomainModel), "NuPattern.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainObjectId("304e2b4e-b105-47dd-bb81-027a220c37e2")]
		public global::System.String Tag
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tagPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TagPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Reference.Tag domain property.
		/// </summary>
		internal sealed partial class TagPropertyHandler : DslModeling::DomainPropertyValueHandler<Reference, global::System.String>
		{
			private TagPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Reference.Tag domain property value handler.
			/// </summary>
			public static readonly TagPropertyHandler Instance = new TagPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Reference.Tag domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TagDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Reference element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tagPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Reference element, global::System.String newValue)
			{
				if (element == null)
				{
					throw new global::System.ArgumentNullException("element");
				}
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					if (element.Store.InUndoRedoOrRollback || element.Store.TransactionManager.InTransaction || element.Store.TransactionManager.CurrentTransaction != null && element.Store.TransactionManager.CurrentTransaction.InRollback)
					{
						this.SetValue(element, oldValue, newValue);
					}
					else
					{
						using (var tx = element.Store.TransactionManager.BeginTransaction())
						{
							this.SetValue(element, oldValue, newValue);
							tx.Commit();
						}
					}
				}
			}
		
			private void SetValue(Reference element, global::System.String oldValue, global::System.String newValue)
			{
				this.ValueChanging(element, oldValue, newValue);
				element.tagPropertyStorage = newValue;
				ValueChanged(element, oldValue, newValue);
				element.PropertyChanges.NotifyChanged<Reference>(x => x.Tag);
			}
		}
		
		#endregion
		#region Owner opposite domain role accessor
		/// <summary>
		/// Gets or sets Owner.
		/// The owning element.
		/// </summary>
		internal virtual ProductElement Owner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::NuPattern.Runtime.Store.ProductElementHasReferences.ReferenceDomainRoleId) as ProductElement;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::NuPattern.Runtime.Store.ProductElementHasReferences.ReferenceDomainRoleId, value);
			}
		}
		#endregion
	}
}
