//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ProductElementHasProperties
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6ca5790c-e0a4-4393-ac78-85cc87abf147")]
	public partial class ProductElementHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProductElementHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ca5790c, 0xe0a4, 0x4393, 0xac, 0x78, 0x85, 0xcc, 0x87, 0xab, 0xf1, 0x47);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProductElementHasProperties link in the same Partition as the given ProductElement
		/// </summary>
		/// <param name="source">ProductElement to use as the source of the relationship.</param>
		/// <param name="target">Property to use as the target of the relationship.</param>
		public ProductElementHasProperties(ProductElement source, Property target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProductElementHasProperties.ProductElementDomainRoleId, source), new DslModeling::RoleAssignment(ProductElementHasProperties.PropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductElementHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductElementHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductElementHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductElementHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProductElement domain role code
		
		/// <summary>
		/// ProductElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductElementDomainRoleId = new global::System.Guid(0x52b9fc10, 0xfcc7, 0x47d1, 0xad, 0xb7, 0x6d, 0xcb, 0xef, 0x1f, 0x4c, 0xe1);
		
		/// <summary>
		/// DomainRole ProductElement
		/// The properties of this element.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties/ProductElement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties/ProductElement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties/ProductElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("52b9fc10-fcc7-47d1-adb7-6dcbef1f4ce1")]
		public virtual ProductElement ProductElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a Property
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ProductElement GetOwner(Property element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PropertyDomainRoleId) as ProductElement;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOwner(Property element, ProductElement newProductElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PropertyDomainRoleId, newProductElement);
		}
		#endregion
		#region Property domain role code
		
		/// <summary>
		/// Property domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertyDomainRoleId = new global::System.Guid(0x94353169, 0x930a, 0x4c7a, 0x9a, 0x90, 0x8e, 0x53, 0x04, 0xb8, 0x9a, 0x23);
		
		/// <summary>
		/// DomainRole Property
		/// The owning element.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties/Property.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties/Property.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties/Property.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("94353169-930a-4c7a-9a90-8e5304b89a23")]
		public virtual Property Property
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Property)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a ProductElement
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Property> GetProperties(ProductElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Property>, Property>(element, ProductElementDomainRoleId);
		}
		#endregion
		#region ProductElement link accessor
		/// <summary>
		/// Get the list of ProductElementHasProperties links to a ProductElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties> GetLinksToProperties ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElement productElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties>(productElementInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties.ProductElementDomainRoleId);
		}
		#endregion
		#region Property link accessor
		/// <summary>
		/// Get the ProductElementHasProperties link to a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties GetLinkToOwner (global::Microsoft.VisualStudio.Patterning.Runtime.Store.Property propertyInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties>(propertyInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties.PropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Property not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProductElementHasProperties instance accessors
		
		/// <summary>
		/// Get any ProductElementHasProperties links between a given ProductElement and a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Property target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties.ProductElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProductElementHasProperties link between a given ProductElementand a Property.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Property target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties.ProductElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties link in links )
			{
				if ( target.Equals(link.Property) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ProductHasViews
	/// Description for Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a6909603-f601-479e-92ba-ee082713a25d")]
	public partial class ProductHasViews : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProductHasViews domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa6909603, 0xf601, 0x479e, 0x92, 0xba, 0xee, 0x08, 0x27, 0x13, 0xa2, 0x5d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProductHasViews link in the same Partition as the given Product
		/// </summary>
		/// <param name="source">Product to use as the source of the relationship.</param>
		/// <param name="target">View to use as the target of the relationship.</param>
		public ProductHasViews(Product source, View target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProductHasViews.ProductDomainRoleId, source), new DslModeling::RoleAssignment(ProductHasViews.ViewDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductHasViews(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductHasViews(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductHasViews(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductHasViews(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Product domain role code
		
		/// <summary>
		/// Product domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductDomainRoleId = new global::System.Guid(0x75f3cd0f, 0xaee1, 0x462e, 0xa9, 0xeb, 0x63, 0x7c, 0x96, 0x9d, 0xd1, 0x40);
		
		/// <summary>
		/// DomainRole Product
		/// The views of this product.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews/Product.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews/Product.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Views", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews/Product.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.OneMany)]
		[DslModeling::DomainObjectId("75f3cd0f-aee1-462e-a9eb-637c969dd140")]
		public virtual Product Product
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Product)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Product of a View
		/// <summary>
		/// Gets Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Product GetProduct(View element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ViewDomainRoleId) as Product;
		}
		
		/// <summary>
		/// Sets Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProduct(View element, Product newProduct)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ViewDomainRoleId, newProduct);
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x1d00ce20, 0x2179, 0x47be, 0x8b, 0xfd, 0x63, 0x30, 0x15, 0x70, 0x07, 0x26);
		
		/// <summary>
		/// DomainRole View
		/// The owning product.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews/View.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews/View.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Product", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews/View.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1d00ce20-2179-47be-8bfd-633015700726")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Views of a Product
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<View> GetViews(Product element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(element, ProductDomainRoleId);
		}
		#endregion
		#region Product link accessor
		/// <summary>
		/// Get the list of ProductHasViews links to a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews> GetLinksToViews ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product productInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews>(productInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews.ProductDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the ProductHasViews link to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews GetLinkToProduct (global::Microsoft.VisualStudio.Patterning.Runtime.Store.View viewInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews>(viewInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews.ViewDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of View not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProductHasViews instance accessors
		
		/// <summary>
		/// Get any ProductHasViews links between a given Product and a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.View target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews.ProductDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProductHasViews link between a given Productand a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.View target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews.ProductDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews link in links )
			{
				if ( target.Equals(link.View) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ViewHasElements
	/// Description for Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c9108ec6-51cd-4a7e-8570-cb53cdd8d09a")]
	public partial class ViewHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc9108ec6, 0x51cd, 0x4a7e, 0x85, 0x70, 0xcb, 0x53, 0xcd, 0xd8, 0xd0, 0x9a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasElements link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">AbstractElement to use as the target of the relationship.</param>
		public ViewHasElements(View source, AbstractElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasElements.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasElements.AbstractElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0x9caaf0c1, 0xdd84, 0x4ea8, 0xbd, 0xec, 0x1c, 0x01, 0xdc, 0x20, 0xf0, 0x62);
		
		/// <summary>
		/// DomainRole View
		/// The child elements of this view.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements/View.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements/View.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9caaf0c1-dd84-4ea8-bdec-1c01dc20f062")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a AbstractElement
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(AbstractElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AbstractElementDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(AbstractElement element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AbstractElementDomainRoleId, newView);
		}
		#endregion
		#region AbstractElement domain role code
		
		/// <summary>
		/// AbstractElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractElementDomainRoleId = new global::System.Guid(0xafd7c74d, 0x4157, 0x43cb, 0xbc, 0x14, 0xcf, 0x6c, 0x33, 0xae, 0x99, 0x65);
		
		/// <summary>
		/// DomainRole AbstractElement
		/// The owning view.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements/AbstractElement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements/AbstractElement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements/AbstractElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("afd7c74d-4157-43cb-bc14-cf6c33ae9965")]
		public virtual AbstractElement AbstractElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a View
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractElement> GetElements(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElement>, AbstractElement>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasElements links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements> GetLinksToElements ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements>(viewInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements.ViewDomainRoleId);
		}
		#endregion
		#region AbstractElement link accessor
		/// <summary>
		/// Get the ViewHasElements link to a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements GetLinkToView (global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement abstractElementInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements>(abstractElementInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements.AbstractElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AbstractElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasElements instance accessors
		
		/// <summary>
		/// Get any ViewHasElements links between a given View and a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.View source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements.ViewDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements link in links )
			{
				if ( target.Equals(link.AbstractElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasElements link between a given Viewand a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.View source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements.ViewDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements link in links )
			{
				if ( target.Equals(link.AbstractElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ElementHasChildElements
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f403a072-caab-432e-b178-fac3cd111c01")]
	public partial class ElementHasChildElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementHasChildElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf403a072, 0xcaab, 0x432e, 0xb1, 0x78, 0xfa, 0xc3, 0xcd, 0x11, 0x1c, 0x01);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementHasChildElements link in the same Partition as the given AbstractElement
		/// </summary>
		/// <param name="source">AbstractElement to use as the source of the relationship.</param>
		/// <param name="target">AbstractElement to use as the target of the relationship.</param>
		public ElementHasChildElements(AbstractElement source, AbstractElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementHasChildElements.ParentElementDomainRoleId, source), new DslModeling::RoleAssignment(ElementHasChildElements.ChildElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasChildElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasChildElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasChildElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasChildElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ParentElement domain role code
		
		/// <summary>
		/// ParentElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ParentElementDomainRoleId = new global::System.Guid(0xb978b2db, 0x5e97, 0x4331, 0xa9, 0xfc, 0xc3, 0x2b, 0xb1, 0x29, 0xd2, 0xca);
		
		/// <summary>
		/// DomainRole ParentElement
		/// The child elements of this element.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements/ParentElement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements/ParentElement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements/ParentElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b978b2db-5e97-4331-a9fc-c32bb129d2ca")]
		public virtual AbstractElement ParentElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ParentElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ParentElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a AbstractElement
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractElement GetOwner(AbstractElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ChildElementDomainRoleId) as AbstractElement;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOwner(AbstractElement element, AbstractElement newParentElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ChildElementDomainRoleId, newParentElement);
		}
		#endregion
		#region ChildElement domain role code
		
		/// <summary>
		/// ChildElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ChildElementDomainRoleId = new global::System.Guid(0x8acfd773, 0x86ab, 0x49fa, 0xa6, 0x4b, 0x85, 0x6a, 0x72, 0x59, 0xd6, 0xb9);
		
		/// <summary>
		/// DomainRole ChildElement
		/// The owning element.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements/ChildElement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements/ChildElement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements/ChildElement.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8acfd773-86ab-49fa-a64b-856a7259d6b9")]
		public virtual AbstractElement ChildElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ChildElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ChildElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a AbstractElement
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AbstractElement> GetElements(AbstractElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AbstractElement>, AbstractElement>(element, ParentElementDomainRoleId);
		}
		#endregion
		#region ParentElement link accessor
		/// <summary>
		/// Get the list of ElementHasChildElements links to a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements> GetLinksToElements ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement parentElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements>(parentElementInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements.ParentElementDomainRoleId);
		}
		#endregion
		#region ChildElement link accessor
		/// <summary>
		/// Get the ElementHasChildElements link to a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements GetLinkToOwner (global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement childElementInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements>(childElementInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements.ChildElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ChildElement not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementHasChildElements instance accessors
		
		/// <summary>
		/// Get any ElementHasChildElements links between a given AbstractElement and a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements.ParentElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements link in links )
			{
				if ( target.Equals(link.ChildElement) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementHasChildElements link between a given AbstractElementand a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements.ParentElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements link in links )
			{
				if ( target.Equals(link.ChildElement) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ProductStateHasProducts
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("6f7b5a1d-97f0-4816-a525-8dae64aa347b")]
	public partial class ProductStateHasProducts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProductStateHasProducts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6f7b5a1d, 0x97f0, 0x4816, 0xa5, 0x25, 0x8d, 0xae, 0x64, 0xaa, 0x34, 0x7b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProductStateHasProducts link in the same Partition as the given ProductState
		/// </summary>
		/// <param name="source">ProductState to use as the source of the relationship.</param>
		/// <param name="target">Product to use as the target of the relationship.</param>
		public ProductStateHasProducts(ProductState source, Product target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProductStateHasProducts.ProductStateDomainRoleId, source), new DslModeling::RoleAssignment(ProductStateHasProducts.ProductDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductStateHasProducts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductStateHasProducts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductStateHasProducts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductStateHasProducts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProductState domain role code
		
		/// <summary>
		/// ProductState domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductStateDomainRoleId = new global::System.Guid(0x20d6306b, 0x1643, 0x4f42, 0xad, 0x13, 0xc5, 0x80, 0x8a, 0xf0, 0x28, 0x33);
		
		/// <summary>
		/// DomainRole ProductState
		/// The products in this solution.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts/ProductState.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts/ProductState.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Products", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts/ProductState.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("20d6306b-1643-4f42-ad13-c5808af02833")]
		public virtual ProductState ProductState
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductState)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductStateDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductStateDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProductState of a Product
		/// <summary>
		/// Gets ProductState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ProductState GetProductState(Product element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProductDomainRoleId) as ProductState;
		}
		
		/// <summary>
		/// Sets ProductState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProductState(Product element, ProductState newProductState)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProductDomainRoleId, newProductState);
		}
		#endregion
		#region Product domain role code
		
		/// <summary>
		/// Product domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductDomainRoleId = new global::System.Guid(0xbbff43e8, 0x412a, 0x4ffa, 0x80, 0x34, 0x88, 0xae, 0x5d, 0xd3, 0xd0, 0x24);
		
		/// <summary>
		/// DomainRole Product
		/// The owning state model.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts/Product.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts/Product.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProductState", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts/Product.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("bbff43e8-412a-4ffa-8034-88ae5dd3d024")]
		public virtual Product Product
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Product)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Products of a ProductState
		/// <summary>
		/// Gets a list of Products.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Product> GetProducts(ProductState element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Product>, Product>(element, ProductStateDomainRoleId);
		}
		#endregion
		#region ProductState link accessor
		/// <summary>
		/// Get the list of ProductStateHasProducts links to a ProductState.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts> GetLinksToProducts ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductState productStateInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts>(productStateInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts.ProductStateDomainRoleId);
		}
		#endregion
		#region Product link accessor
		/// <summary>
		/// Get the ProductStateHasProducts link to a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts GetLinkToProductState (global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product productInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts>(productInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts.ProductDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Product not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProductStateHasProducts instance accessors
		
		/// <summary>
		/// Get any ProductStateHasProducts links between a given ProductState and a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductState source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts.ProductStateDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts link in links )
			{
				if ( target.Equals(link.Product) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProductStateHasProducts link between a given ProductStateand a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductState source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts.ProductStateDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts link in links )
			{
				if ( target.Equals(link.Product) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ElementHasExtensions
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d33a9c43-9ba9-4e98-8841-72ec8355ee3a")]
	public partial class ElementHasExtensions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ElementHasExtensions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd33a9c43, 0x9ba9, 0x4e98, 0x88, 0x41, 0x72, 0xec, 0x83, 0x55, 0xee, 0x3a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ElementHasExtensions link in the same Partition as the given AbstractElement
		/// </summary>
		/// <param name="source">AbstractElement to use as the source of the relationship.</param>
		/// <param name="target">Product to use as the target of the relationship.</param>
		public ElementHasExtensions(AbstractElement source, Product target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ElementHasExtensions.AbstractElementDomainRoleId, source), new DslModeling::RoleAssignment(ElementHasExtensions.ExtensionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasExtensions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasExtensions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ElementHasExtensions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ElementHasExtensions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AbstractElement domain role code
		
		/// <summary>
		/// AbstractElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid AbstractElementDomainRoleId = new global::System.Guid(0xa38cf9ed, 0xb2aa, 0x4114, 0x82, 0x87, 0x8c, 0x3f, 0x38, 0x8b, 0x64, 0x2a);
		
		/// <summary>
		/// DomainRole AbstractElement
		/// The child extension products of this element.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions/AbstractElement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions/AbstractElement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionProducts", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions/AbstractElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a38cf9ed-b2aa-4114-8287-8c3f388b642a")]
		public virtual AbstractElement AbstractElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AbstractElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, AbstractElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AbstractElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a Product
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AbstractElement GetOwner(Product element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExtensionDomainRoleId) as AbstractElement;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOwner(Product element, AbstractElement newAbstractElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExtensionDomainRoleId, newAbstractElement);
		}
		#endregion
		#region Extension domain role code
		
		/// <summary>
		/// Extension domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionDomainRoleId = new global::System.Guid(0x760038e7, 0x6f05, 0x4da1, 0xbd, 0xef, 0x08, 0x29, 0x1e, 0xd2, 0x15, 0x3a);
		
		/// <summary>
		/// DomainRole Extension
		/// The owning element.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions/Extension.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions/Extension.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions/Extension.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("760038e7-6f05-4da1-bdef-08291ed2153a")]
		public virtual Product Extension
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Product)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtensionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtensionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionProducts of a AbstractElement
		/// <summary>
		/// Gets a list of ExtensionProducts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Product> GetExtensionProducts(AbstractElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Product>, Product>(element, AbstractElementDomainRoleId);
		}
		#endregion
		#region AbstractElement link accessor
		/// <summary>
		/// Get the list of ElementHasExtensions links to a AbstractElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions> GetLinksToExtensionProducts ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement abstractElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions>(abstractElementInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions.AbstractElementDomainRoleId);
		}
		#endregion
		#region Extension link accessor
		/// <summary>
		/// Get the ElementHasExtensions link to a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions GetLinkToOwner (global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product extensionInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions>(extensionInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions.ExtensionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Extension not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ElementHasExtensions instance accessors
		
		/// <summary>
		/// Get any ElementHasExtensions links between a given AbstractElement and a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions.AbstractElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ElementHasExtensions link between a given AbstractElementand a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.AbstractElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions.AbstractElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ViewHasExtensionProducts
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("857a8e39-d8a4-4eba-a51c-c502c131831e")]
	public partial class ViewHasExtensionProducts : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ViewHasExtensionProducts domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x857a8e39, 0xd8a4, 0x4eba, 0xa5, 0x1c, 0xc5, 0x02, 0xc1, 0x31, 0x83, 0x1e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ViewHasExtensionProducts link in the same Partition as the given View
		/// </summary>
		/// <param name="source">View to use as the source of the relationship.</param>
		/// <param name="target">Product to use as the target of the relationship.</param>
		public ViewHasExtensionProducts(View source, Product target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ViewHasExtensionProducts.ViewDomainRoleId, source), new DslModeling::RoleAssignment(ViewHasExtensionProducts.ExtensionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasExtensionProducts(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasExtensionProducts(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ViewHasExtensionProducts(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ViewHasExtensionProducts(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region View domain role code
		
		/// <summary>
		/// View domain role Id.
		/// </summary>
		public static readonly global::System.Guid ViewDomainRoleId = new global::System.Guid(0xf88f4ae1, 0xe5be, 0x4f4b, 0x92, 0xfb, 0x1c, 0x89, 0x99, 0x66, 0xee, 0x99);
		
		/// <summary>
		/// DomainRole View
		/// The child extension products of this view.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts/View.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts/View.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ExtensionProducts", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts/View.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f88f4ae1-e5be-4f4b-92fb-1c899966ee99")]
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (View)DslModeling::DomainRoleInfo.GetRolePlayer(this, ViewDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ViewDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access View of a Product
		/// <summary>
		/// Gets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static View GetView(Product element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ExtensionDomainRoleId) as View;
		}
		
		/// <summary>
		/// Sets View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetView(Product element, View newView)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ExtensionDomainRoleId, newView);
		}
		#endregion
		#region Extension domain role code
		
		/// <summary>
		/// Extension domain role Id.
		/// </summary>
		public static readonly global::System.Guid ExtensionDomainRoleId = new global::System.Guid(0x829004e5, 0x3211, 0x4e48, 0x86, 0x67, 0x07, 0xcb, 0x1a, 0xca, 0xd2, 0x2c);
		
		/// <summary>
		/// DomainRole Extension
		/// The owning view.
		/// </summary>
		[Hidden()]
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts/Extension.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts/Extension.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "View", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts/Extension.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("829004e5-3211-4e48-8667-07cb1acad22c")]
		public virtual Product Extension
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Product)DslModeling::DomainRoleInfo.GetRolePlayer(this, ExtensionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ExtensionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ExtensionProducts of a View
		/// <summary>
		/// Gets a list of ExtensionProducts.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Product> GetExtensionProducts(View element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Product>, Product>(element, ViewDomainRoleId);
		}
		#endregion
		#region View link accessor
		/// <summary>
		/// Get the list of ViewHasExtensionProducts links to a View.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts> GetLinksToExtensionProducts ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.View viewInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts>(viewInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts.ViewDomainRoleId);
		}
		#endregion
		#region Extension link accessor
		/// <summary>
		/// Get the ViewHasExtensionProducts link to a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts GetLinkToView (global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product extensionInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts>(extensionInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts.ExtensionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Extension not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ViewHasExtensionProducts instance accessors
		
		/// <summary>
		/// Get any ViewHasExtensionProducts links between a given View and a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.View source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts.ViewDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ViewHasExtensionProducts link between a given Viewand a Product.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.View source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Product target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts.ViewDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts link in links )
			{
				if ( target.Equals(link.Extension) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainRelationship ProductElementHasReferences
	/// Description for
	/// Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslModeling::DomainModelOwner(typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3cf98e81-5f66-450b-a2f7-60e75e96a40a")]
	public partial class ProductElementHasReferences : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProductElementHasReferences domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3cf98e81, 0x5f66, 0x450b, 0xa2, 0xf7, 0x60, 0xe7, 0x5e, 0x96, 0xa4, 0x0a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProductElementHasReferences link in the same Partition as the given ProductElement
		/// </summary>
		/// <param name="source">ProductElement to use as the source of the relationship.</param>
		/// <param name="target">Reference to use as the target of the relationship.</param>
		public ProductElementHasReferences(ProductElement source, Reference target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProductElementHasReferences.ProductElementDomainRoleId, source), new DslModeling::RoleAssignment(ProductElementHasReferences.ReferenceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductElementHasReferences(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductElementHasReferences(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProductElementHasReferences(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProductElementHasReferences(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProductElement domain role code
		
		/// <summary>
		/// ProductElement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProductElementDomainRoleId = new global::System.Guid(0x5f1b080b, 0x17dc, 0x4d4a, 0x93, 0x30, 0xc2, 0x89, 0xeb, 0xc0, 0xa5, 0x10);
		
		/// <summary>
		/// DomainRole ProductElement
		/// The references of this element.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences/ProductElement.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences/ProductElement.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "References", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences/ProductElement.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5f1b080b-17dc-4d4a-9330-c289ebc0a510")]
		public virtual ProductElement ProductElement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProductElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProductElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProductElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Owner of a Reference
		/// <summary>
		/// Gets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ProductElement GetOwner(Reference element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ReferenceDomainRoleId) as ProductElement;
		}
		
		/// <summary>
		/// Sets Owner.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetOwner(Reference element, ProductElement newProductElement)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ReferenceDomainRoleId, newProductElement);
		}
		#endregion
		#region Reference domain role code
		
		/// <summary>
		/// Reference domain role Id.
		/// </summary>
		public static readonly global::System.Guid ReferenceDomainRoleId = new global::System.Guid(0x7b4099c8, 0xaa85, 0x46f6, 0x9d, 0x34, 0x38, 0x51, 0x3b, 0xd6, 0x13, 0x17);
		
		/// <summary>
		/// DomainRole Reference
		/// The owning element.
		/// </summary>
		[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences/Reference.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences/Reference.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Owner", PropertyDisplayNameKey="Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences/Reference.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("7b4099c8-aa85-46f6-9d34-38513bd61317")]
		public virtual Reference Reference
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Reference)DslModeling::DomainRoleInfo.GetRolePlayer(this, ReferenceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ReferenceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access References of a ProductElement
		/// <summary>
		/// Gets a list of References.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Reference> GetReferences(ProductElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Reference>, Reference>(element, ProductElementDomainRoleId);
		}
		#endregion
		#region ProductElement link accessor
		/// <summary>
		/// Get the list of ProductElementHasReferences links to a ProductElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences> GetLinksToReferences ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElement productElementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences>(productElementInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences.ProductElementDomainRoleId);
		}
		#endregion
		#region Reference link accessor
		/// <summary>
		/// Get the ProductElementHasReferences link to a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences GetLinkToOwner (global::Microsoft.VisualStudio.Patterning.Runtime.Store.Reference referenceInstance)
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences>(referenceInstance, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences.ReferenceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Reference not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProductElementHasReferences instance accessors
		
		/// <summary>
		/// Get any ProductElementHasReferences links between a given ProductElement and a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences> GetLinks( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Reference target )
		{
			global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences> outLinks = new global::System.Collections.Generic.List<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences>();
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences.ProductElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences link in links )
			{
				if ( target.Equals(link.Reference) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProductElementHasReferences link between a given ProductElementand a Reference.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences GetLink( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElement source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.Reference target )
		{
			global::System.Collections.Generic.IList<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences>(source, global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences.ProductElementDomainRoleId);
			foreach ( global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences link in links )
			{
				if ( target.Equals(link.Reference) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
