//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Microsoft.VisualStudio.Patterning.Runtime.Store
{
	/// <summary>
	/// DomainModel ProductStateStoreDomainModel
	/// The store of the state of all products in the solution.
	/// </summary>
	[DslDesign::DisplayNameResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel.DisplayName", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[DslDesign::DescriptionResource("Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel.Description", typeof(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel), "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("04739abb-263d-488f-b865-fed569a7b766")]
	public partial class ProductStateStoreDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// ProductStateStoreDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x04739abb, 0x263d, 0x488f, 0xb8, 0x65, 0xfe, 0xd5, 0x69, 0xa7, 0xb7, 0x66);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public ProductStateStoreDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(ProductState),
				typeof(Property),
				typeof(Collection),
				typeof(Element),
				typeof(ProductElement),
				typeof(Product),
				typeof(View),
				typeof(AbstractElement),
				typeof(InstanceBase),
				typeof(Reference),
				typeof(ProductElementHasProperties),
				typeof(ProductHasViews),
				typeof(ViewHasElements),
				typeof(ElementHasChildElements),
				typeof(ProductStateHasProducts),
				typeof(ElementHasExtensions),
				typeof(ViewHasExtensionProducts),
				typeof(ProductElementHasReferences),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(Property), "RawValue", Property.RawValueDomainPropertyId, typeof(Property.RawValuePropertyHandler)),
				new DomainMemberInfo(typeof(ProductElement), "InstanceName", ProductElement.InstanceNameDomainPropertyId, typeof(ProductElement.InstanceNamePropertyHandler)),
				new DomainMemberInfo(typeof(ProductElement), "InstanceOrder", ProductElement.InstanceOrderDomainPropertyId, typeof(ProductElement.InstanceOrderPropertyHandler)),
				new DomainMemberInfo(typeof(Product), "ExtensionId", Product.ExtensionIdDomainPropertyId, typeof(Product.ExtensionIdPropertyHandler)),
				new DomainMemberInfo(typeof(Product), "ExtensionName", Product.ExtensionNameDomainPropertyId, typeof(Product.ExtensionNamePropertyHandler)),
				new DomainMemberInfo(typeof(Product), "Author", Product.AuthorDomainPropertyId, typeof(Product.AuthorPropertyHandler)),
				new DomainMemberInfo(typeof(Product), "Version", Product.VersionDomainPropertyId, typeof(Product.VersionPropertyHandler)),
				new DomainMemberInfo(typeof(InstanceBase), "DefinitionId", InstanceBase.DefinitionIdDomainPropertyId, typeof(InstanceBase.DefinitionIdPropertyHandler)),
				new DomainMemberInfo(typeof(InstanceBase), "DefinitionName", InstanceBase.DefinitionNameDomainPropertyId, typeof(InstanceBase.DefinitionNamePropertyHandler)),
				new DomainMemberInfo(typeof(InstanceBase), "Notes", InstanceBase.NotesDomainPropertyId, typeof(InstanceBase.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(Reference), "Value", Reference.ValueDomainPropertyId, typeof(Reference.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(Reference), "Kind", Reference.KindDomainPropertyId, typeof(Reference.KindPropertyHandler)),
				new DomainMemberInfo(typeof(Reference), "Tag", Reference.TagDomainPropertyId, typeof(Reference.TagPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(ProductElementHasProperties), "ProductElement", ProductElementHasProperties.ProductElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductElementHasProperties), "Property", ProductElementHasProperties.PropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductHasViews), "Product", ProductHasViews.ProductDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductHasViews), "View", ProductHasViews.ViewDomainRoleId),
				new DomainRolePlayerInfo(typeof(ViewHasElements), "View", ViewHasElements.ViewDomainRoleId),
				new DomainRolePlayerInfo(typeof(ViewHasElements), "AbstractElement", ViewHasElements.AbstractElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasChildElements), "ParentElement", ElementHasChildElements.ParentElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasChildElements), "ChildElement", ElementHasChildElements.ChildElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductStateHasProducts), "ProductState", ProductStateHasProducts.ProductStateDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductStateHasProducts), "Product", ProductStateHasProducts.ProductDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasExtensions), "AbstractElement", ElementHasExtensions.AbstractElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ElementHasExtensions), "Extension", ElementHasExtensions.ExtensionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ViewHasExtensionProducts), "View", ViewHasExtensionProducts.ViewDomainRoleId),
				new DomainRolePlayerInfo(typeof(ViewHasExtensionProducts), "Extension", ViewHasExtensionProducts.ExtensionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductElementHasReferences), "ProductElement", ProductElementHasReferences.ProductElementDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProductElementHasReferences), "Reference", ProductElementHasReferences.ReferenceDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(10);
				createElementMap.Add(typeof(ProductState), 0);
				createElementMap.Add(typeof(Property), 1);
				createElementMap.Add(typeof(Collection), 2);
				createElementMap.Add(typeof(Element), 3);
				createElementMap.Add(typeof(Product), 4);
				createElementMap.Add(typeof(View), 5);
				createElementMap.Add(typeof(Reference), 6);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				// A constructor was not generated for ProductState because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 0: return new ProductState(partition, propertyAssignments);
				// A constructor was not generated for Property because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 1: return new Property(partition, propertyAssignments);
				case 2: return new Collection(partition, propertyAssignments);
				case 3: return new Element(partition, propertyAssignments);
				case 4: return new Product(partition, propertyAssignments);
				case 5: return new View(partition, propertyAssignments);
				case 6: return new Reference(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(8);
				createElementLinkMap.Add(typeof(ProductElementHasProperties), 0);
				createElementLinkMap.Add(typeof(ProductHasViews), 1);
				createElementLinkMap.Add(typeof(ViewHasElements), 2);
				createElementLinkMap.Add(typeof(ElementHasChildElements), 3);
				createElementLinkMap.Add(typeof(ProductStateHasProducts), 4);
				createElementLinkMap.Add(typeof(ElementHasExtensions), 5);
				createElementLinkMap.Add(typeof(ViewHasExtensionProducts), 6);
				createElementLinkMap.Add(typeof(ProductElementHasReferences), 7);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateStoreDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new ProductElementHasProperties(partition, roleAssignments, propertyAssignments);
				case 1: return new ProductHasViews(partition, roleAssignments, propertyAssignments);
				case 2: return new ViewHasElements(partition, roleAssignments, propertyAssignments);
				case 3: return new ElementHasChildElements(partition, roleAssignments, propertyAssignments);
				case 4: return new ProductStateHasProducts(partition, roleAssignments, propertyAssignments);
				case 5: return new ElementHasExtensions(partition, roleAssignments, propertyAssignments);
				case 6: return new ViewHasExtensionProducts(partition, roleAssignments, propertyAssignments);
				case 7: return new ProductElementHasReferences(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Microsoft.VisualStudio.Patterning.Runtime.Store.GeneratedCode.DomainModelResx.gen";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ProductStateStoreDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (ProductStateStoreDomainModel.resourceManager == null)
				{
					ProductStateStoreDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(ProductStateStoreDomainModel).Assembly);
				}
				return ProductStateStoreDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return ProductStateStoreDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return ProductStateStoreDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ProductStateStoreDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new ProductStateStoreCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					
					ProductStateStoreDomainModel.copyClosure = copyFilter;
				}
				return ProductStateStoreDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (ProductStateStoreDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new ProductStateStoreDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
		
					ProductStateStoreDomainModel.removeClosure = removeFilter;
				}
				return ProductStateStoreDomainModel.removeClosure;
			}
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ProductStateStoreDeleteClosure : ProductStateStoreDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ProductStateStoreDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ProductStateStoreDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public ProductStateStoreDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasProperties.PropertyDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductHasViews.ViewDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasElements.AbstractElementDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasChildElements.ChildElementDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductStateHasProducts.ProductDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ElementHasExtensions.ExtensionDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ViewHasExtensionProducts.ExtensionDomainRoleId, true);
			DomainRoles.Add(global::Microsoft.VisualStudio.Patterning.Runtime.Store.ProductElementHasReferences.ReferenceDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ProductStateStoreCopyClosure : ProductStateStoreCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ProductStateStoreCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ProductStateStoreCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public ProductStateStoreCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}

