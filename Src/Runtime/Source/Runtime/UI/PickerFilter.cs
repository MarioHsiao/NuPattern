using System;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TeamArchitect.PowerTools;

namespace Microsoft.VisualStudio.Patterning.Runtime.UI
{
    /// <summary>
    /// Represents a filter to be applied to the elements in hierarchy items.
    /// </summary>
    [CLSCompliant(false)]
    public class PickerFilter : IPickerFilter
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PickerFilter"/> class.
        /// </summary>
        public PickerFilter()
        {
            this.Kind = ItemKind.Folder | ItemKind.Item | ItemKind.Project | ItemKind.Reference |
                ItemKind.ReferencesFolder | ItemKind.Solution | ItemKind.SolutionFolder | ItemKind.Unknown;
        }

        /// <summary>
        /// Gets or sets the kind of items to get.
        /// </summary>
        public ItemKind Kind { get; set; }

        /// <summary>
        /// Gets or sets the list of included file extensions.
        /// </summary>
        /// <value>The list of included file extensions.</value>
        public string IncludeFileExtensions { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether include empty containers.
        /// </summary>
        /// <value>
        /// Returns <c>true</c> if include empty containers; otherwise, <c>false</c>.
        /// </value>
        public bool IncludeEmptyContainers { get; set; }

		/// <summary>
		/// Gets or sets a value indicating whether include files generated by t4.
		/// </summary>
		/// <value>
		/// Returns <c>true</c> if include generated files; otherwise, <c>false</c>.
		/// </value>
		public bool IncludeGeneratedCode { get; set; }
		
		/// <summary>
        /// Applies the filter to an item.
        /// </summary>
        /// <param name="item">The item to check.</param>
        /// <returns>Returns <c>true</c> when the item match the criteria selected for the filter; otherwise <c>false</c>.</returns>
        public bool ApplyFilter(IItemContainer item)
        {
            Guard.NotNull(() => item, item);

            if ((item.Kind & this.Kind) == item.Kind)
            {
				var lookupChildren = (item.Items.Count() > 0 && this.IncludeGeneratedCode);

				if (!string.IsNullOrEmpty(this.IncludeFileExtensions) && item.Kind == ItemKind.Item && !lookupChildren)
                {
                    return this.IncludeFileExtensions.ToUpperInvariant().Contains(Path.GetExtension(item.PhysicalPath).ToUpperInvariant());
                }

                if ((item.Kind != ItemKind.Item || lookupChildren) 
					&& !this.IncludeEmptyContainers)
                {
                    return item.Items.Any(child => this.ApplyFilter(child));
                }

                return true;
            }

            return false;
        }
    }
}