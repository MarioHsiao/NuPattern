//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.Patterning.Extensibility;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Microsoft.VisualStudio.Patterning.Runtime.Schema.UnitTests
{
    public partial class NamedElementSchemaSpec
    {
        private static readonly IAssertion Assert = new Assertion();

        [TestClass]
        public abstract class GivenANamedElementSchema
        {
            protected abstract NamedElementSchema Element
            {
				get;
            }

            [TestMethod, TestCategory("Unit")]
            public void ThenDisplayNameIsTracking()
            {
                Assert.True(this.Element.IsDisplayNameTracking);
                Assert.Equal(this.Element.CalculateDisplayNameTrackingValue(), this.Element.DisplayName);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenTrackedPropertyIsChanged_ThenDisplayNameNotTracking()
            {
			    this.Element.Store.TransactionManager.DoWithinTransaction( () =>
                    {
                        this.Element.DisplayName = "TestDisplayNameChanged";
                    });

                Assert.False(this.Element.IsDisplayNameTracking);
                Assert.Equal("TestDisplayNameChanged", this.Element.DisplayName);
            }

            [TestMethod, TestCategory("Unit")]
            public void ThenDescriptionIsTracking()
            {
                Assert.True(this.Element.IsDescriptionTracking);
                Assert.Equal(this.Element.CalculateDescriptionTrackingValue(), this.Element.Description);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenTrackedPropertyIsChanged_ThenDescriptionNotTracking()
            {
			    this.Element.Store.TransactionManager.DoWithinTransaction( () =>
                    {
                        this.Element.Description = "TestDescriptionChanged";
                    });

                Assert.False(this.Element.IsDescriptionTracking);
                Assert.Equal("TestDescriptionChanged", this.Element.Description);
            }

            [TestMethod, TestCategory("Unit")]
            public void ThenCodeIdentifierIsTracking()
            {
                Assert.True(this.Element.IsCodeIdentifierTracking);
                Assert.Equal(this.Element.CalculateCodeIdentifierTrackingValue(), this.Element.CodeIdentifier);
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenTrackedPropertyIsChanged_ThenCodeIdentifierNotTracking()
            {
			    this.Element.Store.TransactionManager.DoWithinTransaction( () =>
                    {
                        this.Element.CodeIdentifier = "TestCodeIdentifierChanged";
                    });

                Assert.False(this.Element.IsCodeIdentifierTracking);
                Assert.Equal("TestCodeIdentifierChanged", this.Element.CodeIdentifier);
            }
		}
	}

}
